
ATmega328P_factory.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ae  00800100  00002708  0000279c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002708  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  008002ae  008002ae  0000294a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000294a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000029a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000600  00000000  00000000  000029e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a6e2  00000000  00000000  00002fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000308c  00000000  00000000  0000d6ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002ef8  00000000  00000000  00010756  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011c8  00000000  00000000  00013650  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004a97  00000000  00000000  00014818  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004bfe  00000000  00000000  000192af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000578  00000000  00000000  0001dead  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__dtors_end>
       4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       c:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__vector_3>
      10:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__vector_4>
      14:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__vector_5>
      18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      24:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__vector_9>
      28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      2c:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__vector_11>
      30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      40:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__vector_16>
      44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>

00000068 <__ctors_start>:
      68:	6e 05       	cpc	r22, r14
      6a:	a9 08       	sbc	r10, r9
      6c:	b4 0a       	sbc	r11, r20

0000006e <__ctors_end>:
      6e:	75 05       	cpc	r23, r5
      70:	b0 08       	sbc	r11, r0

00000072 <__dtors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf ef       	ldi	r28, 0xFF	; 255
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	12 e0       	ldi	r17, 0x02	; 2
      80:	a0 e0       	ldi	r26, 0x00	; 0
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	e8 e0       	ldi	r30, 0x08	; 8
      86:	f7 e2       	ldi	r31, 0x27	; 39
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	ae 3a       	cpi	r26, 0xAE	; 174
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	22 e0       	ldi	r18, 0x02	; 2
      96:	ae ea       	ldi	r26, 0xAE	; 174
      98:	b2 e0       	ldi	r27, 0x02	; 2
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	ac 3f       	cpi	r26, 0xFC	; 252
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>

000000a4 <__do_global_ctors>:
      a4:	10 e0       	ldi	r17, 0x00	; 0
      a6:	c7 e3       	ldi	r28, 0x37	; 55
      a8:	d0 e0       	ldi	r29, 0x00	; 0
      aa:	04 c0       	rjmp	.+8      	; 0xb4 <__do_global_ctors+0x10>
      ac:	21 97       	sbiw	r28, 0x01	; 1
      ae:	fe 01       	movw	r30, r28
      b0:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__tablejump2__>
      b4:	c4 33       	cpi	r28, 0x34	; 52
      b6:	d1 07       	cpc	r29, r17
      b8:	c9 f7       	brne	.-14     	; 0xac <__do_global_ctors+0x8>
      ba:	0e 94 00 0a 	call	0x1400	; 0x1400 <main>
      be:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <atexit_fini>

000000c2 <__bad_interrupt>:
      c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <atexit_finido>:
      c6:	a0 91 ae 02 	lds	r26, 0x02AE	; 0x8002ae <__data_end>
      ca:	b0 91 af 02 	lds	r27, 0x02AF	; 0x8002af <__data_end+0x1>
      ce:	10 97       	sbiw	r26, 0x00	; 0
      d0:	69 f0       	breq	.+26     	; 0xec <atexit_finido+0x26>
      d2:	ed 91       	ld	r30, X+
      d4:	fc 91       	ld	r31, X
      d6:	11 97       	sbiw	r26, 0x01	; 1
      d8:	12 96       	adiw	r26, 0x02	; 2
      da:	8d 91       	ld	r24, X+
      dc:	9c 91       	ld	r25, X
      de:	13 97       	sbiw	r26, 0x03	; 3
      e0:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <__data_end+0x1>
      e4:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <__data_end>
      e8:	09 95       	icall
      ea:	ed cf       	rjmp	.-38     	; 0xc6 <atexit_finido>
      ec:	08 95       	ret

000000ee <atexit>:
      ee:	cf 93       	push	r28
      f0:	df 93       	push	r29
      f2:	ec 01       	movw	r28, r24
      f4:	84 e0       	ldi	r24, 0x04	; 4
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <malloc>
      fc:	00 97       	sbiw	r24, 0x00	; 0
      fe:	81 f0       	breq	.+32     	; 0x120 <atexit+0x32>
     100:	fc 01       	movw	r30, r24
     102:	d1 83       	std	Z+1, r29	; 0x01
     104:	c0 83       	st	Z, r28
     106:	20 91 ae 02 	lds	r18, 0x02AE	; 0x8002ae <__data_end>
     10a:	30 91 af 02 	lds	r19, 0x02AF	; 0x8002af <__data_end+0x1>
     10e:	33 83       	std	Z+3, r19	; 0x03
     110:	22 83       	std	Z+2, r18	; 0x02
     112:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <__data_end+0x1>
     116:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <__data_end>
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	02 c0       	rjmp	.+4      	; 0x124 <atexit+0x36>
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <__tcf_0>:
{
public:
    /**
     * @brief Delete the ADC.
     */
    virtual ~AdcInterface() noexcept = default;
     12a:	88 e2       	ldi	r24, 0x28	; 40
     12c:	91 e0       	ldi	r25, 0x01	; 1
     12e:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <_ZZN6driver10atmega328p3Adc11getInstanceEvE10myInstance+0x1>
     132:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <_ZZN6driver10atmega328p3Adc11getInstanceEvE10myInstance>
     136:	08 95       	ret

00000138 <_ZNK6driver10atmega328p3Adc10resolutionEv>:
    // Return a reference to the singleton ADC instance, cast to the corresponding interface.
    return myInstance; 
}

// -----------------------------------------------------------------------------
uint8_t Adc::resolution() const noexcept { return AdcParam::Resolution; }
     138:	8a e0       	ldi	r24, 0x0A	; 10
     13a:	08 95       	ret

0000013c <_ZNK6driver10atmega328p3Adc8maxValueEv>:

// -----------------------------------------------------------------------------
uint16_t Adc::maxValue() const noexcept { return AdcParam::MaxValue; }
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	93 e0       	ldi	r25, 0x03	; 3
     140:	08 95       	ret

00000142 <_ZNK6driver10atmega328p3Adc13supplyVoltageEv>:

// -----------------------------------------------------------------------------
double Adc::supplyVoltage() const noexcept { return AdcParam::SupplyVoltage; }
     142:	60 e0       	ldi	r22, 0x00	; 0
     144:	70 e0       	ldi	r23, 0x00	; 0
     146:	80 ea       	ldi	r24, 0xA0	; 160
     148:	90 e4       	ldi	r25, 0x40	; 64
     14a:	08 95       	ret

0000014c <_ZNK6driver10atmega328p3Adc4readEh>:

// -----------------------------------------------------------------------------
uint16_t Adc::read(const uint8_t analogPin) const noexcept
{ 
     14c:	0f 93       	push	r16
    return myEnabled ? adcValue(analogPin) : 0U;
     14e:	fc 01       	movw	r30, r24
     150:	82 81       	ldd	r24, Z+2	; 0x02
     152:	88 23       	and	r24, r24
     154:	09 f4       	brne	.+2      	; 0x158 <_ZNK6driver10atmega328p3Adc4readEh+0xc>
     156:	4a c0       	rjmp	.+148    	; 0x1ec <_ZNK6driver10atmega328p3Adc4readEh+0xa0>
template <typename T>
constexpr bool inRange(const T number, const T min, const T max) noexcept
{
    static_assert(type_traits::is_arithmetic<T>::value, 
        "Range checks are only supported for arithmetic types!");
    return ((min <= number) && (max >= number));
     158:	66 30       	cpi	r22, 0x06	; 6
     15a:	10 f4       	brcc	.+4      	; 0x160 <_ZNK6driver10atmega328p3Adc4readEh+0x14>
     15c:	98 2f       	mov	r25, r24
     15e:	01 c0       	rjmp	.+2      	; 0x162 <_ZNK6driver10atmega328p3Adc4readEh+0x16>
     160:	90 e0       	ldi	r25, 0x00	; 0

// -----------------------------------------------------------------------------
constexpr bool isPinNumberValid(const uint8_t pin) noexcept
{
    return utils::inRange(pin, Adc::Pin::A0, Adc::Pin::A5) 
        || utils::inRange(pin, Adc::Port::C0, Adc::Port::C5);
     162:	91 11       	cpse	r25, r1
     164:	05 c0       	rjmp	.+10     	; 0x170 <_ZNK6driver10atmega328p3Adc4readEh+0x24>
     166:	6e 30       	cpi	r22, 0x0E	; 14
     168:	18 f0       	brcs	.+6      	; 0x170 <_ZNK6driver10atmega328p3Adc4readEh+0x24>
     16a:	64 31       	cpi	r22, 0x14	; 20
     16c:	08 f4       	brcc	.+2      	; 0x170 <_ZNK6driver10atmega328p3Adc4readEh+0x24>
     16e:	98 2f       	mov	r25, r24
}

// -----------------------------------------------------------------------------
inline uint16_t adcValue(const uint8_t pin) noexcept
{
    if (!isPinNumberValid(pin)) { return 0U; }
     170:	99 23       	and	r25, r25
     172:	c9 f1       	breq	.+114    	; 0x1e6 <_ZNK6driver10atmega328p3Adc4readEh+0x9a>
}

// -----------------------------------------------------------------------------
constexpr uint8_t isPinAdjustedForOffset(const uint8_t pin) noexcept
{
    return Adc::Pin::A5 >= pin ? pin : pin - AdcParam::PortOffset;
     174:	66 30       	cpi	r22, 0x06	; 6
     176:	08 f0       	brcs	.+2      	; 0x17a <_ZNK6driver10atmega328p3Adc4readEh+0x2e>
     178:	6e 50       	subi	r22, 0x0E	; 14

// -----------------------------------------------------------------------------
inline uint16_t adcValue(const uint8_t pin) noexcept
{
    if (!isPinNumberValid(pin)) { return 0U; }
    ADMUX = (1U << REFS0) | isPinAdjustedForOffset(pin);
     17a:	60 64       	ori	r22, 0x40	; 64
     17c:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
     180:	ea e7       	ldi	r30, 0x7A	; 122
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	80 68       	ori	r24, 0x80	; 128
     188:	80 83       	st	Z, r24
     18a:	80 81       	ld	r24, Z
     18c:	80 64       	ori	r24, 0x40	; 64
     18e:	80 83       	st	Z, r24
     190:	80 81       	ld	r24, Z
     192:	81 60       	ori	r24, 0x01	; 1
     194:	80 83       	st	Z, r24
     196:	80 81       	ld	r24, Z
     198:	82 60       	ori	r24, 0x02	; 2
     19a:	80 83       	st	Z, r24
     19c:	80 81       	ld	r24, Z
     19e:	84 60       	ori	r24, 0x04	; 4
     1a0:	80 83       	st	Z, r24
// -----------------------------------------------------------------------------
template <typename T>
constexpr bool read(const volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    return reg & (1ULL << bit);
     1a2:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	40 e0       	ldi	r20, 0x00	; 0
     1aa:	50 e0       	ldi	r21, 0x00	; 0
     1ac:	60 e0       	ldi	r22, 0x00	; 0
     1ae:	70 e0       	ldi	r23, 0x00	; 0
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	04 e0       	ldi	r16, 0x04	; 4
     1b6:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__lshrdi3>
     1ba:	21 70       	andi	r18, 0x01	; 1
    utils::set(ADCSRA, ADEN, ADSC, ADPS0, ADPS1, ADPS2);
    while (!utils::read(ADCSRA, ADIF));
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	40 e0       	ldi	r20, 0x00	; 0
     1c0:	50 e0       	ldi	r21, 0x00	; 0
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__cmpdi2_s8>
     1d0:	41 f3       	breq	.-48     	; 0x1a2 <_ZNK6driver10atmega328p3Adc4readEh+0x56>
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
     1d2:	ea e7       	ldi	r30, 0x7A	; 122
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 61       	ori	r24, 0x10	; 16
     1da:	80 83       	st	Z, r24
    utils::set(ADCSRA, ADIF);
    return ADC;
     1dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     1e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <_ZNK6driver10atmega328p3Adc4readEh+0xa4>
}

// -----------------------------------------------------------------------------
inline uint16_t adcValue(const uint8_t pin) noexcept
{
    if (!isPinNumberValid(pin)) { return 0U; }
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <_ZNK6driver10atmega328p3Adc4readEh+0xa4>
double Adc::supplyVoltage() const noexcept { return AdcParam::SupplyVoltage; }

// -----------------------------------------------------------------------------
uint16_t Adc::read(const uint8_t analogPin) const noexcept
{ 
    return myEnabled ? adcValue(analogPin) : 0U;
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	90 e0       	ldi	r25, 0x00	; 0
}
     1f0:	0f 91       	pop	r16
     1f2:	08 95       	ret

000001f4 <_ZNK6driver10atmega328p3Adc9dutyCycleEh>:

// -----------------------------------------------------------------------------
double Adc::dutyCycle(const uint8_t analogPin) const noexcept
{
    return read(analogPin) / static_cast<double>(AdcParam::MaxValue);
     1f4:	0e 94 a6 00 	call	0x14c	; 0x14c <_ZNK6driver10atmega328p3Adc4readEh>
     1f8:	bc 01       	movw	r22, r24
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__floatunsisf>
     202:	20 e0       	ldi	r18, 0x00	; 0
     204:	30 ec       	ldi	r19, 0xC0	; 192
     206:	4f e7       	ldi	r20, 0x7F	; 127
     208:	54 e4       	ldi	r21, 0x44	; 68
     20a:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__divsf3>
}
     20e:	08 95       	ret

00000210 <_ZNK6driver10atmega328p3Adc12inputVoltageEh>:

// -----------------------------------------------------------------------------
double Adc::inputVoltage(const uint8_t analogPin) const noexcept
{
    return dutyCycle(analogPin) * AdcParam::SupplyVoltage;
     210:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_ZNK6driver10atmega328p3Adc9dutyCycleEh>
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	40 ea       	ldi	r20, 0xA0	; 160
     21a:	50 e4       	ldi	r21, 0x40	; 64
     21c:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__mulsf3>
}
     220:	08 95       	ret

00000222 <_ZNK6driver10atmega328p3Adc13isInitializedEv>:

// -----------------------------------------------------------------------------
bool Adc::isInitialized() const noexcept { return true; }
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	08 95       	ret

00000226 <_ZNK6driver10atmega328p3Adc9isEnabledEv>:

// -----------------------------------------------------------------------------
bool Adc::isEnabled() const noexcept { return myEnabled; }
     226:	fc 01       	movw	r30, r24
     228:	82 81       	ldd	r24, Z+2	; 0x02
     22a:	08 95       	ret

0000022c <_ZN6driver10atmega328p3Adc10setEnabledEb>:

// -----------------------------------------------------------------------------
void Adc::setEnabled(const bool enable) noexcept { myEnabled = enable; }
     22c:	fc 01       	movw	r30, r24
     22e:	62 83       	std	Z+2, r22	; 0x02
     230:	08 95       	ret

00000232 <_ZN6driver10atmega328p3AdcD1Ev>:
     232:	28 e2       	ldi	r18, 0x28	; 40
     234:	31 e0       	ldi	r19, 0x01	; 1
     236:	fc 01       	movw	r30, r24
     238:	31 83       	std	Z+1, r19	; 0x01
     23a:	20 83       	st	Z, r18
     23c:	08 95       	ret

0000023e <_ZN6driver10atmega328p3AdcD0Ev>:
     23e:	28 e2       	ldi	r18, 0x28	; 40
     240:	31 e0       	ldi	r19, 0x01	; 1
     242:	fc 01       	movw	r30, r24
     244:	31 83       	std	Z+1, r19	; 0x01
     246:	20 83       	st	Z, r18
    Adc& operator=(const Adc&) = delete; // No copy assignment.
    Adc& operator=(Adc&&)      = delete; // No move assignment.

private:
    Adc() noexcept;
    ~Adc() noexcept override = default;
     248:	63 e0       	ldi	r22, 0x03	; 3
     24a:	70 e0       	ldi	r23, 0x00	; 0
     24c:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <_ZdlPvj>
     250:	08 95       	ret

00000252 <_ZN6driver10atmega328p3AdcC1Ev>:

// -----------------------------------------------------------------------------
Adc::Adc() noexcept
    : myEnabled{false}
     252:	22 e4       	ldi	r18, 0x42	; 66
     254:	31 e0       	ldi	r19, 0x01	; 1
     256:	fc 01       	movw	r30, r24
     258:	31 83       	std	Z+1, r19	; 0x01
     25a:	20 83       	st	Z, r18
     25c:	12 82       	std	Z+2, r1	; 0x02
{
    read(Pin::A0);
     25e:	60 e0       	ldi	r22, 0x00	; 0
     260:	0e 94 a6 00 	call	0x14c	; 0x14c <_ZNK6driver10atmega328p3Adc4readEh>
     264:	08 95       	ret

00000266 <_ZN6driver10atmega328p3Adc11getInstanceEv>:

// -----------------------------------------------------------------------------
AdcInterface& Adc::getInstance() noexcept
{ 
    // Create and initialize the singleton ADC instance (once only).
    static Adc myInstance{};
     266:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <_ZGVZN6driver10atmega328p3Adc11getInstanceEvE10myInstance>
     26a:	81 11       	cpse	r24, r1
     26c:	12 c0       	rjmp	.+36     	; 0x292 <_ZN6driver10atmega328p3Adc11getInstanceEv+0x2c>
     26e:	83 eb       	ldi	r24, 0xB3	; 179
     270:	92 e0       	ldi	r25, 0x02	; 2
     272:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__cxa_guard_acquire>
     276:	89 2b       	or	r24, r25
     278:	61 f0       	breq	.+24     	; 0x292 <_ZN6driver10atmega328p3Adc11getInstanceEv+0x2c>
     27a:	80 eb       	ldi	r24, 0xB0	; 176
     27c:	92 e0       	ldi	r25, 0x02	; 2
     27e:	0e 94 29 01 	call	0x252	; 0x252 <_ZN6driver10atmega328p3AdcC1Ev>
     282:	83 eb       	ldi	r24, 0xB3	; 179
     284:	92 e0       	ldi	r25, 0x02	; 2
     286:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__cxa_guard_release>
     28a:	85 e9       	ldi	r24, 0x95	; 149
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 77 00 	call	0xee	; 0xee <atexit>

    // Return a reference to the singleton ADC instance, cast to the corresponding interface.
    return myInstance; 
}
     292:	80 eb       	ldi	r24, 0xB0	; 176
     294:	92 e0       	ldi	r25, 0x02	; 2
     296:	08 95       	ret

00000298 <__tcf_0>:
{
public:
    /**
     * @brief Delete the EEPROM stream.
     */
    virtual ~EepromInterface() noexcept = default;
     298:	8c e5       	ldi	r24, 0x5C	; 92
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <_ZZN6driver10atmega328p6Eeprom11getInstanceEvE10myInstance+0x1>
     2a0:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <_ZZN6driver10atmega328p6Eeprom11getInstanceEvE10myInstance>
     2a4:	08 95       	ret

000002a6 <_ZNK6driver10atmega328p6Eeprom13isInitializedEv>:
    // Return a reference to the singleton EEPROM instance, cast to the corresponding interface.
    return myInstance; 
}

// -----------------------------------------------------------------------------
bool Eeprom::isInitialized() const noexcept { return true; }
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	08 95       	ret

000002aa <_ZNK6driver10atmega328p6Eeprom9isEnabledEv>:

// -----------------------------------------------------------------------------
bool Eeprom::isEnabled() const noexcept { return myEnabled; }
     2aa:	fc 01       	movw	r30, r24
     2ac:	82 81       	ldd	r24, Z+2	; 0x02
     2ae:	08 95       	ret

000002b0 <_ZN6driver10atmega328p6Eeprom10setEnabledEb>:

// -----------------------------------------------------------------------------
void Eeprom::setEnabled(const bool enable) noexcept { myEnabled = enable; }
     2b0:	fc 01       	movw	r30, r24
     2b2:	62 83       	std	Z+2, r22	; 0x02
     2b4:	08 95       	ret

000002b6 <_ZNK6driver10atmega328p6Eeprom14isAddressValidEjh>:
{}

// -----------------------------------------------------------------------------
bool Eeprom::isAddressValid(const uint16_t address, const uint8_t dataSize) const noexcept
{
    return EepromParam::MaxAddress >= address + dataSize;
     2b6:	64 0f       	add	r22, r20
     2b8:	71 1d       	adc	r23, r1
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	61 15       	cp	r22, r1
     2be:	74 40       	sbci	r23, 0x04	; 4
     2c0:	08 f0       	brcs	.+2      	; 0x2c4 <_ZNK6driver10atmega328p6Eeprom14isAddressValidEjh+0xe>
     2c2:	80 e0       	ldi	r24, 0x00	; 0
}
     2c4:	08 95       	ret

000002c6 <_ZNK6driver10atmega328p6Eeprom8readByteEj>:
    utils::globalInterruptEnable();
}

// -----------------------------------------------------------------------------
uint8_t Eeprom::readByte(const uint16_t address) const noexcept
{
     2c6:	0f 93       	push	r16
     2c8:	fb 01       	movw	r30, r22
// -----------------------------------------------------------------------------
template <typename T>
constexpr bool read(const volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    return reg & (1ULL << bit);
     2ca:	2f b3       	in	r18, 0x1f	; 31
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	40 e0       	ldi	r20, 0x00	; 0
     2d0:	50 e0       	ldi	r21, 0x00	; 0
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	70 e0       	ldi	r23, 0x00	; 0
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	01 e0       	ldi	r16, 0x01	; 1
     2dc:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__lshrdi3>
     2e0:	21 70       	andi	r18, 0x01	; 1
    // Wait until EEPROM is ready to read the next byte.
    while (utils::read(EECR, EEPE));
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	40 e0       	ldi	r20, 0x00	; 0
     2e6:	50 e0       	ldi	r21, 0x00	; 0
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	a0 e0       	ldi	r26, 0x00	; 0
     2f2:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__cmpdi2_s8>
     2f6:	49 f7       	brne	.-46     	; 0x2ca <_ZNK6driver10atmega328p6Eeprom8readByteEj+0x4>

    // Set the address from which to read.
    EEAR = address;
     2f8:	f2 bd       	out	0x22, r31	; 34
     2fa:	e1 bd       	out	0x21, r30	; 33
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
     2fc:	8f b3       	in	r24, 0x1f	; 31
     2fe:	81 60       	ori	r24, 0x01	; 1
     300:	8f bb       	out	0x1f, r24	; 31

    // Read and return the value of the given address.
    utils::set(EECR, EERE);
    return EEDR;
     302:	80 b5       	in	r24, 0x20	; 32
}
     304:	0f 91       	pop	r16
     306:	08 95       	ret

00000308 <_ZN6driver10atmega328p6EepromD1Ev>:
     308:	2c e5       	ldi	r18, 0x5C	; 92
     30a:	31 e0       	ldi	r19, 0x01	; 1
     30c:	fc 01       	movw	r30, r24
     30e:	31 83       	std	Z+1, r19	; 0x01
     310:	20 83       	st	Z, r18
     312:	08 95       	ret

00000314 <_ZN6driver10atmega328p6EepromD0Ev>:
     314:	2c e5       	ldi	r18, 0x5C	; 92
     316:	31 e0       	ldi	r19, 0x01	; 1
     318:	fc 01       	movw	r30, r24
     31a:	31 83       	std	Z+1, r19	; 0x01
     31c:	20 83       	st	Z, r18
    Eeprom& operator=(const Eeprom&) = delete; // No copy assignment.
    Eeprom& operator=(Eeprom&&)      = delete; // No move assignment.

private: 
    Eeprom() noexcept;
    ~Eeprom() noexcept override = default;
     31e:	63 e0       	ldi	r22, 0x03	; 3
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <_ZdlPvj>
     326:	08 95       	ret

00000328 <_ZNK6driver10atmega328p6Eeprom9writeByteEjh>:
    return EepromParam::MaxAddress >= address + dataSize;
}

// -----------------------------------------------------------------------------
void Eeprom::writeByte(const uint16_t address, const uint8_t data) const noexcept
{
     328:	0f 93       	push	r16
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	eb 01       	movw	r28, r22
     330:	e4 2f       	mov	r30, r20
// -----------------------------------------------------------------------------
template <typename T>
constexpr bool read(const volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    return reg & (1ULL << bit);
     332:	2f b3       	in	r18, 0x1f	; 31
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	40 e0       	ldi	r20, 0x00	; 0
     338:	50 e0       	ldi	r21, 0x00	; 0
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	01 e0       	ldi	r16, 0x01	; 1
     344:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__lshrdi3>
     348:	21 70       	andi	r18, 0x01	; 1
    // Wait until EEPROM is ready to send the next byte.
    while (utils::read(EECR, EEPE));
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	40 e0       	ldi	r20, 0x00	; 0
     34e:	50 e0       	ldi	r21, 0x00	; 0
     350:	60 e0       	ldi	r22, 0x00	; 0
     352:	70 e0       	ldi	r23, 0x00	; 0
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	a0 e0       	ldi	r26, 0x00	; 0
     35a:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__cmpdi2_s8>
     35e:	49 f7       	brne	.-46     	; 0x332 <_ZNK6driver10atmega328p6Eeprom9writeByteEjh+0xa>

    // Set the address and data to write.
    EEAR = address;
     360:	d2 bd       	out	0x22, r29	; 34
     362:	c1 bd       	out	0x21, r28	; 33
    EEDR = data;
     364:	e0 bd       	out	0x20, r30	; 32

    // Perform write, disable interrupts during the write sequence.
    utils::globalInterruptDisable();
     366:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <_ZN5utils22globalInterruptDisableEv>
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
     36a:	8f b3       	in	r24, 0x1f	; 31
     36c:	84 60       	ori	r24, 0x04	; 4
     36e:	8f bb       	out	0x1f, r24	; 31
     370:	8f b3       	in	r24, 0x1f	; 31
     372:	82 60       	ori	r24, 0x02	; 2
     374:	8f bb       	out	0x1f, r24	; 31
    utils::set(EECR, EEMPE);
    utils::set(EECR, EEPE);

    // Re-enable interrupts once the write sequence is complete.
    utils::globalInterruptEnable();
     376:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN5utils21globalInterruptEnableEv>
}
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	0f 91       	pop	r16
     380:	08 95       	ret

00000382 <_ZN6driver10atmega328p6EepromC1Ev>:
// -----------------------------------------------------------------------------
void Eeprom::setEnabled(const bool enable) noexcept { myEnabled = enable; }

// -----------------------------------------------------------------------------
Eeprom::Eeprom() noexcept
    : myEnabled{false} 
     382:	20 e7       	ldi	r18, 0x70	; 112
     384:	31 e0       	ldi	r19, 0x01	; 1
     386:	fc 01       	movw	r30, r24
     388:	31 83       	std	Z+1, r19	; 0x01
     38a:	20 83       	st	Z, r18
     38c:	12 82       	std	Z+2, r1	; 0x02
     38e:	08 95       	ret

00000390 <_ZN6driver10atmega328p6Eeprom11getInstanceEv>:

// -----------------------------------------------------------------------------
EepromInterface& Eeprom::getInstance() noexcept
{
    // Create and initialize the singleton EEPROM instance (once only).
    static Eeprom myInstance{};
     390:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <_ZGVZN6driver10atmega328p6Eeprom11getInstanceEvE10myInstance>
     394:	81 11       	cpse	r24, r1
     396:	12 c0       	rjmp	.+36     	; 0x3bc <_ZN6driver10atmega328p6Eeprom11getInstanceEv+0x2c>
     398:	8e eb       	ldi	r24, 0xBE	; 190
     39a:	92 e0       	ldi	r25, 0x02	; 2
     39c:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__cxa_guard_acquire>
     3a0:	89 2b       	or	r24, r25
     3a2:	61 f0       	breq	.+24     	; 0x3bc <_ZN6driver10atmega328p6Eeprom11getInstanceEv+0x2c>
     3a4:	8b eb       	ldi	r24, 0xBB	; 187
     3a6:	92 e0       	ldi	r25, 0x02	; 2
     3a8:	0e 94 c1 01 	call	0x382	; 0x382 <_ZN6driver10atmega328p6EepromC1Ev>
     3ac:	8e eb       	ldi	r24, 0xBE	; 190
     3ae:	92 e0       	ldi	r25, 0x02	; 2
     3b0:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__cxa_guard_release>
     3b4:	8c e4       	ldi	r24, 0x4C	; 76
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	0e 94 77 00 	call	0xee	; 0xee <atexit>

    // Return a reference to the singleton EEPROM instance, cast to the corresponding interface.
    return myInstance; 
}
     3bc:	8b eb       	ldi	r24, 0xBB	; 187
     3be:	92 e0       	ldi	r25, 0x02	; 2
     3c0:	08 95       	ret

000003c2 <_ZNK6driver10atmega328p4Gpio13isInitializedEv>:
 *        This class is non-copyable and non-movable.
 * 
 * @tparam Size The array size. Must be greater than 0.
 */
template <size_t Size>
class CallbackArray : public Array<void (*)(), Size>
     3c2:	21 e0       	ldi	r18, 0x01	; 1
     3c4:	fc 01       	movw	r30, r24
     3c6:	82 81       	ldd	r24, Z+2	; 0x02
     3c8:	93 81       	ldd	r25, Z+3	; 0x03
     3ca:	89 2b       	or	r24, r25
     3cc:	09 f4       	brne	.+2      	; 0x3d0 <_ZNK6driver10atmega328p4Gpio13isInitializedEv+0xe>
     3ce:	20 e0       	ldi	r18, 0x00	; 0
     3d0:	82 2f       	mov	r24, r18
     3d2:	08 95       	ret

000003d4 <_ZNK6driver10atmega328p4Gpio4readEv>:
     3d4:	0f 93       	push	r16
     3d6:	dc 01       	movw	r26, r24
     3d8:	14 96       	adiw	r26, 0x04	; 4
     3da:	0c 91       	ld	r16, X
     3dc:	14 97       	sbiw	r26, 0x04	; 4
     3de:	12 96       	adiw	r26, 0x02	; 2
     3e0:	ed 91       	ld	r30, X+
     3e2:	fc 91       	ld	r31, X
     3e4:	13 97       	sbiw	r26, 0x03	; 3
     3e6:	04 80       	ldd	r0, Z+4	; 0x04
     3e8:	f5 81       	ldd	r31, Z+5	; 0x05
     3ea:	e0 2d       	mov	r30, r0
     3ec:	20 81       	ld	r18, Z
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	40 e0       	ldi	r20, 0x00	; 0
     3f2:	50 e0       	ldi	r21, 0x00	; 0
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__lshrdi3>
     400:	82 2f       	mov	r24, r18
     402:	81 70       	andi	r24, 0x01	; 1
     404:	0f 91       	pop	r16
     406:	08 95       	ret

00000408 <_ZN6driver10atmega328p4Gpio5writeEb>:
     408:	0f 93       	push	r16
     40a:	66 23       	and	r22, r22
     40c:	c9 f0       	breq	.+50     	; 0x440 <_ZN6driver10atmega328p4Gpio5writeEb+0x38>
     40e:	dc 01       	movw	r26, r24
     410:	14 96       	adiw	r26, 0x04	; 4
     412:	0c 91       	ld	r16, X
     414:	14 97       	sbiw	r26, 0x04	; 4
     416:	12 96       	adiw	r26, 0x02	; 2
     418:	ed 91       	ld	r30, X+
     41a:	fc 91       	ld	r31, X
     41c:	13 97       	sbiw	r26, 0x03	; 3
     41e:	02 80       	ldd	r0, Z+2	; 0x02
     420:	f3 81       	ldd	r31, Z+3	; 0x03
     422:	e0 2d       	mov	r30, r0
     424:	a0 81       	ld	r26, Z
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__ashldi3>
     43a:	2a 2b       	or	r18, r26
     43c:	20 83       	st	Z, r18
     43e:	15 c0       	rjmp	.+42     	; 0x46a <_ZN6driver10atmega328p4Gpio5writeEb+0x62>
     440:	fc 01       	movw	r30, r24
     442:	04 81       	ldd	r16, Z+4	; 0x04
     444:	02 80       	ldd	r0, Z+2	; 0x02
     446:	f3 81       	ldd	r31, Z+3	; 0x03
     448:	e0 2d       	mov	r30, r0
     44a:	a2 81       	ldd	r26, Z+2	; 0x02
     44c:	b3 81       	ldd	r27, Z+3	; 0x03
     44e:	ec 91       	ld	r30, X
     450:	21 e0       	ldi	r18, 0x01	; 1
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	40 e0       	ldi	r20, 0x00	; 0
     456:	50 e0       	ldi	r21, 0x00	; 0
     458:	60 e0       	ldi	r22, 0x00	; 0
     45a:	70 e0       	ldi	r23, 0x00	; 0
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__ashldi3>
     464:	20 95       	com	r18
     466:	e2 23       	and	r30, r18
     468:	ec 93       	st	X, r30
     46a:	0f 91       	pop	r16
     46c:	08 95       	ret

0000046e <_ZN6driver10atmega328p4Gpio6toggleEv>:
     46e:	0f 93       	push	r16
     470:	dc 01       	movw	r26, r24
     472:	14 96       	adiw	r26, 0x04	; 4
     474:	0c 91       	ld	r16, X
     476:	14 97       	sbiw	r26, 0x04	; 4
     478:	12 96       	adiw	r26, 0x02	; 2
     47a:	ed 91       	ld	r30, X+
     47c:	fc 91       	ld	r31, X
     47e:	13 97       	sbiw	r26, 0x03	; 3
     480:	04 80       	ldd	r0, Z+4	; 0x04
     482:	f5 81       	ldd	r31, Z+5	; 0x05
     484:	e0 2d       	mov	r30, r0
     486:	a0 81       	ld	r26, Z
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__ashldi3>
     49c:	2a 2b       	or	r18, r26
     49e:	20 83       	st	Z, r18
     4a0:	0f 91       	pop	r16
     4a2:	08 95       	ret

000004a4 <_ZN6driver10atmega328p4Gpio21enableInterruptOnPortEb>:
     4a4:	0f 93       	push	r16
     4a6:	66 23       	and	r22, r22
     4a8:	b1 f0       	breq	.+44     	; 0x4d6 <_ZN6driver10atmega328p4Gpio21enableInterruptOnPortEb+0x32>
     4aa:	dc 01       	movw	r26, r24
     4ac:	12 96       	adiw	r26, 0x02	; 2
     4ae:	ed 91       	ld	r30, X+
     4b0:	fc 91       	ld	r31, X
     4b2:	13 97       	sbiw	r26, 0x03	; 3
     4b4:	00 85       	ldd	r16, Z+8	; 0x08
     4b6:	e8 e6       	ldi	r30, 0x68	; 104
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	a0 81       	ld	r26, Z
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	40 e0       	ldi	r20, 0x00	; 0
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__ashldi3>
     4d0:	2a 2b       	or	r18, r26
     4d2:	20 83       	st	Z, r18
     4d4:	16 c0       	rjmp	.+44     	; 0x502 <_ZN6driver10atmega328p4Gpio21enableInterruptOnPortEb+0x5e>
     4d6:	dc 01       	movw	r26, r24
     4d8:	12 96       	adiw	r26, 0x02	; 2
     4da:	ed 91       	ld	r30, X+
     4dc:	fc 91       	ld	r31, X
     4de:	13 97       	sbiw	r26, 0x03	; 3
     4e0:	00 85       	ldd	r16, Z+8	; 0x08
     4e2:	a8 e6       	ldi	r26, 0x68	; 104
     4e4:	b0 e0       	ldi	r27, 0x00	; 0
     4e6:	ec 91       	ld	r30, X
     4e8:	21 e0       	ldi	r18, 0x01	; 1
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	40 e0       	ldi	r20, 0x00	; 0
     4ee:	50 e0       	ldi	r21, 0x00	; 0
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__ashldi3>
     4fc:	20 95       	com	r18
     4fe:	e2 23       	and	r30, r18
     500:	ec 93       	st	X, r30
     502:	0f 91       	pop	r16
     504:	08 95       	ret

00000506 <_ZN6driver10atmega328p4Gpio15enableInterruptEb>:
     506:	0f 93       	push	r16
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	66 23       	and	r22, r22
     50e:	49 f1       	breq	.+82     	; 0x562 <_ZN6driver10atmega328p4Gpio15enableInterruptEb+0x5c>
     510:	ec 01       	movw	r28, r24
     512:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN5utils21globalInterruptEnableEv>
     516:	ea 81       	ldd	r30, Y+2	; 0x02
     518:	fb 81       	ldd	r31, Y+3	; 0x03
     51a:	00 85       	ldd	r16, Z+8	; 0x08
     51c:	e8 e6       	ldi	r30, 0x68	; 104
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	a0 81       	ld	r26, Z
     522:	21 e0       	ldi	r18, 0x01	; 1
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__ashldi3>
     536:	2a 2b       	or	r18, r26
     538:	20 83       	st	Z, r18
     53a:	0c 81       	ldd	r16, Y+4	; 0x04
     53c:	ea 81       	ldd	r30, Y+2	; 0x02
     53e:	fb 81       	ldd	r31, Y+3	; 0x03
     540:	06 80       	ldd	r0, Z+6	; 0x06
     542:	f7 81       	ldd	r31, Z+7	; 0x07
     544:	e0 2d       	mov	r30, r0
     546:	a0 81       	ld	r26, Z
     548:	21 e0       	ldi	r18, 0x01	; 1
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	40 e0       	ldi	r20, 0x00	; 0
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__ashldi3>
     55c:	2a 2b       	or	r18, r26
     55e:	20 83       	st	Z, r18
     560:	18 c0       	rjmp	.+48     	; 0x592 <_ZN6driver10atmega328p4Gpio15enableInterruptEb+0x8c>
     562:	dc 01       	movw	r26, r24
     564:	14 96       	adiw	r26, 0x04	; 4
     566:	0c 91       	ld	r16, X
     568:	14 97       	sbiw	r26, 0x04	; 4
     56a:	12 96       	adiw	r26, 0x02	; 2
     56c:	ed 91       	ld	r30, X+
     56e:	fc 91       	ld	r31, X
     570:	13 97       	sbiw	r26, 0x03	; 3
     572:	a6 81       	ldd	r26, Z+6	; 0x06
     574:	b7 81       	ldd	r27, Z+7	; 0x07
     576:	ec 91       	ld	r30, X
     578:	21 e0       	ldi	r18, 0x01	; 1
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__ashldi3>
     58c:	20 95       	com	r18
     58e:	e2 23       	and	r30, r18
     590:	ec 93       	st	X, r30
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	0f 91       	pop	r16
     598:	08 95       	ret

0000059a <_ZN6driver10atmega328p4GpioD1Ev>:
     59a:	4f 92       	push	r4
     59c:	5f 92       	push	r5
     59e:	6f 92       	push	r6
     5a0:	7f 92       	push	r7
     5a2:	8f 92       	push	r8
     5a4:	9f 92       	push	r9
     5a6:	af 92       	push	r10
     5a8:	bf 92       	push	r11
     5aa:	cf 92       	push	r12
     5ac:	df 92       	push	r13
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	0f 93       	push	r16
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	ec 01       	movw	r28, r24
     5ba:	88 e9       	ldi	r24, 0x98	; 152
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	99 83       	std	Y+1, r25	; 0x01
     5c0:	88 83       	st	Y, r24
     5c2:	0c 81       	ldd	r16, Y+4	; 0x04
     5c4:	ea 81       	ldd	r30, Y+2	; 0x02
     5c6:	fb 81       	ldd	r31, Y+3	; 0x03
     5c8:	a0 81       	ld	r26, Z
     5ca:	b1 81       	ldd	r27, Z+1	; 0x01
     5cc:	ec 91       	ld	r30, X
     5ce:	21 e0       	ldi	r18, 0x01	; 1
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	40 e0       	ldi	r20, 0x00	; 0
     5d4:	50 e0       	ldi	r21, 0x00	; 0
     5d6:	60 e0       	ldi	r22, 0x00	; 0
     5d8:	70 e0       	ldi	r23, 0x00	; 0
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__ashldi3>
     5e2:	20 95       	com	r18
     5e4:	e2 23       	and	r30, r18
     5e6:	ec 93       	st	X, r30
     5e8:	0c 81       	ldd	r16, Y+4	; 0x04
     5ea:	ea 81       	ldd	r30, Y+2	; 0x02
     5ec:	fb 81       	ldd	r31, Y+3	; 0x03
     5ee:	a2 81       	ldd	r26, Z+2	; 0x02
     5f0:	b3 81       	ldd	r27, Z+3	; 0x03
     5f2:	ec 91       	ld	r30, X
     5f4:	21 e0       	ldi	r18, 0x01	; 1
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__ashldi3>
     608:	20 95       	com	r18
     60a:	e2 23       	and	r30, r18
     60c:	ec 93       	st	X, r30
     60e:	0c 81       	ldd	r16, Y+4	; 0x04
     610:	e6 ec       	ldi	r30, 0xC6	; 198
     612:	f2 e0       	ldi	r31, 0x02	; 2
     614:	40 80       	ld	r4, Z
     616:	51 80       	ldd	r5, Z+1	; 0x01
     618:	62 80       	ldd	r6, Z+2	; 0x02
     61a:	73 80       	ldd	r7, Z+3	; 0x03
     61c:	21 e0       	ldi	r18, 0x01	; 1
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	40 e0       	ldi	r20, 0x00	; 0
     622:	50 e0       	ldi	r21, 0x00	; 0
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	70 e0       	ldi	r23, 0x00	; 0
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__ashldi3>
     630:	82 2e       	mov	r8, r18
     632:	93 2e       	mov	r9, r19
     634:	a4 2e       	mov	r10, r20
     636:	b5 2e       	mov	r11, r21
     638:	80 94       	com	r8
     63a:	90 94       	com	r9
     63c:	a0 94       	com	r10
     63e:	b0 94       	com	r11
     640:	84 20       	and	r8, r4
     642:	95 20       	and	r9, r5
     644:	a6 20       	and	r10, r6
     646:	b7 20       	and	r11, r7
     648:	80 82       	st	Z, r8
     64a:	91 82       	std	Z+1, r9	; 0x01
     64c:	a2 82       	std	Z+2, r10	; 0x02
     64e:	b3 82       	std	Z+3, r11	; 0x03
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	ce 01       	movw	r24, r28
     654:	0e 94 83 02 	call	0x506	; 0x506 <_ZN6driver10atmega328p4Gpio15enableInterruptEb>
     658:	1b 82       	std	Y+3, r1	; 0x03
     65a:	1a 82       	std	Y+2, r1	; 0x02
     65c:	84 e8       	ldi	r24, 0x84	; 132
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	99 83       	std	Y+1, r25	; 0x01
     662:	88 83       	st	Y, r24
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	0f 91       	pop	r16
     66a:	ff 90       	pop	r15
     66c:	ef 90       	pop	r14
     66e:	df 90       	pop	r13
     670:	cf 90       	pop	r12
     672:	bf 90       	pop	r11
     674:	af 90       	pop	r10
     676:	9f 90       	pop	r9
     678:	8f 90       	pop	r8
     67a:	7f 90       	pop	r7
     67c:	6f 90       	pop	r6
     67e:	5f 90       	pop	r5
     680:	4f 90       	pop	r4
     682:	08 95       	ret

00000684 <_ZN6driver10atmega328p4GpioD0Ev>:
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	ec 01       	movw	r28, r24
     68a:	0e 94 cd 02 	call	0x59a	; 0x59a <_ZN6driver10atmega328p4GpioD1Ev>
     68e:	65 e0       	ldi	r22, 0x05	; 5
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	ce 01       	movw	r24, r28
     694:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <_ZdlPvj>
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret

0000069e <_ZN6driver10atmega328p4Gpio12initHardwareEh>:
     69e:	88 30       	cpi	r24, 0x08	; 8
     6a0:	20 f0       	brcs	.+8      	; 0x6aa <_ZN6driver10atmega328p4Gpio12initHardwareEh+0xc>
     6a2:	8e 30       	cpi	r24, 0x0E	; 14
     6a4:	20 f0       	brcs	.+8      	; 0x6ae <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x10>
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	03 c0       	rjmp	.+6      	; 0x6b0 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x12>
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	01 c0       	rjmp	.+2      	; 0x6b0 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x12>
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	91 11       	cpse	r25, r1
     6b2:	0f c0       	rjmp	.+30     	; 0x6d2 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x34>
     6b4:	8e 30       	cpi	r24, 0x0E	; 14
     6b6:	18 f0       	brcs	.+6      	; 0x6be <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x20>
     6b8:	84 31       	cpi	r24, 0x14	; 20
     6ba:	08 f4       	brcc	.+2      	; 0x6be <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x20>
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	91 11       	cpse	r25, r1
     6c0:	0b c0       	rjmp	.+22     	; 0x6d8 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x3a>
     6c2:	86 30       	cpi	r24, 0x06	; 6
     6c4:	08 f4       	brcc	.+2      	; 0x6c8 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x2a>
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	99 23       	and	r25, r25
     6ca:	49 f0       	breq	.+18     	; 0x6de <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x40>
     6cc:	86 e0       	ldi	r24, 0x06	; 6
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	08 95       	ret
     6d2:	8a e1       	ldi	r24, 0x1A	; 26
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	08 95       	ret
     6d8:	80 e1       	ldi	r24, 0x10	; 16
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	08 95       	ret
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	08 95       	ret

000006e4 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE>:
     6e4:	4f 92       	push	r4
     6e6:	5f 92       	push	r5
     6e8:	6f 92       	push	r6
     6ea:	7f 92       	push	r7
     6ec:	8f 92       	push	r8
     6ee:	9f 92       	push	r9
     6f0:	af 92       	push	r10
     6f2:	bf 92       	push	r11
     6f4:	cf 92       	push	r12
     6f6:	df 92       	push	r13
     6f8:	ef 92       	push	r14
     6fa:	ff 92       	push	r15
     6fc:	0f 93       	push	r16
     6fe:	e8 2f       	mov	r30, r24
     700:	84 31       	cpi	r24, 0x14	; 20
     702:	d8 f4       	brcc	.+54     	; 0x73a <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x56>
     704:	63 30       	cpi	r22, 0x03	; 3
     706:	d8 f4       	brcc	.+54     	; 0x73e <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x5a>
     708:	84 31       	cpi	r24, 0x14	; 20
     70a:	a8 f4       	brcc	.+42     	; 0x736 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x52>
     70c:	80 90 c6 02 	lds	r8, 0x02C6	; 0x8002c6 <_ZN6driver10atmega328p12_GLOBAL__N_19GpioParam11pinRegistryE>
     710:	90 90 c7 02 	lds	r9, 0x02C7	; 0x8002c7 <_ZN6driver10atmega328p12_GLOBAL__N_19GpioParam11pinRegistryE+0x1>
     714:	a0 90 c8 02 	lds	r10, 0x02C8	; 0x8002c8 <_ZN6driver10atmega328p12_GLOBAL__N_19GpioParam11pinRegistryE+0x2>
     718:	b0 90 c9 02 	lds	r11, 0x02C9	; 0x8002c9 <_ZN6driver10atmega328p12_GLOBAL__N_19GpioParam11pinRegistryE+0x3>
     71c:	28 2d       	mov	r18, r8
     71e:	39 2d       	mov	r19, r9
     720:	4a 2d       	mov	r20, r10
     722:	5b 2d       	mov	r21, r11
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 2f       	mov	r16, r30
     72e:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__lshrdi3>
     732:	21 70       	andi	r18, 0x01	; 1
     734:	05 c0       	rjmp	.+10     	; 0x740 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x5c>
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	03 c0       	rjmp	.+6      	; 0x740 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x5c>
     73a:	21 e0       	ldi	r18, 0x01	; 1
     73c:	01 c0       	rjmp	.+2      	; 0x740 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x5c>
     73e:	21 e0       	ldi	r18, 0x01	; 1
     740:	21 11       	cpse	r18, r1
     742:	28 c0       	rjmp	.+80     	; 0x794 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0xb0>
     744:	0e 2f       	mov	r16, r30
     746:	8e 2f       	mov	r24, r30
     748:	0e 94 4f 03 	call	0x69e	; 0x69e <_ZN6driver10atmega328p4Gpio12initHardwareEh>
     74c:	fc 01       	movw	r30, r24
     74e:	00 97       	sbiw	r24, 0x00	; 0
     750:	21 f1       	breq	.+72     	; 0x79a <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0xb6>
     752:	a6 ec       	ldi	r26, 0xC6	; 198
     754:	b2 e0       	ldi	r27, 0x02	; 2
     756:	4d 90       	ld	r4, X+
     758:	5d 90       	ld	r5, X+
     75a:	6d 90       	ld	r6, X+
     75c:	7c 90       	ld	r7, X
     75e:	13 97       	sbiw	r26, 0x03	; 3
     760:	21 e0       	ldi	r18, 0x01	; 1
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	40 e0       	ldi	r20, 0x00	; 0
     766:	50 e0       	ldi	r21, 0x00	; 0
     768:	60 e0       	ldi	r22, 0x00	; 0
     76a:	70 e0       	ldi	r23, 0x00	; 0
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__ashldi3>
     774:	82 2e       	mov	r8, r18
     776:	93 2e       	mov	r9, r19
     778:	a4 2e       	mov	r10, r20
     77a:	b5 2e       	mov	r11, r21
     77c:	84 28       	or	r8, r4
     77e:	95 28       	or	r9, r5
     780:	a6 28       	or	r10, r6
     782:	b7 28       	or	r11, r7
     784:	8d 92       	st	X+, r8
     786:	9d 92       	st	X+, r9
     788:	ad 92       	st	X+, r10
     78a:	bc 92       	st	X, r11
     78c:	13 97       	sbiw	r26, 0x03	; 3
     78e:	8e 2f       	mov	r24, r30
     790:	9f 2f       	mov	r25, r31
     792:	04 c0       	rjmp	.+8      	; 0x79c <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0xb8>
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	01 c0       	rjmp	.+2      	; 0x79c <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0xb8>
     79a:	9f 2f       	mov	r25, r31
     79c:	0f 91       	pop	r16
     79e:	ff 90       	pop	r15
     7a0:	ef 90       	pop	r14
     7a2:	df 90       	pop	r13
     7a4:	cf 90       	pop	r12
     7a6:	bf 90       	pop	r11
     7a8:	af 90       	pop	r10
     7aa:	9f 90       	pop	r9
     7ac:	8f 90       	pop	r8
     7ae:	7f 90       	pop	r7
     7b0:	6f 90       	pop	r6
     7b2:	5f 90       	pop	r5
     7b4:	4f 90       	pop	r4
     7b6:	08 95       	ret

000007b8 <_ZN6driver10atmega328p4Gpio12setDirectionENS1_9DirectionE>:
     7b8:	0f 93       	push	r16
     7ba:	61 30       	cpi	r22, 0x01	; 1
     7bc:	c9 f4       	brne	.+50     	; 0x7f0 <_ZN6driver10atmega328p4Gpio12setDirectionENS1_9DirectionE+0x38>
     7be:	dc 01       	movw	r26, r24
     7c0:	14 96       	adiw	r26, 0x04	; 4
     7c2:	0c 91       	ld	r16, X
     7c4:	14 97       	sbiw	r26, 0x04	; 4
     7c6:	12 96       	adiw	r26, 0x02	; 2
     7c8:	ed 91       	ld	r30, X+
     7ca:	fc 91       	ld	r31, X
     7cc:	13 97       	sbiw	r26, 0x03	; 3
     7ce:	02 80       	ldd	r0, Z+2	; 0x02
     7d0:	f3 81       	ldd	r31, Z+3	; 0x03
     7d2:	e0 2d       	mov	r30, r0
     7d4:	a0 81       	ld	r26, Z
     7d6:	21 e0       	ldi	r18, 0x01	; 1
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__ashldi3>
     7ea:	2a 2b       	or	r18, r26
     7ec:	20 83       	st	Z, r18
     7ee:	17 c0       	rjmp	.+46     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     7f0:	62 30       	cpi	r22, 0x02	; 2
     7f2:	a9 f4       	brne	.+42     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     7f4:	fc 01       	movw	r30, r24
     7f6:	04 81       	ldd	r16, Z+4	; 0x04
     7f8:	02 80       	ldd	r0, Z+2	; 0x02
     7fa:	f3 81       	ldd	r31, Z+3	; 0x03
     7fc:	e0 2d       	mov	r30, r0
     7fe:	01 90       	ld	r0, Z+
     800:	f0 81       	ld	r31, Z
     802:	e0 2d       	mov	r30, r0
     804:	a0 81       	ld	r26, Z
     806:	21 e0       	ldi	r18, 0x01	; 1
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	40 e0       	ldi	r20, 0x00	; 0
     80c:	50 e0       	ldi	r21, 0x00	; 0
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__ashldi3>
     81a:	2a 2b       	or	r18, r26
     81c:	20 83       	st	Z, r18
     81e:	0f 91       	pop	r16
     820:	08 95       	ret

00000822 <_ZN9container5ArrayIPFvvELj3EEC1Ev>:
     822:	26 e0       	ldi	r18, 0x06	; 6
     824:	fc 01       	movw	r30, r24
     826:	11 92       	st	Z+, r1
     828:	2a 95       	dec	r18
     82a:	e9 f7       	brne	.-6      	; 0x826 <_ZN9container5ArrayIPFvvELj3EEC1Ev+0x4>
     82c:	08 95       	ret

0000082e <_ZN9container13CallbackArrayILj3EEC1Ev>:
     82e:	0e 94 11 04 	call	0x822	; 0x822 <_ZN9container5ArrayIPFvvELj3EEC1Ev>
     832:	08 95       	ret

00000834 <_ZNK9container13CallbackArrayILj3EE12isIndexValidEj>:
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	63 30       	cpi	r22, 0x03	; 3
     838:	71 05       	cpc	r23, r1
     83a:	08 f0       	brcs	.+2      	; 0x83e <_ZNK9container13CallbackArrayILj3EE12isIndexValidEj+0xa>
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	08 95       	ret

00000840 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj>:
     840:	ef 92       	push	r14
     842:	ff 92       	push	r15
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	8c 01       	movw	r16, r24
     84e:	7b 01       	movw	r14, r22
     850:	ea 01       	movw	r28, r20
     852:	ba 01       	movw	r22, r20
     854:	0e 94 1a 04 	call	0x834	; 0x834 <_ZNK9container13CallbackArrayILj3EE12isIndexValidEj>
     858:	88 23       	and	r24, r24
     85a:	21 f0       	breq	.+8      	; 0x864 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x24>
     85c:	e1 14       	cp	r14, r1
     85e:	f1 04       	cpc	r15, r1
     860:	19 f4       	brne	.+6      	; 0x868 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x28>
     862:	03 c0       	rjmp	.+6      	; 0x86a <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x2a>
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	01 c0       	rjmp	.+2      	; 0x86a <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x2a>
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	81 11       	cpse	r24, r1
     86c:	08 c0       	rjmp	.+16     	; 0x87e <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x3e>
     86e:	cc 0f       	add	r28, r28
     870:	dd 1f       	adc	r29, r29
     872:	c0 0f       	add	r28, r16
     874:	d1 1f       	adc	r29, r17
     876:	f9 82       	std	Y+1, r15	; 0x01
     878:	e8 82       	st	Y, r14
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	01 c0       	rjmp	.+2      	; 0x880 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x40>
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	08 95       	ret

0000088e <_ZNK6driver10atmega328p4Gpio11setCallbackEPFvvE>:
     88e:	dc 01       	movw	r26, r24
     890:	12 96       	adiw	r26, 0x02	; 2
     892:	ed 91       	ld	r30, X+
     894:	fc 91       	ld	r31, X
     896:	13 97       	sbiw	r26, 0x03	; 3
     898:	02 80       	ldd	r0, Z+2	; 0x02
     89a:	f3 81       	ldd	r31, Z+3	; 0x03
     89c:	e0 2d       	mov	r30, r0
     89e:	90 81       	ld	r25, Z
     8a0:	85 b1       	in	r24, 0x05	; 5
     8a2:	98 13       	cpse	r25, r24
     8a4:	07 c0       	rjmp	.+14     	; 0x8b4 <_ZNK6driver10atmega328p4Gpio11setCallbackEPFvvE+0x26>
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	8a ec       	ldi	r24, 0xCA	; 202
     8ac:	92 e0       	ldi	r25, 0x02	; 2
     8ae:	0e 94 20 04 	call	0x840	; 0x840 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj>
     8b2:	08 95       	ret
     8b4:	90 81       	ld	r25, Z
     8b6:	88 b1       	in	r24, 0x08	; 8
     8b8:	98 13       	cpse	r25, r24
     8ba:	07 c0       	rjmp	.+14     	; 0x8ca <_ZNK6driver10atmega328p4Gpio11setCallbackEPFvvE+0x3c>
     8bc:	41 e0       	ldi	r20, 0x01	; 1
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	8a ec       	ldi	r24, 0xCA	; 202
     8c2:	92 e0       	ldi	r25, 0x02	; 2
     8c4:	0e 94 20 04 	call	0x840	; 0x840 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj>
     8c8:	08 95       	ret
     8ca:	90 81       	ld	r25, Z
     8cc:	8b b1       	in	r24, 0x0b	; 11
     8ce:	98 13       	cpse	r25, r24
     8d0:	06 c0       	rjmp	.+12     	; 0x8de <_ZNK6driver10atmega328p4Gpio11setCallbackEPFvvE+0x50>
     8d2:	42 e0       	ldi	r20, 0x02	; 2
     8d4:	50 e0       	ldi	r21, 0x00	; 0
     8d6:	8a ec       	ldi	r24, 0xCA	; 202
     8d8:	92 e0       	ldi	r25, 0x02	; 2
     8da:	0e 94 20 04 	call	0x840	; 0x840 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj>
     8de:	08 95       	ret

000008e0 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE>:
     8e0:	ef 92       	push	r14
     8e2:	ff 92       	push	r15
     8e4:	0f 93       	push	r16
     8e6:	1f 93       	push	r17
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	8c 01       	movw	r16, r24
     8ee:	c6 2f       	mov	r28, r22
     8f0:	d4 2f       	mov	r29, r20
     8f2:	79 01       	movw	r14, r18
     8f4:	88 e9       	ldi	r24, 0x98	; 152
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	f8 01       	movw	r30, r16
     8fa:	91 83       	std	Z+1, r25	; 0x01
     8fc:	80 83       	st	Z, r24
     8fe:	64 2f       	mov	r22, r20
     900:	8c 2f       	mov	r24, r28
     902:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE>
     906:	9c 01       	movw	r18, r24
     908:	f8 01       	movw	r30, r16
     90a:	93 83       	std	Z+3, r25	; 0x03
     90c:	82 83       	std	Z+2, r24	; 0x02
     90e:	c8 30       	cpi	r28, 0x08	; 8
     910:	20 f0       	brcs	.+8      	; 0x91a <__stack+0x1b>
     912:	ce 30       	cpi	r28, 0x0E	; 14
     914:	20 f0       	brcs	.+8      	; 0x91e <__stack+0x1f>
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	03 c0       	rjmp	.+6      	; 0x920 <__stack+0x21>
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	01 c0       	rjmp	.+2      	; 0x920 <__stack+0x21>
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	99 23       	and	r25, r25
     922:	11 f0       	breq	.+4      	; 0x928 <__stack+0x29>
     924:	c8 50       	subi	r28, 0x08	; 8
     926:	0f c0       	rjmp	.+30     	; 0x946 <__stack+0x47>
     928:	ce 30       	cpi	r28, 0x0E	; 14
     92a:	18 f0       	brcs	.+6      	; 0x932 <__stack+0x33>
     92c:	c4 31       	cpi	r28, 0x14	; 20
     92e:	08 f4       	brcc	.+2      	; 0x932 <__stack+0x33>
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	99 23       	and	r25, r25
     934:	11 f0       	breq	.+4      	; 0x93a <__stack+0x3b>
     936:	ce 50       	subi	r28, 0x0E	; 14
     938:	06 c0       	rjmp	.+12     	; 0x946 <__stack+0x47>
     93a:	c6 30       	cpi	r28, 0x06	; 6
     93c:	08 f4       	brcc	.+2      	; 0x940 <__stack+0x41>
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	91 11       	cpse	r25, r1
     942:	01 c0       	rjmp	.+2      	; 0x946 <__stack+0x47>
     944:	cf ef       	ldi	r28, 0xFF	; 255
     946:	f8 01       	movw	r30, r16
     948:	c4 83       	std	Z+4, r28	; 0x04
     94a:	23 2b       	or	r18, r19
     94c:	59 f0       	breq	.+22     	; 0x964 <__stack+0x65>
     94e:	6d 2f       	mov	r22, r29
     950:	c8 01       	movw	r24, r16
     952:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN6driver10atmega328p4Gpio12setDirectionENS1_9DirectionE>
     956:	e1 14       	cp	r14, r1
     958:	f1 04       	cpc	r15, r1
     95a:	21 f0       	breq	.+8      	; 0x964 <__stack+0x65>
     95c:	b7 01       	movw	r22, r14
     95e:	c8 01       	movw	r24, r16
     960:	0e 94 47 04 	call	0x88e	; 0x88e <_ZNK6driver10atmega328p4Gpio11setCallbackEPFvvE>
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	08 95       	ret

00000972 <_ZNK9container13CallbackArrayILj3EE17isCallbackDefinedEj>:
     972:	66 0f       	add	r22, r22
     974:	77 1f       	adc	r23, r23
     976:	86 0f       	add	r24, r22
     978:	97 1f       	adc	r25, r23
     97a:	fc 01       	movw	r30, r24
     97c:	20 81       	ld	r18, Z
     97e:	31 81       	ldd	r19, Z+1	; 0x01
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	23 2b       	or	r18, r19
     984:	09 f4       	brne	.+2      	; 0x988 <_ZNK9container13CallbackArrayILj3EE17isCallbackDefinedEj+0x16>
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	08 95       	ret

0000098a <_ZN9container13CallbackArrayILj3EE6invokeEj>:
     98a:	ef 92       	push	r14
     98c:	ff 92       	push	r15
     98e:	1f 93       	push	r17
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	7c 01       	movw	r14, r24
     996:	eb 01       	movw	r28, r22
     998:	0e 94 1a 04 	call	0x834	; 0x834 <_ZNK9container13CallbackArrayILj3EE12isIndexValidEj>
     99c:	18 2f       	mov	r17, r24
     99e:	88 23       	and	r24, r24
     9a0:	41 f0       	breq	.+16     	; 0x9b2 <_ZN9container13CallbackArrayILj3EE6invokeEj+0x28>
     9a2:	be 01       	movw	r22, r28
     9a4:	c7 01       	movw	r24, r14
     9a6:	0e 94 b9 04 	call	0x972	; 0x972 <_ZNK9container13CallbackArrayILj3EE17isCallbackDefinedEj>
     9aa:	88 23       	and	r24, r24
     9ac:	19 f0       	breq	.+6      	; 0x9b4 <_ZN9container13CallbackArrayILj3EE6invokeEj+0x2a>
     9ae:	10 e0       	ldi	r17, 0x00	; 0
     9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <_ZN9container13CallbackArrayILj3EE6invokeEj+0x2a>
     9b2:	11 e0       	ldi	r17, 0x01	; 1
     9b4:	11 11       	cpse	r17, r1
     9b6:	09 c0       	rjmp	.+18     	; 0x9ca <_ZN9container13CallbackArrayILj3EE6invokeEj+0x40>
     9b8:	cc 0f       	add	r28, r28
     9ba:	dd 1f       	adc	r29, r29
     9bc:	ce 0d       	add	r28, r14
     9be:	df 1d       	adc	r29, r15
     9c0:	e8 81       	ld	r30, Y
     9c2:	f9 81       	ldd	r31, Y+1	; 0x01
     9c4:	09 95       	icall
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	01 c0       	rjmp	.+2      	; 0x9cc <_ZN9container13CallbackArrayILj3EE6invokeEj+0x42>
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	ff 90       	pop	r15
     9d4:	ef 90       	pop	r14
     9d6:	08 95       	ret

000009d8 <__vector_3>:
     9d8:	1f 92       	push	r1
     9da:	0f 92       	push	r0
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	0f 92       	push	r0
     9e0:	11 24       	eor	r1, r1
     9e2:	2f 93       	push	r18
     9e4:	3f 93       	push	r19
     9e6:	4f 93       	push	r20
     9e8:	5f 93       	push	r21
     9ea:	6f 93       	push	r22
     9ec:	7f 93       	push	r23
     9ee:	8f 93       	push	r24
     9f0:	9f 93       	push	r25
     9f2:	af 93       	push	r26
     9f4:	bf 93       	push	r27
     9f6:	ef 93       	push	r30
     9f8:	ff 93       	push	r31
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	8a ec       	ldi	r24, 0xCA	; 202
     a00:	92 e0       	ldi	r25, 0x02	; 2
     a02:	0e 94 c5 04 	call	0x98a	; 0x98a <_ZN9container13CallbackArrayILj3EE6invokeEj>
     a06:	ff 91       	pop	r31
     a08:	ef 91       	pop	r30
     a0a:	bf 91       	pop	r27
     a0c:	af 91       	pop	r26
     a0e:	9f 91       	pop	r25
     a10:	8f 91       	pop	r24
     a12:	7f 91       	pop	r23
     a14:	6f 91       	pop	r22
     a16:	5f 91       	pop	r21
     a18:	4f 91       	pop	r20
     a1a:	3f 91       	pop	r19
     a1c:	2f 91       	pop	r18
     a1e:	0f 90       	pop	r0
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	0f 90       	pop	r0
     a24:	1f 90       	pop	r1
     a26:	18 95       	reti

00000a28 <__vector_4>:
     a28:	1f 92       	push	r1
     a2a:	0f 92       	push	r0
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	0f 92       	push	r0
     a30:	11 24       	eor	r1, r1
     a32:	2f 93       	push	r18
     a34:	3f 93       	push	r19
     a36:	4f 93       	push	r20
     a38:	5f 93       	push	r21
     a3a:	6f 93       	push	r22
     a3c:	7f 93       	push	r23
     a3e:	8f 93       	push	r24
     a40:	9f 93       	push	r25
     a42:	af 93       	push	r26
     a44:	bf 93       	push	r27
     a46:	ef 93       	push	r30
     a48:	ff 93       	push	r31
     a4a:	61 e0       	ldi	r22, 0x01	; 1
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	8a ec       	ldi	r24, 0xCA	; 202
     a50:	92 e0       	ldi	r25, 0x02	; 2
     a52:	0e 94 c5 04 	call	0x98a	; 0x98a <_ZN9container13CallbackArrayILj3EE6invokeEj>
     a56:	ff 91       	pop	r31
     a58:	ef 91       	pop	r30
     a5a:	bf 91       	pop	r27
     a5c:	af 91       	pop	r26
     a5e:	9f 91       	pop	r25
     a60:	8f 91       	pop	r24
     a62:	7f 91       	pop	r23
     a64:	6f 91       	pop	r22
     a66:	5f 91       	pop	r21
     a68:	4f 91       	pop	r20
     a6a:	3f 91       	pop	r19
     a6c:	2f 91       	pop	r18
     a6e:	0f 90       	pop	r0
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	0f 90       	pop	r0
     a74:	1f 90       	pop	r1
     a76:	18 95       	reti

00000a78 <__vector_5>:
     a78:	1f 92       	push	r1
     a7a:	0f 92       	push	r0
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	0f 92       	push	r0
     a80:	11 24       	eor	r1, r1
     a82:	2f 93       	push	r18
     a84:	3f 93       	push	r19
     a86:	4f 93       	push	r20
     a88:	5f 93       	push	r21
     a8a:	6f 93       	push	r22
     a8c:	7f 93       	push	r23
     a8e:	8f 93       	push	r24
     a90:	9f 93       	push	r25
     a92:	af 93       	push	r26
     a94:	bf 93       	push	r27
     a96:	ef 93       	push	r30
     a98:	ff 93       	push	r31
     a9a:	62 e0       	ldi	r22, 0x02	; 2
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	8a ec       	ldi	r24, 0xCA	; 202
     aa0:	92 e0       	ldi	r25, 0x02	; 2
     aa2:	0e 94 c5 04 	call	0x98a	; 0x98a <_ZN9container13CallbackArrayILj3EE6invokeEj>
     aa6:	ff 91       	pop	r31
     aa8:	ef 91       	pop	r30
     aaa:	bf 91       	pop	r27
     aac:	af 91       	pop	r26
     aae:	9f 91       	pop	r25
     ab0:	8f 91       	pop	r24
     ab2:	7f 91       	pop	r23
     ab4:	6f 91       	pop	r22
     ab6:	5f 91       	pop	r21
     ab8:	4f 91       	pop	r20
     aba:	3f 91       	pop	r19
     abc:	2f 91       	pop	r18
     abe:	0f 90       	pop	r0
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	0f 90       	pop	r0
     ac4:	1f 90       	pop	r1
     ac6:	18 95       	reti

00000ac8 <_Z41__static_initialization_and_destruction_0ii>:

// -----------------------------------------------------------------------------
ISR (PCINT2_vect) { invokeCallback(CallbackIndex::PortD); }

} // namespace atmega328p
} // namespace driver
     ac8:	01 97       	sbiw	r24, 0x01	; 1
     aca:	39 f4       	brne	.+14     	; 0xada <_Z41__static_initialization_and_destruction_0ii+0x12>
     acc:	6f 3f       	cpi	r22, 0xFF	; 255
     ace:	7f 4f       	sbci	r23, 0xFF	; 255
     ad0:	21 f4       	brne	.+8      	; 0xada <_Z41__static_initialization_and_destruction_0ii+0x12>
    /** Pin registry (1 = reserved, 0 = free). */
    static uint32_t pinRegistry;
};

/** Pointers to callbacks. */
container::CallbackArray<GpioParam::IoPortCount> GpioParam::callbacks{};
     ad2:	8a ec       	ldi	r24, 0xCA	; 202
     ad4:	92 e0       	ldi	r25, 0x02	; 2
     ad6:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN9container13CallbackArrayILj3EEC1Ev>
     ada:	08 95       	ret

00000adc <_GLOBAL__sub_I__ZN6driver10atmega328p4Gpio9myHwPortBE>:

// -----------------------------------------------------------------------------
ISR (PCINT2_vect) { invokeCallback(CallbackIndex::PortD); }

} // namespace atmega328p
} // namespace driver
     adc:	6f ef       	ldi	r22, 0xFF	; 255
     ade:	7f ef       	ldi	r23, 0xFF	; 255
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 64 05 	call	0xac8	; 0xac8 <_Z41__static_initialization_and_destruction_0ii>
     ae8:	08 95       	ret

00000aea <_GLOBAL__sub_D__ZN6driver10atmega328p4Gpio9myHwPortBE>:
     aea:	6f ef       	ldi	r22, 0xFF	; 255
     aec:	7f ef       	ldi	r23, 0xFF	; 255
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 64 05 	call	0xac8	; 0xac8 <_Z41__static_initialization_and_destruction_0ii>
     af6:	08 95       	ret

00000af8 <_ZN6driver10atmega328p12_GLOBAL__N_112transmitCharEc>:
    static constexpr char NewLine{'\n'};
};

// -----------------------------------------------------------------------------
void transmitChar(const char character) noexcept
{
     af8:	0f 93       	push	r16
     afa:	e8 2f       	mov	r30, r24
// -----------------------------------------------------------------------------
template <typename T>
constexpr bool read(const volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    return reg & (1ULL << bit);
     afc:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	50 e0       	ldi	r21, 0x00	; 0
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	05 e0       	ldi	r16, 0x05	; 5
     b10:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__lshrdi3>
     b14:	21 70       	andi	r18, 0x01	; 1
    // Wait until the previous character has been sent.
    while (!utils::read(UCSR0A, UDRE0));
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	40 e0       	ldi	r20, 0x00	; 0
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	a0 e0       	ldi	r26, 0x00	; 0
     b26:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__cmpdi2_s8>
     b2a:	41 f3       	breq	.-48     	; 0xafc <_ZN6driver10atmega328p12_GLOBAL__N_112transmitCharEc+0x4>

    // Put the new character in the transmission register.
    UDR0 = character;
     b2c:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
     b30:	0f 91       	pop	r16
     b32:	08 95       	ret

00000b34 <__tcf_0>:
{
public:
    /**
     * @brief Delete the serial device.
     */
    virtual ~SerialInterface() noexcept = default;
     b34:	8c ea       	ldi	r24, 0xAC	; 172
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <_ZZN6driver10atmega328p6Serial11getInstanceEvE10myInstance+0x1>
     b3c:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <_ZZN6driver10atmega328p6Serial11getInstanceEvE10myInstance>
     b40:	08 95       	ret

00000b42 <_ZNK6driver10atmega328p6Serial12baudRate_bpsEv>:
    // Return a reference to the singleton serial instance, cast to the corresponding interface.
    return myInstance; 
}

// -----------------------------------------------------------------------------
uint32_t Serial::baudRate_bps() const { return Param::BaudRate_bps; }
     b42:	60 e8       	ldi	r22, 0x80	; 128
     b44:	75 e2       	ldi	r23, 0x25	; 37
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	08 95       	ret

00000b4c <_ZNK6driver10atmega328p6Serial13isInitializedEv>:

// -----------------------------------------------------------------------------
bool Serial::isInitialized() const noexcept { return true; }
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	08 95       	ret

00000b50 <_ZNK6driver10atmega328p6Serial9isEnabledEv>:

// -----------------------------------------------------------------------------
bool Serial::isEnabled() const noexcept { return myEnabled; }
     b50:	fc 01       	movw	r30, r24
     b52:	82 81       	ldd	r24, Z+2	; 0x02
     b54:	08 95       	ret

00000b56 <_ZN6driver10atmega328p6Serial10setEnabledEb>:

// -----------------------------------------------------------------------------
void Serial::setEnabled(const bool enable) noexcept { myEnabled = enable; }
     b56:	fc 01       	movw	r30, r24
     b58:	62 83       	std	Z+2, r22	; 0x02
     b5a:	08 95       	ret

00000b5c <_ZNK6driver10atmega328p6Serial5printEPKc>:
    UDR0 = Param::CarriageReturn;
}

// -----------------------------------------------------------------------------
void Serial::print(const char* message) const noexcept
{
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	eb 01       	movw	r28, r22
    // Terminate the function if serial transmission isn't enabled.
    if (!myEnabled) { return; }
     b62:	fc 01       	movw	r30, r24
     b64:	82 81       	ldd	r24, Z+2	; 0x02
     b66:	88 23       	and	r24, r24
     b68:	69 f0       	breq	.+26     	; 0xb84 <_ZNK6driver10atmega328p6Serial5printEPKc+0x28>

    // Transmit each character of the string one by one.
    for (const char* it{message}; *it; ++it)
     b6a:	88 81       	ld	r24, Y
     b6c:	88 23       	and	r24, r24
     b6e:	51 f0       	breq	.+20     	; 0xb84 <_ZNK6driver10atmega328p6Serial5printEPKc+0x28>
    {
        transmitChar(*it);
     b70:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <_ZN6driver10atmega328p12_GLOBAL__N_112transmitCharEc>
        
        // Send new line characters instead of carriage returns.
        if (Param::CarriageReturn == *it) 
     b74:	88 81       	ld	r24, Y
     b76:	8d 30       	cpi	r24, 0x0D	; 13
     b78:	19 f4       	brne	.+6      	; 0xb80 <_ZNK6driver10atmega328p6Serial5printEPKc+0x24>
        { 
            transmitChar(Param::NewLine); 
     b7a:	8a e0       	ldi	r24, 0x0A	; 10
     b7c:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <_ZN6driver10atmega328p12_GLOBAL__N_112transmitCharEc>
{
    // Terminate the function if serial transmission isn't enabled.
    if (!myEnabled) { return; }

    // Transmit each character of the string one by one.
    for (const char* it{message}; *it; ++it)
     b80:	21 96       	adiw	r28, 0x01	; 1
     b82:	f3 cf       	rjmp	.-26     	; 0xb6a <_ZNK6driver10atmega328p6Serial5printEPKc+0xe>
        if (Param::CarriageReturn == *it) 
        { 
            transmitChar(Param::NewLine); 
        }
    }
}
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	08 95       	ret

00000b8a <_ZN6driver10atmega328p6SerialD1Ev>:
     b8a:	2c ea       	ldi	r18, 0xAC	; 172
     b8c:	31 e0       	ldi	r19, 0x01	; 1
     b8e:	fc 01       	movw	r30, r24
     b90:	31 83       	std	Z+1, r19	; 0x01
     b92:	20 83       	st	Z, r18
     b94:	08 95       	ret

00000b96 <_ZN6driver10atmega328p6SerialD0Ev>:
     b96:	2c ea       	ldi	r18, 0xAC	; 172
     b98:	31 e0       	ldi	r19, 0x01	; 1
     b9a:	fc 01       	movw	r30, r24
     b9c:	31 83       	std	Z+1, r19	; 0x01
     b9e:	20 83       	st	Z, r18
    Serial() noexcept;

    /**
     * @brief Delete the serial device.
     */
    ~Serial() noexcept override = default;
     ba0:	63 e0       	ldi	r22, 0x03	; 3
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <_ZdlPvj>
     ba8:	08 95       	ret

00000baa <_ZN6driver10atmega328p6SerialC1Ev>:
// -----------------------------------------------------------------------------
void Serial::setEnabled(const bool enable) noexcept { myEnabled = enable; }

// -----------------------------------------------------------------------------
Serial::Serial() noexcept 
    : myEnabled{false}
     baa:	2e eb       	ldi	r18, 0xBE	; 190
     bac:	31 e0       	ldi	r19, 0x01	; 1
     bae:	fc 01       	movw	r30, r24
     bb0:	31 83       	std	Z+1, r19	; 0x01
     bb2:	20 83       	st	Z, r18
     bb4:	12 82       	std	Z+2, r1	; 0x02
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
     bb6:	e1 ec       	ldi	r30, 0xC1	; 193
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	88 60       	ori	r24, 0x08	; 8
     bbe:	80 83       	st	Z, r24
     bc0:	e2 ec       	ldi	r30, 0xC2	; 194
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	82 60       	ori	r24, 0x02	; 2
     bc8:	80 83       	st	Z, r24
     bca:	80 81       	ld	r24, Z
     bcc:	84 60       	ori	r24, 0x04	; 4
     bce:	80 83       	st	Z, r24

    // Set the data size to eight bits per byte.
    utils::set(UCSR0C, UCSZ00, UCSZ01);

    // Set the baud rate to 9600 kbps.
    UBRR0 = baudRateValue;
     bd0:	87 e6       	ldi	r24, 0x67	; 103
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     bd8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

    // Send carriage return to align the first message left.
    UDR0 = Param::CarriageReturn;
     bdc:	8d e0       	ldi	r24, 0x0D	; 13
     bde:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     be2:	08 95       	ret

00000be4 <_ZN6driver10atmega328p6Serial11getInstanceEv>:

// -----------------------------------------------------------------------------
SerialInterface& Serial::getInstance() noexcept
{ 
    // Create and initialize the singleton serial instance (once only).
    static Serial myInstance{};
     be4:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <_ZGVZN6driver10atmega328p6Serial11getInstanceEvE10myInstance>
     be8:	81 11       	cpse	r24, r1
     bea:	12 c0       	rjmp	.+36     	; 0xc10 <_ZN6driver10atmega328p6Serial11getInstanceEv+0x2c>
     bec:	83 ed       	ldi	r24, 0xD3	; 211
     bee:	92 e0       	ldi	r25, 0x02	; 2
     bf0:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__cxa_guard_acquire>
     bf4:	89 2b       	or	r24, r25
     bf6:	61 f0       	breq	.+24     	; 0xc10 <_ZN6driver10atmega328p6Serial11getInstanceEv+0x2c>
     bf8:	80 ed       	ldi	r24, 0xD0	; 208
     bfa:	92 e0       	ldi	r25, 0x02	; 2
     bfc:	0e 94 d5 05 	call	0xbaa	; 0xbaa <_ZN6driver10atmega328p6SerialC1Ev>
     c00:	83 ed       	ldi	r24, 0xD3	; 211
     c02:	92 e0       	ldi	r25, 0x02	; 2
     c04:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__cxa_guard_release>
     c08:	8a e9       	ldi	r24, 0x9A	; 154
     c0a:	95 e0       	ldi	r25, 0x05	; 5
     c0c:	0e 94 77 00 	call	0xee	; 0xee <atexit>

    // Return a reference to the singleton serial instance, cast to the corresponding interface.
    return myInstance; 
}
     c10:	80 ed       	ldi	r24, 0xD0	; 208
     c12:	92 e0       	ldi	r25, 0x02	; 2
     c14:	08 95       	ret

00000c16 <_ZNK6driver10atmega328p5Timer13isInitializedEv>:
     c16:	21 e0       	ldi	r18, 0x01	; 1
     c18:	fc 01       	movw	r30, r24
     c1a:	82 81       	ldd	r24, Z+2	; 0x02
     c1c:	93 81       	ldd	r25, Z+3	; 0x03
     c1e:	89 2b       	or	r24, r25
     c20:	09 f4       	brne	.+2      	; 0xc24 <_ZNK6driver10atmega328p5Timer13isInitializedEv+0xe>
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	82 2f       	mov	r24, r18
     c26:	08 95       	ret

00000c28 <_ZNK6driver10atmega328p5Timer9isEnabledEv>:
     c28:	fc 01       	movw	r30, r24
     c2a:	80 85       	ldd	r24, Z+8	; 0x08
     c2c:	08 95       	ret

00000c2e <_ZN6driver10atmega328p5Timer11hasTimedOutEv>:
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	fc 01       	movw	r30, r24
     c34:	90 85       	ldd	r25, Z+8	; 0x08
     c36:	99 23       	and	r25, r25
     c38:	81 f0       	breq	.+32     	; 0xc5a <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x2c>
     c3a:	a2 81       	ldd	r26, Z+2	; 0x02
     c3c:	b3 81       	ldd	r27, Z+3	; 0x03
     c3e:	0d 91       	ld	r16, X+
     c40:	1d 91       	ld	r17, X+
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	44 81       	ldd	r20, Z+4	; 0x04
     c48:	55 81       	ldd	r21, Z+5	; 0x05
     c4a:	66 81       	ldd	r22, Z+6	; 0x06
     c4c:	77 81       	ldd	r23, Z+7	; 0x07
     c4e:	04 17       	cp	r16, r20
     c50:	15 07       	cpc	r17, r21
     c52:	26 07       	cpc	r18, r22
     c54:	37 07       	cpc	r19, r23
     c56:	18 f4       	brcc	.+6      	; 0xc5e <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x30>
     c58:	03 c0       	rjmp	.+6      	; 0xc60 <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x32>
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	01 c0       	rjmp	.+2      	; 0xc60 <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x32>
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	91 11       	cpse	r25, r1
     c62:	09 c0       	rjmp	.+18     	; 0xc76 <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x48>
     c64:	02 80       	ldd	r0, Z+2	; 0x02
     c66:	f3 81       	ldd	r31, Z+3	; 0x03
     c68:	e0 2d       	mov	r30, r0
     c6a:	10 82       	st	Z, r1
     c6c:	11 82       	std	Z+1, r1	; 0x01
     c6e:	12 82       	std	Z+2, r1	; 0x02
     c70:	13 82       	std	Z+3, r1	; 0x03
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	01 c0       	rjmp	.+2      	; 0xc78 <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x4a>
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	08 95       	ret

00000c7e <_ZNK6driver10atmega328p5Timer10timeout_msEv>:
     c7e:	fc 01       	movw	r30, r24
     c80:	64 81       	ldd	r22, Z+4	; 0x04
     c82:	75 81       	ldd	r23, Z+5	; 0x05
     c84:	86 81       	ldd	r24, Z+6	; 0x06
     c86:	97 81       	ldd	r25, Z+7	; 0x07
     c88:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__floatunsisf>
     c8c:	2f e6       	ldi	r18, 0x6F	; 111
     c8e:	32 e1       	ldi	r19, 0x12	; 18
     c90:	43 e0       	ldi	r20, 0x03	; 3
     c92:	5e e3       	ldi	r21, 0x3E	; 62
     c94:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__mulsf3>
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	5f e3       	ldi	r21, 0x3F	; 63
     ca0:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__addsf3>
     ca4:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__fixunssfsi>
     ca8:	08 95       	ret

00000caa <_ZN6driver10atmega328p5Timer4stopEv>:
     caa:	dc 01       	movw	r26, r24
     cac:	12 96       	adiw	r26, 0x02	; 2
     cae:	ed 91       	ld	r30, X+
     cb0:	fc 91       	ld	r31, X
     cb2:	13 97       	sbiw	r26, 0x03	; 3
     cb4:	04 80       	ldd	r0, Z+4	; 0x04
     cb6:	f5 81       	ldd	r31, Z+5	; 0x05
     cb8:	e0 2d       	mov	r30, r0
     cba:	10 82       	st	Z, r1
     cbc:	18 96       	adiw	r26, 0x08	; 8
     cbe:	1c 92       	st	X, r1
     cc0:	08 95       	ret

00000cc2 <_ZN6driver10atmega328p5Timer13setTimeout_msEm>:
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	ec 01       	movw	r28, r24
     cd0:	6a 01       	movw	r12, r20
     cd2:	7b 01       	movw	r14, r22
     cd4:	45 2b       	or	r20, r21
     cd6:	46 2b       	or	r20, r22
     cd8:	47 2b       	or	r20, r23
     cda:	11 f4       	brne	.+4      	; 0xce0 <_ZN6driver10atmega328p5Timer13setTimeout_msEm+0x1e>
     cdc:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZN6driver10atmega328p5Timer4stopEv>
     ce0:	c1 14       	cp	r12, r1
     ce2:	d1 04       	cpc	r13, r1
     ce4:	e1 04       	cpc	r14, r1
     ce6:	f1 04       	cpc	r15, r1
     ce8:	99 f0       	breq	.+38     	; 0xd10 <_ZN6driver10atmega328p5Timer13setTimeout_msEm+0x4e>
     cea:	c7 01       	movw	r24, r14
     cec:	b6 01       	movw	r22, r12
     cee:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__floatunsisf>
     cf2:	2f e6       	ldi	r18, 0x6F	; 111
     cf4:	32 e1       	ldi	r19, 0x12	; 18
     cf6:	43 e0       	ldi	r20, 0x03	; 3
     cf8:	5e e3       	ldi	r21, 0x3E	; 62
     cfa:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__divsf3>
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e0       	ldi	r20, 0x00	; 0
     d04:	5f e3       	ldi	r21, 0x3F	; 63
     d06:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__addsf3>
     d0a:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__fixunssfsi>
     d0e:	03 c0       	rjmp	.+6      	; 0xd16 <_ZN6driver10atmega328p5Timer13setTimeout_msEm+0x54>
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	cb 01       	movw	r24, r22
     d16:	6c 83       	std	Y+4, r22	; 0x04
     d18:	7d 83       	std	Y+5, r23	; 0x05
     d1a:	8e 83       	std	Y+6, r24	; 0x06
     d1c:	9f 83       	std	Y+7, r25	; 0x07
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	ff 90       	pop	r15
     d24:	ef 90       	pop	r14
     d26:	df 90       	pop	r13
     d28:	cf 90       	pop	r12
     d2a:	08 95       	ret

00000d2c <_ZN6driver10atmega328p5Timer5startEv>:
     d2c:	0f 93       	push	r16
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	fc 01       	movw	r30, r24
     d34:	44 81       	ldd	r20, Z+4	; 0x04
     d36:	55 81       	ldd	r21, Z+5	; 0x05
     d38:	66 81       	ldd	r22, Z+6	; 0x06
     d3a:	77 81       	ldd	r23, Z+7	; 0x07
     d3c:	45 2b       	or	r20, r21
     d3e:	46 2b       	or	r20, r22
     d40:	47 2b       	or	r20, r23
     d42:	c1 f0       	breq	.+48     	; 0xd74 <_ZN6driver10atmega328p5Timer5startEv+0x48>
     d44:	ec 01       	movw	r28, r24
     d46:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN5utils21globalInterruptEnableEv>
     d4a:	ea 81       	ldd	r30, Y+2	; 0x02
     d4c:	fb 81       	ldd	r31, Y+3	; 0x03
     d4e:	06 81       	ldd	r16, Z+6	; 0x06
     d50:	04 80       	ldd	r0, Z+4	; 0x04
     d52:	f5 81       	ldd	r31, Z+5	; 0x05
     d54:	e0 2d       	mov	r30, r0
     d56:	a0 81       	ld	r26, Z
     d58:	21 e0       	ldi	r18, 0x01	; 1
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	40 e0       	ldi	r20, 0x00	; 0
     d5e:	50 e0       	ldi	r21, 0x00	; 0
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__ashldi3>
     d6c:	2a 2b       	or	r18, r26
     d6e:	20 83       	st	Z, r18
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	88 87       	std	Y+8, r24	; 0x08
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	0f 91       	pop	r16
     d7a:	08 95       	ret

00000d7c <_ZN6driver10atmega328p5Timer6toggleEv>:
     d7c:	fc 01       	movw	r30, r24
     d7e:	20 85       	ldd	r18, Z+8	; 0x08
     d80:	22 23       	and	r18, r18
     d82:	19 f0       	breq	.+6      	; 0xd8a <_ZN6driver10atmega328p5Timer6toggleEv+0xe>
     d84:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZN6driver10atmega328p5Timer4stopEv>
     d88:	08 95       	ret
     d8a:	0e 94 96 06 	call	0xd2c	; 0xd2c <_ZN6driver10atmega328p5Timer5startEv>
     d8e:	08 95       	ret

00000d90 <_ZN6driver10atmega328p5Timer7restartEv>:
     d90:	dc 01       	movw	r26, r24
     d92:	12 96       	adiw	r26, 0x02	; 2
     d94:	ed 91       	ld	r30, X+
     d96:	fc 91       	ld	r31, X
     d98:	13 97       	sbiw	r26, 0x03	; 3
     d9a:	10 82       	st	Z, r1
     d9c:	11 82       	std	Z+1, r1	; 0x01
     d9e:	12 82       	std	Z+2, r1	; 0x02
     da0:	13 82       	std	Z+3, r1	; 0x03
     da2:	0e 94 96 06 	call	0xd2c	; 0xd2c <_ZN6driver10atmega328p5Timer5startEv>
     da6:	08 95       	ret

00000da8 <_ZN6driver10atmega328p5Timer9incrementEv>:
     da8:	fc 01       	movw	r30, r24
     daa:	80 85       	ldd	r24, Z+8	; 0x08
     dac:	88 23       	and	r24, r24
     dae:	79 f0       	breq	.+30     	; 0xdce <_ZN6driver10atmega328p5Timer9incrementEv+0x26>
     db0:	02 80       	ldd	r0, Z+2	; 0x02
     db2:	f3 81       	ldd	r31, Z+3	; 0x03
     db4:	e0 2d       	mov	r30, r0
     db6:	40 81       	ld	r20, Z
     db8:	51 81       	ldd	r21, Z+1	; 0x01
     dba:	62 81       	ldd	r22, Z+2	; 0x02
     dbc:	73 81       	ldd	r23, Z+3	; 0x03
     dbe:	4f 5f       	subi	r20, 0xFF	; 255
     dc0:	5f 4f       	sbci	r21, 0xFF	; 255
     dc2:	6f 4f       	sbci	r22, 0xFF	; 255
     dc4:	7f 4f       	sbci	r23, 0xFF	; 255
     dc6:	40 83       	st	Z, r20
     dc8:	51 83       	std	Z+1, r21	; 0x01
     dca:	62 83       	std	Z+2, r22	; 0x02
     dcc:	73 83       	std	Z+3, r23	; 0x03
     dce:	08 95       	ret

00000dd0 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_>:
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	d9 f0       	breq	.+54     	; 0xe0a <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x3a>
     dd4:	dc 01       	movw	r26, r24
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	ed 91       	ld	r30, X+
     dda:	fc 91       	ld	r31, X
     ddc:	15 97       	sbiw	r26, 0x05	; 5
     dde:	10 82       	st	Z, r1
     de0:	17 96       	adiw	r26, 0x07	; 7
     de2:	2c 91       	ld	r18, X
     de4:	21 30       	cpi	r18, 0x01	; 1
     de6:	31 f0       	breq	.+12     	; 0xdf4 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x24>
     de8:	18 f0       	brcs	.+6      	; 0xdf0 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x20>
     dea:	22 30       	cpi	r18, 0x02	; 2
     dec:	51 f0       	breq	.+20     	; 0xe02 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x32>
     dee:	0b c0       	rjmp	.+22     	; 0xe06 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x36>
     df0:	15 bc       	out	0x25, r1	; 37
     df2:	09 c0       	rjmp	.+18     	; 0xe06 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x36>
     df4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     df8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     dfc:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x36>
     e02:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     e06:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <free>
     e0a:	08 95       	ret

00000e0c <_ZN6driver10atmega328p5Timer8Hardware4initEh>:
     e0c:	cf 93       	push	r28
     e0e:	c8 2f       	mov	r28, r24
     e10:	88 e0       	ldi	r24, 0x08	; 8
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <malloc>
     e18:	00 97       	sbiw	r24, 0x00	; 0
     e1a:	a9 f1       	breq	.+106    	; 0xe86 <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x7a>
     e1c:	c1 30       	cpi	r28, 0x01	; 1
     e1e:	69 f0       	breq	.+26     	; 0xe3a <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x2e>
     e20:	18 f0       	brcs	.+6      	; 0xe28 <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x1c>
     e22:	c2 30       	cpi	r28, 0x02	; 2
     e24:	d9 f0       	breq	.+54     	; 0xe5c <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x50>
     e26:	24 c0       	rjmp	.+72     	; 0xe70 <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x64>
     e28:	2e e6       	ldi	r18, 0x6E	; 110
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	fc 01       	movw	r30, r24
     e2e:	35 83       	std	Z+5, r19	; 0x05
     e30:	24 83       	std	Z+4, r18	; 0x04
     e32:	16 82       	std	Z+6, r1	; 0x06
     e34:	22 e0       	ldi	r18, 0x02	; 2
     e36:	25 bd       	out	0x25, r18	; 37
     e38:	20 c0       	rjmp	.+64     	; 0xe7a <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x6e>
     e3a:	2f e6       	ldi	r18, 0x6F	; 111
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	fc 01       	movw	r30, r24
     e40:	35 83       	std	Z+5, r19	; 0x05
     e42:	24 83       	std	Z+4, r18	; 0x04
     e44:	21 e0       	ldi	r18, 0x01	; 1
     e46:	26 83       	std	Z+6, r18	; 0x06
     e48:	2a e0       	ldi	r18, 0x0A	; 10
     e4a:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	31 e0       	ldi	r19, 0x01	; 1
     e52:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     e56:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     e5a:	0f c0       	rjmp	.+30     	; 0xe7a <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x6e>
     e5c:	20 e7       	ldi	r18, 0x70	; 112
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	fc 01       	movw	r30, r24
     e62:	35 83       	std	Z+5, r19	; 0x05
     e64:	24 83       	std	Z+4, r18	; 0x04
     e66:	16 82       	std	Z+6, r1	; 0x06
     e68:	22 e0       	ldi	r18, 0x02	; 2
     e6a:	20 93 b1 00 	sts	0x00B1, r18	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     e6e:	05 c0       	rjmp	.+10     	; 0xe7a <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x6e>
     e70:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <free>
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	06 c0       	rjmp	.+12     	; 0xe86 <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x7a>
     e7a:	fc 01       	movw	r30, r24
     e7c:	10 82       	st	Z, r1
     e7e:	11 82       	std	Z+1, r1	; 0x01
     e80:	12 82       	std	Z+2, r1	; 0x02
     e82:	13 82       	std	Z+3, r1	; 0x03
     e84:	c7 83       	std	Z+7, r28	; 0x07
     e86:	cf 91       	pop	r28
     e88:	08 95       	ret

00000e8a <_ZN6driver10atmega328p5Timer8Hardware7reserveEv>:
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	83 30       	cpi	r24, 0x03	; 3
     e8e:	78 f4       	brcc	.+30     	; 0xeae <_ZN6driver10atmega328p5Timer8Hardware7reserveEv+0x24>
     e90:	e8 2f       	mov	r30, r24
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	ee 0f       	add	r30, r30
     e96:	ff 1f       	adc	r31, r31
     e98:	ef 51       	subi	r30, 0x1F	; 31
     e9a:	fd 4f       	sbci	r31, 0xFD	; 253
     e9c:	20 81       	ld	r18, Z
     e9e:	31 81       	ldd	r19, Z+1	; 0x01
     ea0:	23 2b       	or	r18, r19
     ea2:	19 f4       	brne	.+6      	; 0xeaa <_ZN6driver10atmega328p5Timer8Hardware7reserveEv+0x20>
     ea4:	0e 94 06 07 	call	0xe0c	; 0xe0c <_ZN6driver10atmega328p5Timer8Hardware4initEh>
     ea8:	08 95       	ret
     eaa:	8f 5f       	subi	r24, 0xFF	; 255
     eac:	ef cf       	rjmp	.-34     	; 0xe8c <_ZN6driver10atmega328p5Timer8Hardware7reserveEv+0x2>
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	08 95       	ret

00000eb4 <_ZNK6driver10atmega328p5Timer11addCallbackEPFvvE>:
     eb4:	dc 01       	movw	r26, r24
     eb6:	12 96       	adiw	r26, 0x02	; 2
     eb8:	ed 91       	ld	r30, X+
     eba:	fc 91       	ld	r31, X
     ebc:	13 97       	sbiw	r26, 0x03	; 3
     ebe:	47 81       	ldd	r20, Z+7	; 0x07
     ec0:	50 e0       	ldi	r21, 0x00	; 0
     ec2:	8b ed       	ldi	r24, 0xDB	; 219
     ec4:	92 e0       	ldi	r25, 0x02	; 2
     ec6:	0e 94 20 04 	call	0x840	; 0x840 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj>
     eca:	08 95       	ret

00000ecc <_ZN6driver10atmega328p5TimerC1EmPFvvEb>:
     ecc:	8f 92       	push	r8
     ece:	9f 92       	push	r9
     ed0:	af 92       	push	r10
     ed2:	bf 92       	push	r11
     ed4:	cf 92       	push	r12
     ed6:	df 92       	push	r13
     ed8:	ef 92       	push	r14
     eda:	ff 92       	push	r15
     edc:	0f 93       	push	r16
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	ec 01       	movw	r28, r24
     ee4:	4a 01       	movw	r8, r20
     ee6:	5b 01       	movw	r10, r22
     ee8:	79 01       	movw	r14, r18
     eea:	8a ee       	ldi	r24, 0xEA	; 234
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	99 83       	std	Y+1, r25	; 0x01
     ef0:	88 83       	st	Y, r24
     ef2:	0e 94 45 07 	call	0xe8a	; 0xe8a <_ZN6driver10atmega328p5Timer8Hardware7reserveEv>
     ef6:	6c 01       	movw	r12, r24
     ef8:	9b 83       	std	Y+3, r25	; 0x03
     efa:	8a 83       	std	Y+2, r24	; 0x02
     efc:	81 14       	cp	r8, r1
     efe:	91 04       	cpc	r9, r1
     f00:	a1 04       	cpc	r10, r1
     f02:	b1 04       	cpc	r11, r1
     f04:	99 f0       	breq	.+38     	; 0xf2c <_ZN6driver10atmega328p5TimerC1EmPFvvEb+0x60>
     f06:	c5 01       	movw	r24, r10
     f08:	b4 01       	movw	r22, r8
     f0a:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__floatunsisf>
     f0e:	2f e6       	ldi	r18, 0x6F	; 111
     f10:	32 e1       	ldi	r19, 0x12	; 18
     f12:	43 e0       	ldi	r20, 0x03	; 3
     f14:	5e e3       	ldi	r21, 0x3E	; 62
     f16:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__divsf3>
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 e0       	ldi	r20, 0x00	; 0
     f20:	5f e3       	ldi	r21, 0x3F	; 63
     f22:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__addsf3>
     f26:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__fixunssfsi>
     f2a:	03 c0       	rjmp	.+6      	; 0xf32 <_ZN6driver10atmega328p5TimerC1EmPFvvEb+0x66>
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	cb 01       	movw	r24, r22
     f32:	6c 83       	std	Y+4, r22	; 0x04
     f34:	7d 83       	std	Y+5, r23	; 0x05
     f36:	8e 83       	std	Y+6, r24	; 0x06
     f38:	9f 83       	std	Y+7, r25	; 0x07
     f3a:	18 86       	std	Y+8, r1	; 0x08
     f3c:	c1 14       	cp	r12, r1
     f3e:	d1 04       	cpc	r13, r1
     f40:	99 f0       	breq	.+38     	; 0xf68 <_ZN6driver10atmega328p5TimerC1EmPFvvEb+0x9c>
     f42:	d6 01       	movw	r26, r12
     f44:	17 96       	adiw	r26, 0x07	; 7
     f46:	ec 91       	ld	r30, X
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	ee 0f       	add	r30, r30
     f4c:	ff 1f       	adc	r31, r31
     f4e:	ef 51       	subi	r30, 0x1F	; 31
     f50:	fd 4f       	sbci	r31, 0xFD	; 253
     f52:	d1 83       	std	Z+1, r29	; 0x01
     f54:	c0 83       	st	Z, r28
     f56:	b7 01       	movw	r22, r14
     f58:	ce 01       	movw	r24, r28
     f5a:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_ZNK6driver10atmega328p5Timer11addCallbackEPFvvE>
     f5e:	00 23       	and	r16, r16
     f60:	19 f0       	breq	.+6      	; 0xf68 <_ZN6driver10atmega328p5TimerC1EmPFvvEb+0x9c>
     f62:	ce 01       	movw	r24, r28
     f64:	0e 94 96 06 	call	0xd2c	; 0xd2c <_ZN6driver10atmega328p5Timer5startEv>
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	0f 91       	pop	r16
     f6e:	ff 90       	pop	r15
     f70:	ef 90       	pop	r14
     f72:	df 90       	pop	r13
     f74:	cf 90       	pop	r12
     f76:	bf 90       	pop	r11
     f78:	af 90       	pop	r10
     f7a:	9f 90       	pop	r9
     f7c:	8f 90       	pop	r8
     f7e:	08 95       	ret

00000f80 <_ZN9container13CallbackArrayILj3EE6removeEj>:
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	8c 01       	movw	r16, r24
     f8a:	eb 01       	movw	r28, r22
     f8c:	0e 94 1a 04 	call	0x834	; 0x834 <_ZNK9container13CallbackArrayILj3EE12isIndexValidEj>
     f90:	88 23       	and	r24, r24
     f92:	31 f0       	breq	.+12     	; 0xfa0 <_ZN9container13CallbackArrayILj3EE6removeEj+0x20>
     f94:	cc 0f       	add	r28, r28
     f96:	dd 1f       	adc	r29, r29
     f98:	c0 0f       	add	r28, r16
     f9a:	d1 1f       	adc	r29, r17
     f9c:	19 82       	std	Y+1, r1	; 0x01
     f9e:	18 82       	st	Y, r1
     fa0:	df 91       	pop	r29
     fa2:	cf 91       	pop	r28
     fa4:	1f 91       	pop	r17
     fa6:	0f 91       	pop	r16
     fa8:	08 95       	ret

00000faa <_ZNK6driver10atmega328p5Timer14removeCallbackEv>:
     faa:	dc 01       	movw	r26, r24
     fac:	12 96       	adiw	r26, 0x02	; 2
     fae:	ed 91       	ld	r30, X+
     fb0:	fc 91       	ld	r31, X
     fb2:	13 97       	sbiw	r26, 0x03	; 3
     fb4:	67 81       	ldd	r22, Z+7	; 0x07
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	8b ed       	ldi	r24, 0xDB	; 219
     fba:	92 e0       	ldi	r25, 0x02	; 2
     fbc:	0e 94 c0 07 	call	0xf80	; 0xf80 <_ZN9container13CallbackArrayILj3EE6removeEj>
     fc0:	08 95       	ret

00000fc2 <_ZN6driver10atmega328p5TimerD1Ev>:
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	ec 01       	movw	r28, r24
     fc8:	8a ee       	ldi	r24, 0xEA	; 234
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	99 83       	std	Y+1, r25	; 0x01
     fce:	88 83       	st	Y, r24
     fd0:	ce 01       	movw	r24, r28
     fd2:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZNK6driver10atmega328p5Timer14removeCallbackEv>
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	9b 81       	ldd	r25, Y+3	; 0x03
     fda:	dc 01       	movw	r26, r24
     fdc:	17 96       	adiw	r26, 0x07	; 7
     fde:	ec 91       	ld	r30, X
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	ee 0f       	add	r30, r30
     fe4:	ff 1f       	adc	r31, r31
     fe6:	ef 51       	subi	r30, 0x1F	; 31
     fe8:	fd 4f       	sbci	r31, 0xFD	; 253
     fea:	11 82       	std	Z+1, r1	; 0x01
     fec:	10 82       	st	Z, r1
     fee:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_>
     ff2:	80 ed       	ldi	r24, 0xD0	; 208
     ff4:	91 e0       	ldi	r25, 0x01	; 1
     ff6:	99 83       	std	Y+1, r25	; 0x01
     ff8:	88 83       	st	Y, r24
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	08 95       	ret

00001000 <_ZN6driver10atmega328p5TimerD0Ev>:
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	ec 01       	movw	r28, r24
    1006:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <_ZN6driver10atmega328p5TimerD1Ev>
    100a:	69 e0       	ldi	r22, 0x09	; 9
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	ce 01       	movw	r24, r28
    1010:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <_ZdlPvj>
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	08 95       	ret

0000101a <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh>:
    101a:	0f 93       	push	r16
    101c:	1f 93       	push	r17
    101e:	cf 93       	push	r28
    1020:	83 30       	cpi	r24, 0x03	; 3
    1022:	d0 f4       	brcc	.+52     	; 0x1058 <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh+0x3e>
    1024:	e8 2f       	mov	r30, r24
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	ee 0f       	add	r30, r30
    102a:	ff 1f       	adc	r31, r31
    102c:	ef 51       	subi	r30, 0x1F	; 31
    102e:	fd 4f       	sbci	r31, 0xFD	; 253
    1030:	00 81       	ld	r16, Z
    1032:	11 81       	ldd	r17, Z+1	; 0x01
    1034:	01 15       	cp	r16, r1
    1036:	11 05       	cpc	r17, r1
    1038:	79 f0       	breq	.+30     	; 0x1058 <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh+0x3e>
    103a:	c8 2f       	mov	r28, r24
    103c:	c8 01       	movw	r24, r16
    103e:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN6driver10atmega328p5Timer9incrementEv>
    1042:	c8 01       	movw	r24, r16
    1044:	0e 94 17 06 	call	0xc2e	; 0xc2e <_ZN6driver10atmega328p5Timer11hasTimedOutEv>
    1048:	88 23       	and	r24, r24
    104a:	31 f0       	breq	.+12     	; 0x1058 <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh+0x3e>
    104c:	6c 2f       	mov	r22, r28
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	8b ed       	ldi	r24, 0xDB	; 219
    1052:	92 e0       	ldi	r25, 0x02	; 2
    1054:	0e 94 c5 04 	call	0x98a	; 0x98a <_ZN9container13CallbackArrayILj3EE6invokeEj>
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	08 95       	ret

00001060 <__vector_16>:
    1060:	1f 92       	push	r1
    1062:	0f 92       	push	r0
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	0f 92       	push	r0
    1068:	11 24       	eor	r1, r1
    106a:	2f 93       	push	r18
    106c:	3f 93       	push	r19
    106e:	4f 93       	push	r20
    1070:	5f 93       	push	r21
    1072:	6f 93       	push	r22
    1074:	7f 93       	push	r23
    1076:	8f 93       	push	r24
    1078:	9f 93       	push	r25
    107a:	af 93       	push	r26
    107c:	bf 93       	push	r27
    107e:	ef 93       	push	r30
    1080:	ff 93       	push	r31
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	0e 94 0d 08 	call	0x101a	; 0x101a <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh>
    1088:	ff 91       	pop	r31
    108a:	ef 91       	pop	r30
    108c:	bf 91       	pop	r27
    108e:	af 91       	pop	r26
    1090:	9f 91       	pop	r25
    1092:	8f 91       	pop	r24
    1094:	7f 91       	pop	r23
    1096:	6f 91       	pop	r22
    1098:	5f 91       	pop	r21
    109a:	4f 91       	pop	r20
    109c:	3f 91       	pop	r19
    109e:	2f 91       	pop	r18
    10a0:	0f 90       	pop	r0
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	0f 90       	pop	r0
    10a6:	1f 90       	pop	r1
    10a8:	18 95       	reti

000010aa <__vector_11>:
    10aa:	1f 92       	push	r1
    10ac:	0f 92       	push	r0
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	0f 92       	push	r0
    10b2:	11 24       	eor	r1, r1
    10b4:	2f 93       	push	r18
    10b6:	3f 93       	push	r19
    10b8:	4f 93       	push	r20
    10ba:	5f 93       	push	r21
    10bc:	6f 93       	push	r22
    10be:	7f 93       	push	r23
    10c0:	8f 93       	push	r24
    10c2:	9f 93       	push	r25
    10c4:	af 93       	push	r26
    10c6:	bf 93       	push	r27
    10c8:	ef 93       	push	r30
    10ca:	ff 93       	push	r31
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	0e 94 0d 08 	call	0x101a	; 0x101a <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh>
    10d2:	ff 91       	pop	r31
    10d4:	ef 91       	pop	r30
    10d6:	bf 91       	pop	r27
    10d8:	af 91       	pop	r26
    10da:	9f 91       	pop	r25
    10dc:	8f 91       	pop	r24
    10de:	7f 91       	pop	r23
    10e0:	6f 91       	pop	r22
    10e2:	5f 91       	pop	r21
    10e4:	4f 91       	pop	r20
    10e6:	3f 91       	pop	r19
    10e8:	2f 91       	pop	r18
    10ea:	0f 90       	pop	r0
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	0f 90       	pop	r0
    10f0:	1f 90       	pop	r1
    10f2:	18 95       	reti

000010f4 <__vector_9>:
    10f4:	1f 92       	push	r1
    10f6:	0f 92       	push	r0
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	0f 92       	push	r0
    10fc:	11 24       	eor	r1, r1
    10fe:	2f 93       	push	r18
    1100:	3f 93       	push	r19
    1102:	4f 93       	push	r20
    1104:	5f 93       	push	r21
    1106:	6f 93       	push	r22
    1108:	7f 93       	push	r23
    110a:	8f 93       	push	r24
    110c:	9f 93       	push	r25
    110e:	af 93       	push	r26
    1110:	bf 93       	push	r27
    1112:	ef 93       	push	r30
    1114:	ff 93       	push	r31
    1116:	82 e0       	ldi	r24, 0x02	; 2
    1118:	0e 94 0d 08 	call	0x101a	; 0x101a <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh>
    111c:	ff 91       	pop	r31
    111e:	ef 91       	pop	r30
    1120:	bf 91       	pop	r27
    1122:	af 91       	pop	r26
    1124:	9f 91       	pop	r25
    1126:	8f 91       	pop	r24
    1128:	7f 91       	pop	r23
    112a:	6f 91       	pop	r22
    112c:	5f 91       	pop	r21
    112e:	4f 91       	pop	r20
    1130:	3f 91       	pop	r19
    1132:	2f 91       	pop	r18
    1134:	0f 90       	pop	r0
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	0f 90       	pop	r0
    113a:	1f 90       	pop	r1
    113c:	18 95       	reti

0000113e <_Z41__static_initialization_and_destruction_0ii>:

// -----------------------------------------------------------------------------
ISR (TIMER2_OVF_vect) { invokeCallback(TimerIndex::timer2); }

} // namespace atmega328p
} // namespace driver
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	39 f4       	brne	.+14     	; 0x1150 <_Z41__static_initialization_and_destruction_0ii+0x12>
    1142:	6f 3f       	cpi	r22, 0xFF	; 255
    1144:	7f 4f       	sbci	r23, 0xFF	; 255
    1146:	21 f4       	brne	.+8      	; 0x1150 <_Z41__static_initialization_and_destruction_0ii+0x12>

/** Array holding pointers to TimerParam::timers. */
Timer* TimerParam::TimerParam::timers[TimerParam::circuitCount]{};  

/** Array holding pointers to callbacks. */
CallbackArray<TimerParam::circuitCount> TimerParam::callbacks{};
    1148:	8b ed       	ldi	r24, 0xDB	; 219
    114a:	92 e0       	ldi	r25, 0x02	; 2
    114c:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN9container13CallbackArrayILj3EEC1Ev>
    1150:	08 95       	ret

00001152 <_GLOBAL__sub_I__ZN6driver10atmega328p5TimerC2EmPFvvEb>:

// -----------------------------------------------------------------------------
ISR (TIMER2_OVF_vect) { invokeCallback(TimerIndex::timer2); }

} // namespace atmega328p
} // namespace driver
    1152:	6f ef       	ldi	r22, 0xFF	; 255
    1154:	7f ef       	ldi	r23, 0xFF	; 255
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 9f 08 	call	0x113e	; 0x113e <_Z41__static_initialization_and_destruction_0ii>
    115e:	08 95       	ret

00001160 <_GLOBAL__sub_D__ZN6driver10atmega328p5TimerC2EmPFvvEb>:
    1160:	6f ef       	ldi	r22, 0xFF	; 255
    1162:	7f ef       	ldi	r23, 0xFF	; 255
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 9f 08 	call	0x113e	; 0x113e <_Z41__static_initialization_and_destruction_0ii>
    116c:	08 95       	ret

0000116e <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE>:
}
    
// -----------------------------------------------------------------------------
uint8_t timeoutValue(const Watchdog::Timeout timeout) noexcept
{
    switch (timeout)
    116e:	81 15       	cp	r24, r1
    1170:	21 e0       	ldi	r18, 0x01	; 1
    1172:	92 07       	cpc	r25, r18
    1174:	51 f1       	breq	.+84     	; 0x11ca <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x5c>
    1176:	70 f4       	brcc	.+28     	; 0x1194 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x26>
    1178:	80 32       	cpi	r24, 0x20	; 32
    117a:	91 05       	cpc	r25, r1
    117c:	a1 f1       	breq	.+104    	; 0x11e6 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x78>
    117e:	18 f4       	brcc	.+6      	; 0x1186 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x18>
    1180:	40 97       	sbiw	r24, 0x10	; 16
    1182:	e9 f0       	breq	.+58     	; 0x11be <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x50>
    1184:	2e c0       	rjmp	.+92     	; 0x11e2 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x74>
    1186:	80 34       	cpi	r24, 0x40	; 64
    1188:	91 05       	cpc	r25, r1
    118a:	d9 f0       	breq	.+54     	; 0x11c2 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x54>
    118c:	80 38       	cpi	r24, 0x80	; 128
    118e:	91 05       	cpc	r25, r1
    1190:	d1 f0       	breq	.+52     	; 0x11c6 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x58>
    1192:	27 c0       	rjmp	.+78     	; 0x11e2 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x74>
    1194:	81 15       	cp	r24, r1
    1196:	28 e0       	ldi	r18, 0x08	; 8
    1198:	92 07       	cpc	r25, r18
    119a:	e9 f0       	breq	.+58     	; 0x11d6 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x68>
    119c:	40 f4       	brcc	.+16     	; 0x11ae <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x40>
    119e:	81 15       	cp	r24, r1
    11a0:	22 e0       	ldi	r18, 0x02	; 2
    11a2:	92 07       	cpc	r25, r18
    11a4:	a1 f0       	breq	.+40     	; 0x11ce <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x60>
    11a6:	81 15       	cp	r24, r1
    11a8:	94 40       	sbci	r25, 0x04	; 4
    11aa:	99 f0       	breq	.+38     	; 0x11d2 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x64>
    11ac:	1a c0       	rjmp	.+52     	; 0x11e2 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x74>
    11ae:	81 15       	cp	r24, r1
    11b0:	20 e1       	ldi	r18, 0x10	; 16
    11b2:	92 07       	cpc	r25, r18
    11b4:	91 f0       	breq	.+36     	; 0x11da <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x6c>
    11b6:	81 15       	cp	r24, r1
    11b8:	90 42       	sbci	r25, 0x20	; 32
    11ba:	89 f0       	breq	.+34     	; 0x11de <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x70>
    11bc:	12 c0       	rjmp	.+36     	; 0x11e2 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x74>
    {
        case Watchdog::Timeout::Duration16ms:
            return 0U;
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	08 95       	ret
        case Watchdog::Timeout::Duration32ms:
            return (1U << WDP0);
        case Watchdog::Timeout::Duration64ms:
            return (1U << WDP1);
    11c2:	82 e0       	ldi	r24, 0x02	; 2
    11c4:	08 95       	ret
        case Watchdog::Timeout::Duration128ms:
            return (1U << WDP1) | (1U << WDP0);
    11c6:	83 e0       	ldi	r24, 0x03	; 3
    11c8:	08 95       	ret
        case Watchdog::Timeout::Duration256ms:
            return (1U << WDP2);
    11ca:	84 e0       	ldi	r24, 0x04	; 4
    11cc:	08 95       	ret
        case Watchdog::Timeout::Duration512ms:
            return (1U << WDP2) | (1U << WDP0);
    11ce:	85 e0       	ldi	r24, 0x05	; 5
    11d0:	08 95       	ret
        case Watchdog::Timeout::Duration1024ms:
            return (1U << WDP2) | (1U << WDP1);
    11d2:	86 e0       	ldi	r24, 0x06	; 6
    11d4:	08 95       	ret
        case Watchdog::Timeout::Duration2048ms:
            return (1U << WDP2) | (1U << WDP1) | (1U << WDP0);
    11d6:	87 e0       	ldi	r24, 0x07	; 7
    11d8:	08 95       	ret
        case Watchdog::Timeout::Duration4096ms:
            return (1U << WDP3);
    11da:	80 e2       	ldi	r24, 0x20	; 32
    11dc:	08 95       	ret
        case Watchdog::Timeout::Duration8192ms:
            return (1U << WDP3) | (1U << WDP0);
    11de:	81 e2       	ldi	r24, 0x21	; 33
    11e0:	08 95       	ret
        default:
            return 0xFFU;
    11e2:	8f ef       	ldi	r24, 0xFF	; 255
    11e4:	08 95       	ret
    switch (timeout)
    {
        case Watchdog::Timeout::Duration16ms:
            return 0U;
        case Watchdog::Timeout::Duration32ms:
            return (1U << WDP0);
    11e6:	81 e0       	ldi	r24, 0x01	; 1
        case Watchdog::Timeout::Duration8192ms:
            return (1U << WDP3) | (1U << WDP0);
        default:
            return 0xFFU;
    }
}
    11e8:	08 95       	ret

000011ea <__tcf_0>:
{
public:
    /**
     * @brief Delete the watchdog timer.
     */
    virtual ~WatchdogInterface() noexcept = default;
    11ea:	84 e0       	ldi	r24, 0x04	; 4
    11ec:	92 e0       	ldi	r25, 0x02	; 2
    11ee:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <_ZZN6driver10atmega328p8Watchdog11getInstanceEvE10myInstance+0x1>
    11f2:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <_ZZN6driver10atmega328p8Watchdog11getInstanceEvE10myInstance>
    11f6:	08 95       	ret

000011f8 <_ZNK6driver10atmega328p8Watchdog13isInitializedEv>:
    // Return a reference to the singleton watchdog instance, cast to the corresponding interface.
    return myInstance; 
}

// -----------------------------------------------------------------------------
bool Watchdog::isInitialized() const noexcept { return true; }
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	08 95       	ret

000011fc <_ZNK6driver10atmega328p8Watchdog9isEnabledEv>:

// -----------------------------------------------------------------------------
bool Watchdog::isEnabled() const noexcept { return myEnabled; }
    11fc:	fc 01       	movw	r30, r24
    11fe:	84 81       	ldd	r24, Z+4	; 0x04
    1200:	08 95       	ret

00001202 <_ZNK6driver10atmega328p8Watchdog9timeoutMsEv>:
    // Re-enable interrupts once the write sequence is complete.
    utils::globalInterruptEnable();
}

// -----------------------------------------------------------------------------
uint16_t Watchdog::timeoutMs() const noexcept { return static_cast<uint16_t>(myTimeout); }
    1202:	fc 01       	movw	r30, r24
    1204:	82 81       	ldd	r24, Z+2	; 0x02
    1206:	93 81       	ldd	r25, Z+3	; 0x03
    1208:	08 95       	ret

0000120a <_ZN6driver10atmega328p8WatchdogD1Ev>:
    120a:	24 e0       	ldi	r18, 0x04	; 4
    120c:	32 e0       	ldi	r19, 0x02	; 2
    120e:	fc 01       	movw	r30, r24
    1210:	31 83       	std	Z+1, r19	; 0x01
    1212:	20 83       	st	Z, r18
    1214:	08 95       	ret

00001216 <_ZN6driver10atmega328p8WatchdogD0Ev>:
    1216:	24 e0       	ldi	r18, 0x04	; 4
    1218:	32 e0       	ldi	r19, 0x02	; 2
    121a:	fc 01       	movw	r30, r24
    121c:	31 83       	std	Z+1, r19	; 0x01
    121e:	20 83       	st	Z, r18
    Watchdog& operator=(const Watchdog&) = delete; // No copy assignment.
    Watchdog& operator=(Watchdog&&)      = delete; // No move assignment.

private:
    Watchdog() noexcept;
    ~Watchdog() noexcept override = default;
    1220:	65 e0       	ldi	r22, 0x05	; 5
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <_ZdlPvj>
    1228:	08 95       	ret

0000122a <_ZN6driver10atmega328p8Watchdog5resetEv>:

// -----------------------------------------------------------------------------
void Watchdog::reset() noexcept 
{ 
    // Disable interrupts during the reset process.
    utils::globalInterruptDisable();
    122a:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <_ZN5utils22globalInterruptDisableEv>

    // Reset the watchdog and clear the corresponding reset flag.
    asm("WDR");
    122e:	a8 95       	wdr
// -----------------------------------------------------------------------------
template <typename T>
constexpr void clear(volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg &= ~(1ULL << bit);
    1230:	84 b7       	in	r24, 0x34	; 52
    1232:	87 7f       	andi	r24, 0xF7	; 247
    1234:	84 bf       	out	0x34, r24	; 52
    utils::clear(MCUSR, WDRF);

    // Re-enable interrupts once the reset process is complete.
    utils::globalInterruptEnable();
    1236:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN5utils21globalInterruptEnableEv>
    123a:	08 95       	ret

0000123c <_ZN6driver10atmega328p8Watchdog10setEnabledEb>:
// -----------------------------------------------------------------------------
bool Watchdog::isEnabled() const noexcept { return myEnabled; }

// -----------------------------------------------------------------------------
void Watchdog::setEnabled(const bool enable) noexcept
{
    123c:	cf 93       	push	r28
    123e:	c6 2f       	mov	r28, r22
    // Reset the watchdog to prevent a timeout during the enablement update.
    reset();
    1240:	0e 94 15 09 	call	0x122a	; 0x122a <_ZN6driver10atmega328p8Watchdog5resetEv>

    // Update the enablement status, disable interrupts during the write sequence.
    utils::globalInterruptDisable();
    1244:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <_ZN5utils22globalInterruptDisableEv>
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
    1248:	e0 e6       	ldi	r30, 0x60	; 96
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	80 61       	ori	r24, 0x10	; 16
    1250:	80 83       	st	Z, r24
    1252:	80 81       	ld	r24, Z
    1254:	88 60       	ori	r24, 0x08	; 8
    1256:	80 83       	st	Z, r24
    utils::set(WDTCSR, WDCE, WDE);
    if (enable) { utils::set(WDTCSR, WDE); }
    1258:	cc 23       	and	r28, r28
    125a:	21 f0       	breq	.+8      	; 0x1264 <_ZN6driver10atmega328p8Watchdog10setEnabledEb+0x28>
    125c:	80 81       	ld	r24, Z
    125e:	88 60       	ori	r24, 0x08	; 8
    1260:	80 83       	st	Z, r24
    1262:	05 c0       	rjmp	.+10     	; 0x126e <_ZN6driver10atmega328p8Watchdog10setEnabledEb+0x32>
// -----------------------------------------------------------------------------
template <typename T>
constexpr void clear(volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg &= ~(1ULL << bit);
    1264:	e0 e6       	ldi	r30, 0x60	; 96
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	87 7f       	andi	r24, 0xF7	; 247
    126c:	80 83       	st	Z, r24
    else { utils::clear(WDTCSR, WDE); }

    // Re-enable interrupts once the write sequence is complete.
    utils::globalInterruptEnable();
    126e:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN5utils21globalInterruptEnableEv>
}
    1272:	cf 91       	pop	r28
    1274:	08 95       	ret

00001276 <_ZN6driver10atmega328p8Watchdog10setTimeoutENS1_7TimeoutE>:
    utils::globalInterruptEnable();
}

// -----------------------------------------------------------------------------
bool Watchdog::setTimeout(const Timeout timeout) noexcept
{
    1276:	ff 92       	push	r15
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    // Return false if the timeout is invalid.
    if (!isTimeoutValid(timeout)) { return false; }
    1280:	61 30       	cpi	r22, 0x01	; 1
    1282:	20 e2       	ldi	r18, 0x20	; 32
    1284:	72 07       	cpc	r23, r18
    1286:	b8 f4       	brcc	.+46     	; 0x12b6 <_ZN6driver10atmega328p8Watchdog10setTimeoutENS1_7TimeoutE+0x40>
    1288:	eb 01       	movw	r28, r22
    128a:	8c 01       	movw	r16, r24

    // Calculate the timeout value before the timed write sequence.
    const auto value{timeoutValue(timeout)};
    128c:	cb 01       	movw	r24, r22
    128e:	0e 94 b7 08 	call	0x116e	; 0x116e <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE>
    1292:	f8 2e       	mov	r15, r24

    // Update the watchdog timeout, disable interrupts during the write sequence.
    utils::globalInterruptDisable();
    1294:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <_ZN5utils22globalInterruptDisableEv>
    WDTCSR |= (1UL << WDCE) | (1UL << WDE);
    1298:	e0 e6       	ldi	r30, 0x60	; 96
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	88 61       	ori	r24, 0x18	; 24
    12a0:	80 83       	st	Z, r24
    WDTCSR = value;
    12a2:	f0 82       	st	Z, r15
    utils::globalInterruptEnable();
    12a4:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN5utils21globalInterruptEnableEv>

    // Re-enable interrupts once the write sequence is complete.
    utils::globalInterruptEnable();
    12a8:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN5utils21globalInterruptEnableEv>

    // Store the new timeout and return true to indicate success.
    myTimeout = timeout;
    12ac:	f8 01       	movw	r30, r16
    12ae:	d3 83       	std	Z+3, r29	; 0x03
    12b0:	c2 83       	std	Z+2, r28	; 0x02
    return true;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <_ZN6driver10atmega328p8Watchdog10setTimeoutENS1_7TimeoutE+0x42>

// -----------------------------------------------------------------------------
bool Watchdog::setTimeout(const Timeout timeout) noexcept
{
    // Return false if the timeout is invalid.
    if (!isTimeoutValid(timeout)) { return false; }
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    utils::globalInterruptEnable();

    // Store the new timeout and return true to indicate success.
    myTimeout = timeout;
    return true;
} 
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	ff 90       	pop	r15
    12c2:	08 95       	ret

000012c4 <_ZN6driver10atmega328p8WatchdogC1Ev>:

// -----------------------------------------------------------------------------
Watchdog::Watchdog() noexcept
    : myTimeout{}
    , myEnabled{false}
    12c4:	26 e1       	ldi	r18, 0x16	; 22
    12c6:	32 e0       	ldi	r19, 0x02	; 2
    12c8:	fc 01       	movw	r30, r24
    12ca:	31 83       	std	Z+1, r19	; 0x01
    12cc:	20 83       	st	Z, r18
    12ce:	13 82       	std	Z+3, r1	; 0x03
    12d0:	12 82       	std	Z+2, r1	; 0x02
    12d2:	14 82       	std	Z+4, r1	; 0x04
{
    // Set the default timeout.
    setTimeout(WatchdogParam::DefaultTimeout);
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	74 e0       	ldi	r23, 0x04	; 4
    12d8:	0e 94 3b 09 	call	0x1276	; 0x1276 <_ZN6driver10atmega328p8Watchdog10setTimeoutENS1_7TimeoutE>
    12dc:	08 95       	ret

000012de <_ZN6driver10atmega328p8Watchdog11getInstanceEv>:

// -----------------------------------------------------------------------------
WatchdogInterface& Watchdog::getInstance() noexcept
{
    // Create and initialize the singleton watchdog timer instance (once only).
    static Watchdog myInstance{};
    12de:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <_ZGVZN6driver10atmega328p8Watchdog11getInstanceEvE10myInstance>
    12e2:	81 11       	cpse	r24, r1
    12e4:	12 c0       	rjmp	.+36     	; 0x130a <_ZN6driver10atmega328p8Watchdog11getInstanceEv+0x2c>
    12e6:	8c ee       	ldi	r24, 0xEC	; 236
    12e8:	92 e0       	ldi	r25, 0x02	; 2
    12ea:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__cxa_guard_acquire>
    12ee:	89 2b       	or	r24, r25
    12f0:	61 f0       	breq	.+24     	; 0x130a <_ZN6driver10atmega328p8Watchdog11getInstanceEv+0x2c>
    12f2:	87 ee       	ldi	r24, 0xE7	; 231
    12f4:	92 e0       	ldi	r25, 0x02	; 2
    12f6:	0e 94 62 09 	call	0x12c4	; 0x12c4 <_ZN6driver10atmega328p8WatchdogC1Ev>
    12fa:	8c ee       	ldi	r24, 0xEC	; 236
    12fc:	92 e0       	ldi	r25, 0x02	; 2
    12fe:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__cxa_guard_release>
    1302:	85 ef       	ldi	r24, 0xF5	; 245
    1304:	98 e0       	ldi	r25, 0x08	; 8
    1306:	0e 94 77 00 	call	0xee	; 0xee <atexit>

    // Return a reference to the singleton watchdog instance, cast to the corresponding interface.
    return myInstance; 
}
    130a:	87 ee       	ldi	r24, 0xE7	; 231
    130c:	92 e0       	ldi	r25, 0x02	; 2
    130e:	08 95       	ret

00001310 <_ZN12_GLOBAL__N_119toggleTimerCallbackEv>:
/**
 * @brief Callback for the toggle timer.
 * 
 *        This callback is invoked whenever the toggle timer elapses.
 */
void toggleTimerCallback() noexcept { mySys->handleToggleTimerInterrupt(); }
    1310:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <_ZN12_GLOBAL__N_15mySysE>
    1314:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <_ZN12_GLOBAL__N_15mySysE+0x1>
    1318:	0e 94 0a 0b 	call	0x1614	; 0x1614 <_ZN6target6System26handleToggleTimerInterruptEv>
    131c:	08 95       	ret

0000131e <_ZN12_GLOBAL__N_121debounceTimerCallbackEv>:
/**
 * @brief Callback for the debounce timer.
 * 
 *        This callback is invoked whenever the debounce timer elapses.
 */
void debounceTimerCallback() noexcept { mySys->handleDebounceTimerInterrupt(); }
    131e:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <_ZN12_GLOBAL__N_15mySysE>
    1322:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <_ZN12_GLOBAL__N_15mySysE+0x1>
    1326:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <_ZN6target6System28handleDebounceTimerInterruptEv>
    132a:	08 95       	ret

0000132c <_ZN12_GLOBAL__N_114buttonCallbackEv>:
target::System* mySys{nullptr};

/**
 * @brief Callback for the button.
 */
void buttonCallback() noexcept { mySys->handleButtonInterrupt(); }
    132c:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <_ZN12_GLOBAL__N_15mySysE>
    1330:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <_ZN12_GLOBAL__N_15mySysE+0x1>
    1334:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <_ZN6target6System21handleButtonInterruptEv>
    1338:	08 95       	ret

0000133a <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>:

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
{
    if (nullptr == format) { return false; }
    133a:	61 15       	cp	r22, r1
    133c:	71 05       	cpc	r23, r1
    133e:	49 f0       	breq	.+18     	; 0x1352 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_+0x18>
        char buffer[length]{'\0'};
        (void) snprintf(buffer, length, format, args...);
        print(buffer);
    }
    // Print the string.
    else { print(format); }
    1340:	dc 01       	movw	r26, r24
    1342:	ed 91       	ld	r30, X+
    1344:	fc 91       	ld	r31, X
    1346:	04 84       	ldd	r0, Z+12	; 0x0c
    1348:	f5 85       	ldd	r31, Z+13	; 0x0d
    134a:	e0 2d       	mov	r30, r0
    134c:	09 95       	icall
    return true;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	08 95       	ret

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
{
    if (nullptr == format) { return false; }
    1352:	80 e0       	ldi	r24, 0x00	; 0
        print(buffer);
    }
    // Print the string.
    else { print(format); }
    return true;
}
    1354:	08 95       	ret

00001356 <_ZNK6driver15SerialInterface6printfIIiiEEEbPKcDpRKT_>:
    virtual void print(const char* str) const = 0;
};

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
    1356:	cf 92       	push	r12
    1358:	df 92       	push	r13
    135a:	ef 92       	push	r14
    135c:	ff 92       	push	r15
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	c5 56       	subi	r28, 0x65	; 101
    136c:	d1 09       	sbc	r29, r1
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	de bf       	out	0x3e, r29	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	cd bf       	out	0x3d, r28	; 61
{
    if (nullptr == format) { return false; }
    1378:	61 15       	cp	r22, r1
    137a:	71 05       	cpc	r23, r1
    137c:	81 f1       	breq	.+96     	; 0x13de <_ZNK6driver15SerialInterface6printfIIiiEEEbPKcDpRKT_+0x88>
    137e:	d9 01       	movw	r26, r18
    1380:	6a 01       	movw	r12, r20
    1382:	8c 01       	movw	r16, r24

    // Format and insert given additional arguments (if any).
    if (0U < sizeof...(args))
    {
        constexpr size_t length{101U};
        char buffer[length]{'\0'};
    1384:	85 e6       	ldi	r24, 0x65	; 101
    1386:	9e 01       	movw	r18, r28
    1388:	2f 5f       	subi	r18, 0xFF	; 255
    138a:	3f 4f       	sbci	r19, 0xFF	; 255
    138c:	79 01       	movw	r14, r18
    138e:	f9 01       	movw	r30, r18
    1390:	28 2f       	mov	r18, r24
    1392:	11 92       	st	Z+, r1
    1394:	2a 95       	dec	r18
    1396:	e9 f7       	brne	.-6      	; 0x1392 <_ZNK6driver15SerialInterface6printfIIiiEEEbPKcDpRKT_+0x3c>
        (void) snprintf(buffer, length, format, args...);
    1398:	3c 91       	ld	r19, X
    139a:	11 96       	adiw	r26, 0x01	; 1
    139c:	4c 91       	ld	r20, X
    139e:	d6 01       	movw	r26, r12
    13a0:	9c 91       	ld	r25, X
    13a2:	11 96       	adiw	r26, 0x01	; 1
    13a4:	2c 91       	ld	r18, X
    13a6:	4f 93       	push	r20
    13a8:	3f 93       	push	r19
    13aa:	2f 93       	push	r18
    13ac:	9f 93       	push	r25
    13ae:	7f 93       	push	r23
    13b0:	6f 93       	push	r22
    13b2:	1f 92       	push	r1
    13b4:	8f 93       	push	r24
    13b6:	ff 92       	push	r15
    13b8:	ef 92       	push	r14
    13ba:	0e 94 7d 10 	call	0x20fa	; 0x20fa <snprintf>
        print(buffer);
    13be:	d8 01       	movw	r26, r16
    13c0:	ed 91       	ld	r30, X+
    13c2:	fc 91       	ld	r31, X
    13c4:	04 84       	ldd	r0, Z+12	; 0x0c
    13c6:	f5 85       	ldd	r31, Z+13	; 0x0d
    13c8:	e0 2d       	mov	r30, r0
    13ca:	b7 01       	movw	r22, r14
    13cc:	c8 01       	movw	r24, r16
    13ce:	09 95       	icall
    }
    // Print the string.
    else { print(format); }
    return true;
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	01 c0       	rjmp	.+2      	; 0x13e0 <_ZNK6driver15SerialInterface6printfIIiiEEEbPKcDpRKT_+0x8a>

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
{
    if (nullptr == format) { return false; }
    13de:	80 e0       	ldi	r24, 0x00	; 0
        print(buffer);
    }
    // Print the string.
    else { print(format); }
    return true;
}
    13e0:	cb 59       	subi	r28, 0x9B	; 155
    13e2:	df 4f       	sbci	r29, 0xFF	; 255
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	df 91       	pop	r29
    13f0:	cf 91       	pop	r28
    13f2:	1f 91       	pop	r17
    13f4:	0f 91       	pop	r16
    13f6:	ff 90       	pop	r15
    13f8:	ef 90       	pop	r14
    13fa:	df 90       	pop	r13
    13fc:	cf 90       	pop	r12
    13fe:	08 95       	ret

00001400 <main>:
 * @brief Initialize and run the system on the target MCU.
 * 
 * @return 0 on termination of the program (should never occur).
 */
int main()
{
    1400:	6f 92       	push	r6
    1402:	7f 92       	push	r7
    1404:	8f 92       	push	r8
    1406:	9f 92       	push	r9
    1408:	af 92       	push	r10
    140a:	bf 92       	push	r11
    140c:	cf 92       	push	r12
    140e:	df 92       	push	r13
    1410:	ef 92       	push	r14
    1412:	ff 92       	push	r15
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	e0 97       	sbiw	r28, 0x30	; 48
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
    // Obtain a reference to the singleton serial device instance.
    auto& serial{Serial::getInstance()};
    142c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN6driver10atmega328p6Serial11getInstanceEv>
    1430:	7c 01       	movw	r14, r24
    serial.setEnabled(true);
    1432:	dc 01       	movw	r26, r24
    1434:	ed 91       	ld	r30, X+
    1436:	fc 91       	ld	r31, X
    1438:	02 84       	ldd	r0, Z+10	; 0x0a
    143a:	f3 85       	ldd	r31, Z+11	; 0x0b
    143c:	e0 2d       	mov	r30, r0
    143e:	61 e0       	ldi	r22, 0x01	; 1
    1440:	09 95       	icall

    serial.printf("Hej, Olle\n");
    1442:	64 e2       	ldi	r22, 0x24	; 36
    1444:	72 e0       	ldi	r23, 0x02	; 2
    1446:	c7 01       	movw	r24, r14
    1448:	0e 94 9d 09 	call	0x133a	; 0x133a <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>

    const double input{0.0};
    const double output{-50.0};

    serial.printf("Input: %d, output: %d\n", static_cast<int>(input + 0.5), static_cast<int>(output + 0.5));
    144c:	8f ec       	ldi	r24, 0xCF	; 207
    144e:	9f ef       	ldi	r25, 0xFF	; 255
    1450:	9c 83       	std	Y+4, r25	; 0x04
    1452:	8b 83       	std	Y+3, r24	; 0x03
    1454:	1a 82       	std	Y+2, r1	; 0x02
    1456:	19 82       	std	Y+1, r1	; 0x01
    1458:	9e 01       	movw	r18, r28
    145a:	2d 5f       	subi	r18, 0xFD	; 253
    145c:	3f 4f       	sbci	r19, 0xFF	; 255
    145e:	ae 01       	movw	r20, r28
    1460:	4f 5f       	subi	r20, 0xFF	; 255
    1462:	5f 4f       	sbci	r21, 0xFF	; 255
    1464:	6f e2       	ldi	r22, 0x2F	; 47
    1466:	72 e0       	ldi	r23, 0x02	; 2
    1468:	c7 01       	movw	r24, r14
    146a:	0e 94 ab 09 	call	0x1356	; 0x1356 <_ZNK6driver15SerialInterface6printfIIiiEEEbPKcDpRKT_>

    //const container::Vector<double> trainInput{0.0, 0.3, 0.6, 0.9, 1.2, 1.5, 1.8, 2.1, 2.4, 2.7, 3.0, 3.3, 3.6, 3.9};
    //const container::Vector<double> trainOutput{-50,};

    // Initialize the GPIO devices.
    Gpio led{8U, Gpio::Direction::Output};
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	42 e0       	ldi	r20, 0x02	; 2
    1474:	68 e0       	ldi	r22, 0x08	; 8
    1476:	ce 01       	movw	r24, r28
    1478:	05 96       	adiw	r24, 0x05	; 5
    147a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE>
    Gpio button{13U, Gpio::Direction::InputPullup, buttonCallback};
    147e:	26 e9       	ldi	r18, 0x96	; 150
    1480:	39 e0       	ldi	r19, 0x09	; 9
    1482:	41 e0       	ldi	r20, 0x01	; 1
    1484:	6d e0       	ldi	r22, 0x0D	; 13
    1486:	ce 01       	movw	r24, r28
    1488:	0a 96       	adiw	r24, 0x0a	; 10
    148a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE>

    // Initialize the timers.
    Timer debounceTimer{300U, debounceTimerCallback};
    148e:	00 e0       	ldi	r16, 0x00	; 0
    1490:	2f e8       	ldi	r18, 0x8F	; 143
    1492:	39 e0       	ldi	r19, 0x09	; 9
    1494:	4c e2       	ldi	r20, 0x2C	; 44
    1496:	51 e0       	ldi	r21, 0x01	; 1
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	ce 01       	movw	r24, r28
    149e:	0f 96       	adiw	r24, 0x0f	; 15
    14a0:	0e 94 66 07 	call	0xecc	; 0xecc <_ZN6driver10atmega328p5TimerC1EmPFvvEb>
    Timer toggleTimer{100U, toggleTimerCallback};
    14a4:	28 e8       	ldi	r18, 0x88	; 136
    14a6:	39 e0       	ldi	r19, 0x09	; 9
    14a8:	44 e6       	ldi	r20, 0x64	; 100
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	60 e0       	ldi	r22, 0x00	; 0
    14ae:	70 e0       	ldi	r23, 0x00	; 0
    14b0:	ce 01       	movw	r24, r28
    14b2:	48 96       	adiw	r24, 0x18	; 24
    14b4:	0e 94 66 07 	call	0xecc	; 0xecc <_ZN6driver10atmega328p5TimerC1EmPFvvEb>

    // Obtain a reference to the singleton watchdog timer instance.
    auto& watchdog{Watchdog::getInstance()};
    14b8:	0e 94 6f 09 	call	0x12de	; 0x12de <_ZN6driver10atmega328p8Watchdog11getInstanceEv>
    14bc:	6c 01       	movw	r12, r24

    // Obtain a reference to the singleton EEPROM instance.
    auto& eeprom{Eeprom::getInstance()};
    14be:	0e 94 c8 01 	call	0x390	; 0x390 <_ZN6driver10atmega328p6Eeprom11getInstanceEv>
    14c2:	5c 01       	movw	r10, r24

    // Obtain a reference to the singleton ADC instance.
    auto& adc{Adc::getInstance()};
    14c4:	0e 94 33 01 	call	0x266	; 0x266 <_ZN6driver10atmega328p3Adc11getInstanceEv>

    // Initialize the system with the given hardware.
    target::System system{led, button, debounceTimer, toggleTimer, serial, watchdog, eeprom, adc};
    14c8:	3e 01       	movw	r6, r28
    14ca:	b1 e2       	ldi	r27, 0x21	; 33
    14cc:	6b 0e       	add	r6, r27
    14ce:	71 1c       	adc	r7, r1
    14d0:	4c 01       	movw	r8, r24
    14d2:	8e 01       	movw	r16, r28
    14d4:	08 5e       	subi	r16, 0xE8	; 232
    14d6:	1f 4f       	sbci	r17, 0xFF	; 255
    14d8:	9e 01       	movw	r18, r28
    14da:	21 5f       	subi	r18, 0xF1	; 241
    14dc:	3f 4f       	sbci	r19, 0xFF	; 255
    14de:	ae 01       	movw	r20, r28
    14e0:	46 5f       	subi	r20, 0xF6	; 246
    14e2:	5f 4f       	sbci	r21, 0xFF	; 255
    14e4:	be 01       	movw	r22, r28
    14e6:	6b 5f       	subi	r22, 0xFB	; 251
    14e8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ea:	c3 01       	movw	r24, r6
    14ec:	0e 94 8a 0c 	call	0x1914	; 0x1914 <_ZN6target6SystemC1ERN6driver13GpioInterfaceES3_RNS1_14TimerInterfaceES5_RNS1_15SerialInterfaceERNS1_17WatchdogInterfaceERNS1_15EepromInterfaceERNS1_12AdcInterfaceE>
    mySys = &system;
    14f0:	70 92 f5 02 	sts	0x02F5, r7	; 0x8002f5 <_ZN12_GLOBAL__N_15mySysE+0x1>
    14f4:	60 92 f4 02 	sts	0x02F4, r6	; 0x8002f4 <_ZN12_GLOBAL__N_15mySysE>

    // Run the system perpetually on the target MCU.
    mySys->run();
    14f8:	c3 01       	movw	r24, r6
    14fa:	0e 94 1f 0b 	call	0x163e	; 0x163e <_ZN6target6System3runEv>

    // Obtain a reference to the singleton ADC instance.
    auto& adc{Adc::getInstance()};

    // Initialize the system with the given hardware.
    target::System system{led, button, debounceTimer, toggleTimer, serial, watchdog, eeprom, adc};
    14fe:	c3 01       	movw	r24, r6
    1500:	0e 94 bb 0a 	call	0x1576	; 0x1576 <_ZN6target6SystemD1Ev>
    Gpio led{8U, Gpio::Direction::Output};
    Gpio button{13U, Gpio::Direction::InputPullup, buttonCallback};

    // Initialize the timers.
    Timer debounceTimer{300U, debounceTimerCallback};
    Timer toggleTimer{100U, toggleTimerCallback};
    1504:	c8 01       	movw	r24, r16
    1506:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <_ZN6driver10atmega328p5TimerD1Ev>
    // Initialize the GPIO devices.
    Gpio led{8U, Gpio::Direction::Output};
    Gpio button{13U, Gpio::Direction::InputPullup, buttonCallback};

    // Initialize the timers.
    Timer debounceTimer{300U, debounceTimerCallback};
    150a:	ce 01       	movw	r24, r28
    150c:	0f 96       	adiw	r24, 0x0f	; 15
    150e:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <_ZN6driver10atmega328p5TimerD1Ev>
    //const container::Vector<double> trainInput{0.0, 0.3, 0.6, 0.9, 1.2, 1.5, 1.8, 2.1, 2.4, 2.7, 3.0, 3.3, 3.6, 3.9};
    //const container::Vector<double> trainOutput{-50,};

    // Initialize the GPIO devices.
    Gpio led{8U, Gpio::Direction::Output};
    Gpio button{13U, Gpio::Direction::InputPullup, buttonCallback};
    1512:	ce 01       	movw	r24, r28
    1514:	0a 96       	adiw	r24, 0x0a	; 10
    1516:	0e 94 cd 02 	call	0x59a	; 0x59a <_ZN6driver10atmega328p4GpioD1Ev>

    //const container::Vector<double> trainInput{0.0, 0.3, 0.6, 0.9, 1.2, 1.5, 1.8, 2.1, 2.4, 2.7, 3.0, 3.3, 3.6, 3.9};
    //const container::Vector<double> trainOutput{-50,};

    // Initialize the GPIO devices.
    Gpio led{8U, Gpio::Direction::Output};
    151a:	ce 01       	movw	r24, r28
    151c:	05 96       	adiw	r24, 0x05	; 5
    151e:	0e 94 cd 02 	call	0x59a	; 0x59a <_ZN6driver10atmega328p4GpioD1Ev>
    // Run the system perpetually on the target MCU.
    mySys->run();

    // This point should never be reached; the system is intended to run indefinitely on the target MCU.
    return 0;
}
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	e0 96       	adiw	r28, 0x30	; 48
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	ff 90       	pop	r15
    153c:	ef 90       	pop	r14
    153e:	df 90       	pop	r13
    1540:	cf 90       	pop	r12
    1542:	bf 90       	pop	r11
    1544:	af 90       	pop	r10
    1546:	9f 90       	pop	r9
    1548:	8f 90       	pop	r8
    154a:	7f 90       	pop	r7
    154c:	6f 90       	pop	r6
    154e:	08 95       	ret

00001550 <_Z41__static_initialization_and_destruction_0ii>:
            return true;
        }        
    }

    return true;
}
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	49 f4       	brne	.+18     	; 0x1566 <_Z41__static_initialization_and_destruction_0ii+0x16>
    1554:	6f 3f       	cpi	r22, 0xFF	; 255
    1556:	7f 4f       	sbci	r23, 0xFF	; 255
    1558:	31 f4       	brne	.+12     	; 0x1566 <_Z41__static_initialization_and_destruction_0ii+0x16>
    155a:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN6driver10atmega328p6Serial11getInstanceEv>
    155e:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <_ZN2ml7lin_reg12_GLOBAL__N_16serialE+0x1>
    1562:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <_ZN2ml7lin_reg12_GLOBAL__N_16serialE>
    1566:	08 95       	ret

00001568 <_GLOBAL__sub_I__ZN2ml7lin_reg6LinRegC2ERKN9container6VectorIdEES6_>:
} // namespace lin_reg
    1568:	6f ef       	ldi	r22, 0xFF	; 255
    156a:	7f ef       	ldi	r23, 0xFF	; 255
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	0e 94 a8 0a 	call	0x1550	; 0x1550 <_Z41__static_initialization_and_destruction_0ii>
    1574:	08 95       	ret

00001576 <_ZN6target6SystemD1Ev>:
}

// -----------------------------------------------------------------------------
void System::enableSerialTransmission(const bool enable) noexcept
{
    mySerial.setEnabled(enable);
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	ec 01       	movw	r28, r24
    157c:	88 81       	ld	r24, Y
    157e:	99 81       	ldd	r25, Y+1	; 0x01
    1580:	dc 01       	movw	r26, r24
    1582:	ed 91       	ld	r30, X+
    1584:	fc 91       	ld	r31, X
    1586:	00 84       	ldd	r0, Z+8	; 0x08
    1588:	f1 85       	ldd	r31, Z+9	; 0x09
    158a:	e0 2d       	mov	r30, r0
    158c:	60 e0       	ldi	r22, 0x00	; 0
    158e:	09 95       	icall
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	9b 81       	ldd	r25, Y+3	; 0x03
    1594:	dc 01       	movw	r26, r24
    1596:	ed 91       	ld	r30, X+
    1598:	fc 91       	ld	r31, X
    159a:	04 84       	ldd	r0, Z+12	; 0x0c
    159c:	f5 85       	ldd	r31, Z+13	; 0x0d
    159e:	e0 2d       	mov	r30, r0
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	09 95       	icall
    15a4:	8c 81       	ldd	r24, Y+4	; 0x04
    15a6:	9d 81       	ldd	r25, Y+5	; 0x05
    15a8:	dc 01       	movw	r26, r24
    15aa:	ed 91       	ld	r30, X+
    15ac:	fc 91       	ld	r31, X
    15ae:	00 88       	ldd	r0, Z+16	; 0x10
    15b0:	f1 89       	ldd	r31, Z+17	; 0x11
    15b2:	e0 2d       	mov	r30, r0
    15b4:	09 95       	icall
    15b6:	8e 81       	ldd	r24, Y+6	; 0x06
    15b8:	9f 81       	ldd	r25, Y+7	; 0x07
    15ba:	dc 01       	movw	r26, r24
    15bc:	ed 91       	ld	r30, X+
    15be:	fc 91       	ld	r31, X
    15c0:	00 88       	ldd	r0, Z+16	; 0x10
    15c2:	f1 89       	ldd	r31, Z+17	; 0x11
    15c4:	e0 2d       	mov	r30, r0
    15c6:	09 95       	icall
    15c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    15ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    15cc:	dc 01       	movw	r26, r24
    15ce:	ed 91       	ld	r30, X+
    15d0:	fc 91       	ld	r31, X
    15d2:	00 84       	ldd	r0, Z+8	; 0x08
    15d4:	f1 85       	ldd	r31, Z+9	; 0x09
    15d6:	e0 2d       	mov	r30, r0
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	09 95       	icall
    15dc:	df 91       	pop	r29
    15de:	cf 91       	pop	r28
    15e0:	08 95       	ret

000015e2 <_ZN6target6System28handleDebounceTimerInterruptEv>:
    if (myButton.read()) { handleButtonPressed(); }
}

// -----------------------------------------------------------------------------
void System::handleDebounceTimerInterrupt() noexcept
{
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	ec 01       	movw	r28, r24
    myDebounceTimer.stop();
    15e8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ea:	9d 81       	ldd	r25, Y+5	; 0x05
    15ec:	dc 01       	movw	r26, r24
    15ee:	ed 91       	ld	r30, X+
    15f0:	fc 91       	ld	r31, X
    15f2:	00 88       	ldd	r0, Z+16	; 0x10
    15f4:	f1 89       	ldd	r31, Z+17	; 0x11
    15f6:	e0 2d       	mov	r30, r0
    15f8:	09 95       	icall
    myButton.enableInterruptOnPort(true);
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	9b 81       	ldd	r25, Y+3	; 0x03
    15fe:	dc 01       	movw	r26, r24
    1600:	ed 91       	ld	r30, X+
    1602:	fc 91       	ld	r31, X
    1604:	06 84       	ldd	r0, Z+14	; 0x0e
    1606:	f7 85       	ldd	r31, Z+15	; 0x0f
    1608:	e0 2d       	mov	r30, r0
    160a:	61 e0       	ldi	r22, 0x01	; 1
    160c:	09 95       	icall
}
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	08 95       	ret

00001614 <_ZN6target6System26handleToggleTimerInterruptEv>:

// -----------------------------------------------------------------------------
void System::handleToggleTimerInterrupt() noexcept 
{ 
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	ec 01       	movw	r28, r24
    mySerial.printf("Toggling the LED!\n");
    161a:	66 e4       	ldi	r22, 0x46	; 70
    161c:	72 e0       	ldi	r23, 0x02	; 2
    161e:	88 85       	ldd	r24, Y+8	; 0x08
    1620:	99 85       	ldd	r25, Y+9	; 0x09
    1622:	0e 94 9d 09 	call	0x133a	; 0x133a <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
    myLed.toggle(); 
    1626:	88 81       	ld	r24, Y
    1628:	99 81       	ldd	r25, Y+1	; 0x01
    162a:	dc 01       	movw	r26, r24
    162c:	ed 91       	ld	r30, X+
    162e:	fc 91       	ld	r31, X
    1630:	02 84       	ldd	r0, Z+10	; 0x0a
    1632:	f3 85       	ldd	r31, Z+11	; 0x0b
    1634:	e0 2d       	mov	r30, r0
    1636:	09 95       	icall
}
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	08 95       	ret

0000163e <_ZN6target6System3runEv>:

// -----------------------------------------------------------------------------
void System::run() noexcept
{
    163e:	ec 01       	movw	r28, r24
    mySerial.printf("Running the system!\n");
    1640:	69 e5       	ldi	r22, 0x59	; 89
    1642:	72 e0       	ldi	r23, 0x02	; 2
    1644:	88 85       	ldd	r24, Y+8	; 0x08
    1646:	99 85       	ldd	r25, Y+9	; 0x09
    1648:	0e 94 9d 09 	call	0x133a	; 0x133a <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
    
    while (1)
    {
        myWatchdog.reset();
    164c:	8a 85       	ldd	r24, Y+10	; 0x0a
    164e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1650:	dc 01       	movw	r26, r24
    1652:	ed 91       	ld	r30, X+
    1654:	fc 91       	ld	r31, X
    1656:	04 84       	ldd	r0, Z+12	; 0x0c
    1658:	f5 85       	ldd	r31, Z+13	; 0x0d
    165a:	e0 2d       	mov	r30, r0
    165c:	09 95       	icall
    165e:	f6 cf       	rjmp	.-20     	; 0x164c <_ZN6target6System3runEv+0xe>

00001660 <_ZNK6driver15EepromInterface5writeIbEEbjRKT_>:
    virtual uint8_t readByte(const uint16_t address) const = 0;
};

// -----------------------------------------------------------------------------
template <typename T>
bool EepromInterface::write(const uint16_t address, const T& data) const noexcept
    1660:	df 92       	push	r13
    1662:	ef 92       	push	r14
    1664:	ff 92       	push	r15
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	ec 01       	movw	r28, r24
    1670:	8b 01       	movw	r16, r22
    1672:	7a 01       	movw	r14, r20
    // Generate a compiler error if the given type isn't of unsigned type.
    static_assert(type_traits::is_unsigned<T>::value, 
        "EEPROM write only supported for unsigned data types!");

    // Return false is the given address in invalid or if the EEPROM stream isn't enabled.
    if (!isAddressValid(address, sizeof(T)) || !isEnabled()) { return false; }
    1674:	e8 81       	ld	r30, Y
    1676:	f9 81       	ldd	r31, Y+1	; 0x01
    1678:	02 84       	ldd	r0, Z+10	; 0x0a
    167a:	f3 85       	ldd	r31, Z+11	; 0x0b
    167c:	e0 2d       	mov	r30, r0
    167e:	41 e0       	ldi	r20, 0x01	; 1
    1680:	09 95       	icall
    1682:	d8 2e       	mov	r13, r24
    1684:	88 23       	and	r24, r24
    1686:	59 f0       	breq	.+22     	; 0x169e <_ZNK6driver15EepromInterface5writeIbEEbjRKT_+0x3e>
    1688:	e8 81       	ld	r30, Y
    168a:	f9 81       	ldd	r31, Y+1	; 0x01
    168c:	06 80       	ldd	r0, Z+6	; 0x06
    168e:	f7 81       	ldd	r31, Z+7	; 0x07
    1690:	e0 2d       	mov	r30, r0
    1692:	ce 01       	movw	r24, r28
    1694:	09 95       	icall
    1696:	88 23       	and	r24, r24
    1698:	21 f0       	breq	.+8      	; 0x16a2 <_ZNK6driver15EepromInterface5writeIbEEbjRKT_+0x42>
    169a:	d1 2c       	mov	r13, r1
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <_ZNK6driver15EepromInterface5writeIbEEbjRKT_+0x42>
    169e:	dd 24       	eor	r13, r13
    16a0:	d3 94       	inc	r13
    16a2:	d1 10       	cpse	r13, r1
    16a4:	1e c0       	rjmp	.+60     	; 0x16e2 <_ZNK6driver15EepromInterface5writeIbEEbjRKT_+0x82>
    
    // Write each byte to EEPROM, one at a time.
    for (uint8_t i{}; i < sizeof(T); ++i)
    16a6:	d1 10       	cpse	r13, r1
    16a8:	1e c0       	rjmp	.+60     	; 0x16e6 <_ZNK6driver15EepromInterface5writeIbEEbjRKT_+0x86>
    {
        writeByte(address + i, static_cast<uint8_t>(data >> (8U * i)));
    16aa:	e8 81       	ld	r30, Y
    16ac:	f9 81       	ldd	r31, Y+1	; 0x01
    16ae:	04 84       	ldd	r0, Z+12	; 0x0c
    16b0:	f5 85       	ldd	r31, Z+13	; 0x0d
    16b2:	e0 2d       	mov	r30, r0
    16b4:	6d 2d       	mov	r22, r13
    16b6:	70 e0       	ldi	r23, 0x00	; 0
    16b8:	d7 01       	movw	r26, r14
    16ba:	4c 91       	ld	r20, X
    16bc:	50 e0       	ldi	r21, 0x00	; 0
    16be:	cb 01       	movw	r24, r22
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <_ZNK6driver15EepromInterface5writeIbEEbjRKT_+0x72>
    16ce:	55 95       	asr	r21
    16d0:	47 95       	ror	r20
    16d2:	8a 95       	dec	r24
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <_ZNK6driver15EepromInterface5writeIbEEbjRKT_+0x6e>
    16d6:	60 0f       	add	r22, r16
    16d8:	71 1f       	adc	r23, r17
    16da:	ce 01       	movw	r24, r28
    16dc:	09 95       	icall

    // Return false is the given address in invalid or if the EEPROM stream isn't enabled.
    if (!isAddressValid(address, sizeof(T)) || !isEnabled()) { return false; }
    
    // Write each byte to EEPROM, one at a time.
    for (uint8_t i{}; i < sizeof(T); ++i)
    16de:	d3 94       	inc	r13
    16e0:	e2 cf       	rjmp	.-60     	; 0x16a6 <_ZNK6driver15EepromInterface5writeIbEEbjRKT_+0x46>
    // Generate a compiler error if the given type isn't of unsigned type.
    static_assert(type_traits::is_unsigned<T>::value, 
        "EEPROM write only supported for unsigned data types!");

    // Return false is the given address in invalid or if the EEPROM stream isn't enabled.
    if (!isAddressValid(address, sizeof(T)) || !isEnabled()) { return false; }
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	01 c0       	rjmp	.+2      	; 0x16e8 <_ZNK6driver15EepromInterface5writeIbEEbjRKT_+0x88>
    for (uint8_t i{}; i < sizeof(T); ++i)
    {
        writeByte(address + i, static_cast<uint8_t>(data >> (8U * i)));
    }
    // Return true to indicate success.
    return true;
    16e6:	81 e0       	ldi	r24, 0x01	; 1
}
    16e8:	df 91       	pop	r29
    16ea:	cf 91       	pop	r28
    16ec:	1f 91       	pop	r17
    16ee:	0f 91       	pop	r16
    16f0:	ff 90       	pop	r15
    16f2:	ef 90       	pop	r14
    16f4:	df 90       	pop	r13
    16f6:	08 95       	ret

000016f8 <_ZN6target6System21writeLedStateToEepromEv>:
    }
}

// -----------------------------------------------------------------------------
void System::writeLedStateToEeprom() noexcept
{ 
    16f8:	0f 93       	push	r16
    16fa:	1f 93       	push	r17
    16fc:	cf 93       	push	r28
    16fe:	df 93       	push	r29
    1700:	1f 92       	push	r1
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	8c 01       	movw	r16, r24
    myEeprom.write(LedState::address, myToggleTimer.isEnabled());
    1708:	dc 01       	movw	r26, r24
    170a:	16 96       	adiw	r26, 0x06	; 6
    170c:	8d 91       	ld	r24, X+
    170e:	9c 91       	ld	r25, X
    1710:	17 97       	sbiw	r26, 0x07	; 7
    1712:	dc 01       	movw	r26, r24
    1714:	ed 91       	ld	r30, X+
    1716:	fc 91       	ld	r31, X
    1718:	06 80       	ldd	r0, Z+6	; 0x06
    171a:	f7 81       	ldd	r31, Z+7	; 0x07
    171c:	e0 2d       	mov	r30, r0
    171e:	09 95       	icall
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	ae 01       	movw	r20, r28
    1724:	4f 5f       	subi	r20, 0xFF	; 255
    1726:	5f 4f       	sbci	r21, 0xFF	; 255
    1728:	60 e0       	ldi	r22, 0x00	; 0
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	f8 01       	movw	r30, r16
    172e:	84 85       	ldd	r24, Z+12	; 0x0c
    1730:	95 85       	ldd	r25, Z+13	; 0x0d
    1732:	0e 94 30 0b 	call	0x1660	; 0x1660 <_ZNK6driver15EepromInterface5writeIbEEbjRKT_>
}
    1736:	0f 90       	pop	r0
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	1f 91       	pop	r17
    173e:	0f 91       	pop	r16
    1740:	08 95       	ret

00001742 <_ZN6target6System19handleButtonPressedEv>:
    }
}

// -----------------------------------------------------------------------------
void System::handleButtonPressed() noexcept
{
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	ec 01       	movw	r28, r24
    mySerial.printf("Button pressed!\n");
    1748:	6e e6       	ldi	r22, 0x6E	; 110
    174a:	72 e0       	ldi	r23, 0x02	; 2
    174c:	88 85       	ldd	r24, Y+8	; 0x08
    174e:	99 85       	ldd	r25, Y+9	; 0x09
    1750:	0e 94 9d 09 	call	0x133a	; 0x133a <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
    myToggleTimer.toggle();
    1754:	8e 81       	ldd	r24, Y+6	; 0x06
    1756:	9f 81       	ldd	r25, Y+7	; 0x07
    1758:	dc 01       	movw	r26, r24
    175a:	ed 91       	ld	r30, X+
    175c:	fc 91       	ld	r31, X
    175e:	02 88       	ldd	r0, Z+18	; 0x12
    1760:	f3 89       	ldd	r31, Z+19	; 0x13
    1762:	e0 2d       	mov	r30, r0
    1764:	09 95       	icall
    writeLedStateToEeprom();
    1766:	ce 01       	movw	r24, r28
    1768:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <_ZN6target6System21writeLedStateToEepromEv>

    if (myToggleTimer.isEnabled()) { mySerial.printf("Toggle timer enabled!\n"); }
    176c:	8e 81       	ldd	r24, Y+6	; 0x06
    176e:	9f 81       	ldd	r25, Y+7	; 0x07
    1770:	dc 01       	movw	r26, r24
    1772:	ed 91       	ld	r30, X+
    1774:	fc 91       	ld	r31, X
    1776:	06 80       	ldd	r0, Z+6	; 0x06
    1778:	f7 81       	ldd	r31, Z+7	; 0x07
    177a:	e0 2d       	mov	r30, r0
    177c:	09 95       	icall
    177e:	88 23       	and	r24, r24
    1780:	39 f0       	breq	.+14     	; 0x1790 <_ZN6target6System19handleButtonPressedEv+0x4e>
    1782:	6f e7       	ldi	r22, 0x7F	; 127
    1784:	72 e0       	ldi	r23, 0x02	; 2
    1786:	88 85       	ldd	r24, Y+8	; 0x08
    1788:	99 85       	ldd	r25, Y+9	; 0x09
    178a:	0e 94 9d 09 	call	0x133a	; 0x133a <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
    178e:	10 c0       	rjmp	.+32     	; 0x17b0 <_ZN6target6System19handleButtonPressedEv+0x6e>
    else
    {
        mySerial.printf("Toggle timer disabled!\n");
    1790:	66 e9       	ldi	r22, 0x96	; 150
    1792:	72 e0       	ldi	r23, 0x02	; 2
    1794:	88 85       	ldd	r24, Y+8	; 0x08
    1796:	99 85       	ldd	r25, Y+9	; 0x09
    1798:	0e 94 9d 09 	call	0x133a	; 0x133a <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
        myLed.write(false);
    179c:	88 81       	ld	r24, Y
    179e:	99 81       	ldd	r25, Y+1	; 0x01
    17a0:	dc 01       	movw	r26, r24
    17a2:	ed 91       	ld	r30, X+
    17a4:	fc 91       	ld	r31, X
    17a6:	00 84       	ldd	r0, Z+8	; 0x08
    17a8:	f1 85       	ldd	r31, Z+9	; 0x09
    17aa:	e0 2d       	mov	r30, r0
    17ac:	60 e0       	ldi	r22, 0x00	; 0
    17ae:	09 95       	icall
    }
}
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	08 95       	ret

000017b6 <_ZN6target6System21handleButtonInterruptEv>:
    mySerial.setEnabled(enable);
}

// -----------------------------------------------------------------------------
void System::handleButtonInterrupt() noexcept
{
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	ec 01       	movw	r28, r24
    myButton.enableInterruptOnPort(false);
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	9b 81       	ldd	r25, Y+3	; 0x03
    17c0:	dc 01       	movw	r26, r24
    17c2:	ed 91       	ld	r30, X+
    17c4:	fc 91       	ld	r31, X
    17c6:	06 84       	ldd	r0, Z+14	; 0x0e
    17c8:	f7 85       	ldd	r31, Z+15	; 0x0f
    17ca:	e0 2d       	mov	r30, r0
    17cc:	60 e0       	ldi	r22, 0x00	; 0
    17ce:	09 95       	icall
    myDebounceTimer.start();
    17d0:	8c 81       	ldd	r24, Y+4	; 0x04
    17d2:	9d 81       	ldd	r25, Y+5	; 0x05
    17d4:	dc 01       	movw	r26, r24
    17d6:	ed 91       	ld	r30, X+
    17d8:	fc 91       	ld	r31, X
    17da:	06 84       	ldd	r0, Z+14	; 0x0e
    17dc:	f7 85       	ldd	r31, Z+15	; 0x0f
    17de:	e0 2d       	mov	r30, r0
    17e0:	09 95       	icall
    if (myButton.read()) { handleButtonPressed(); }
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	9b 81       	ldd	r25, Y+3	; 0x03
    17e6:	dc 01       	movw	r26, r24
    17e8:	ed 91       	ld	r30, X+
    17ea:	fc 91       	ld	r31, X
    17ec:	06 80       	ldd	r0, Z+6	; 0x06
    17ee:	f7 81       	ldd	r31, Z+7	; 0x07
    17f0:	e0 2d       	mov	r30, r0
    17f2:	09 95       	icall
    17f4:	88 23       	and	r24, r24
    17f6:	19 f0       	breq	.+6      	; 0x17fe <_ZN6target6System21handleButtonInterruptEv+0x48>
    17f8:	ce 01       	movw	r24, r28
    17fa:	0e 94 a1 0b 	call	0x1742	; 0x1742 <_ZN6target6System19handleButtonPressedEv>
}
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	08 95       	ret

00001804 <_ZNK6driver15EepromInterface4readIhEEbjRT_>:

// -----------------------------------------------------------------------------
template <typename T>
bool EepromInterface::read(const uint16_t address, T& data) const noexcept
    1804:	af 92       	push	r10
    1806:	bf 92       	push	r11
    1808:	df 92       	push	r13
    180a:	ef 92       	push	r14
    180c:	ff 92       	push	r15
    180e:	0f 93       	push	r16
    1810:	1f 93       	push	r17
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	ec 01       	movw	r28, r24
    1818:	7b 01       	movw	r14, r22
    181a:	8a 01       	movw	r16, r20
    // Generate a compiler error if the given type isn't of unsigned type.
    static_assert(type_traits::is_unsigned<T>::value, 
        "EEPROM read only supported for unsigned data types!");

    // Return false is the given address in invalid or if the EEPROM stream isn't enabled.
    if (!isAddressValid(address, sizeof(T)) || !isEnabled()) { return false; }
    181c:	e8 81       	ld	r30, Y
    181e:	f9 81       	ldd	r31, Y+1	; 0x01
    1820:	02 84       	ldd	r0, Z+10	; 0x0a
    1822:	f3 85       	ldd	r31, Z+11	; 0x0b
    1824:	e0 2d       	mov	r30, r0
    1826:	41 e0       	ldi	r20, 0x01	; 1
    1828:	09 95       	icall
    182a:	d8 2e       	mov	r13, r24
    182c:	88 23       	and	r24, r24
    182e:	59 f0       	breq	.+22     	; 0x1846 <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x42>
    1830:	e8 81       	ld	r30, Y
    1832:	f9 81       	ldd	r31, Y+1	; 0x01
    1834:	06 80       	ldd	r0, Z+6	; 0x06
    1836:	f7 81       	ldd	r31, Z+7	; 0x07
    1838:	e0 2d       	mov	r30, r0
    183a:	ce 01       	movw	r24, r28
    183c:	09 95       	icall
    183e:	88 23       	and	r24, r24
    1840:	21 f0       	breq	.+8      	; 0x184a <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x46>
    1842:	d1 2c       	mov	r13, r1
    1844:	02 c0       	rjmp	.+4      	; 0x184a <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x46>
    1846:	dd 24       	eor	r13, r13
    1848:	d3 94       	inc	r13
    184a:	d1 10       	cpse	r13, r1
    184c:	22 c0       	rjmp	.+68     	; 0x1892 <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x8e>
    data = {};
    184e:	f8 01       	movw	r30, r16
    1850:	10 82       	st	Z, r1

    // Read each byte from EEPROM, one at a type.
    for (uint8_t i{}; i < sizeof(T); ++i) 
    1852:	d1 10       	cpse	r13, r1
    1854:	20 c0       	rjmp	.+64     	; 0x1896 <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x92>
    { 
        data |= static_cast<T>(readByte(address + i) << (8U * i));
    1856:	ad 2c       	mov	r10, r13
    1858:	b1 2c       	mov	r11, r1
    185a:	b7 01       	movw	r22, r14
    185c:	6a 0d       	add	r22, r10
    185e:	7b 1d       	adc	r23, r11
    1860:	e8 81       	ld	r30, Y
    1862:	f9 81       	ldd	r31, Y+1	; 0x01
    1864:	06 84       	ldd	r0, Z+14	; 0x0e
    1866:	f7 85       	ldd	r31, Z+15	; 0x0f
    1868:	e0 2d       	mov	r30, r0
    186a:	ce 01       	movw	r24, r28
    186c:	09 95       	icall
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	aa 0c       	add	r10, r10
    1872:	bb 1c       	adc	r11, r11
    1874:	aa 0c       	add	r10, r10
    1876:	bb 1c       	adc	r11, r11
    1878:	aa 0c       	add	r10, r10
    187a:	bb 1c       	adc	r11, r11
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x7e>
    187e:	88 0f       	add	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	aa 94       	dec	r10
    1884:	e2 f7       	brpl	.-8      	; 0x187e <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x7a>
    1886:	f8 01       	movw	r30, r16
    1888:	90 81       	ld	r25, Z
    188a:	89 2b       	or	r24, r25
    188c:	80 83       	st	Z, r24
    // Return false is the given address in invalid or if the EEPROM stream isn't enabled.
    if (!isAddressValid(address, sizeof(T)) || !isEnabled()) { return false; }
    data = {};

    // Read each byte from EEPROM, one at a type.
    for (uint8_t i{}; i < sizeof(T); ++i) 
    188e:	d3 94       	inc	r13
    1890:	e0 cf       	rjmp	.-64     	; 0x1852 <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x4e>
    // Generate a compiler error if the given type isn't of unsigned type.
    static_assert(type_traits::is_unsigned<T>::value, 
        "EEPROM read only supported for unsigned data types!");

    // Return false is the given address in invalid or if the EEPROM stream isn't enabled.
    if (!isAddressValid(address, sizeof(T)) || !isEnabled()) { return false; }
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	01 c0       	rjmp	.+2      	; 0x1898 <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x94>
    for (uint8_t i{}; i < sizeof(T); ++i) 
    { 
        data |= static_cast<T>(readByte(address + i) << (8U * i));
    }
    // Return true to indicate success.
    return true;
    1896:	81 e0       	ldi	r24, 0x01	; 1
}
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	ff 90       	pop	r15
    18a2:	ef 90       	pop	r14
    18a4:	df 90       	pop	r13
    18a6:	bf 90       	pop	r11
    18a8:	af 90       	pop	r10
    18aa:	08 95       	ret

000018ac <_ZNK6target6System22readLedStateFromEepromEv>:
    myEeprom.write(LedState::address, myToggleTimer.isEnabled());
}

// -----------------------------------------------------------------------------
bool System::readLedStateFromEeprom() const noexcept
{
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	1f 92       	push	r1
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    uint8_t state{};
    18b6:	19 82       	std	Y+1, r1	; 0x01
    return myEeprom.read(LedState::address, state) ? LedState::enabled == state : false;
    18b8:	ae 01       	movw	r20, r28
    18ba:	4f 5f       	subi	r20, 0xFF	; 255
    18bc:	5f 4f       	sbci	r21, 0xFF	; 255
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	fc 01       	movw	r30, r24
    18c4:	84 85       	ldd	r24, Z+12	; 0x0c
    18c6:	95 85       	ldd	r25, Z+13	; 0x0d
    18c8:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZNK6driver15EepromInterface4readIhEEbjRT_>
    18cc:	88 23       	and	r24, r24
    18ce:	29 f0       	breq	.+10     	; 0x18da <_ZNK6target6System22readLedStateFromEepromEv+0x2e>
    18d0:	99 81       	ldd	r25, Y+1	; 0x01
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	91 30       	cpi	r25, 0x01	; 1
    18d6:	09 f0       	breq	.+2      	; 0x18da <_ZNK6target6System22readLedStateFromEepromEv+0x2e>
    18d8:	80 e0       	ldi	r24, 0x00	; 0
}
    18da:	0f 90       	pop	r0
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	08 95       	ret

000018e2 <_ZN6target6System21checkLedStateInEepromEv>:
    }
}

// -----------------------------------------------------------------------------
void System::checkLedStateInEeprom() noexcept
{
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	ec 01       	movw	r28, r24
    if (readLedStateFromEeprom())
    18e8:	0e 94 56 0c 	call	0x18ac	; 0x18ac <_ZNK6target6System22readLedStateFromEepromEv>
    18ec:	88 23       	and	r24, r24
    18ee:	79 f0       	breq	.+30     	; 0x190e <_ZN6target6System21checkLedStateInEepromEv+0x2c>
    {
        myToggleTimer.start();
    18f0:	8e 81       	ldd	r24, Y+6	; 0x06
    18f2:	9f 81       	ldd	r25, Y+7	; 0x07
    18f4:	dc 01       	movw	r26, r24
    18f6:	ed 91       	ld	r30, X+
    18f8:	fc 91       	ld	r31, X
    18fa:	06 84       	ldd	r0, Z+14	; 0x0e
    18fc:	f7 85       	ldd	r31, Z+15	; 0x0f
    18fe:	e0 2d       	mov	r30, r0
    1900:	09 95       	icall
        mySerial.printf("Toggle timer enabled!\n");
    1902:	6f e7       	ldi	r22, 0x7F	; 127
    1904:	72 e0       	ldi	r23, 0x02	; 2
    1906:	88 85       	ldd	r24, Y+8	; 0x08
    1908:	99 85       	ldd	r25, Y+9	; 0x09
    190a:	0e 94 9d 09 	call	0x133a	; 0x133a <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
    }
}
    190e:	df 91       	pop	r29
    1910:	cf 91       	pop	r28
    1912:	08 95       	ret

00001914 <_ZN6target6SystemC1ERN6driver13GpioInterfaceES3_RNS1_14TimerInterfaceES5_RNS1_15SerialInterfaceERNS1_17WatchdogInterfaceERNS1_15EepromInterfaceERNS1_12AdcInterfaceE>:
    /** Enabled state value in EEPROM. */
    static constexpr uint8_t enabled{1U};
};

// -----------------------------------------------------------------------------
System::System(driver::GpioInterface& led, driver::GpioInterface& button,
    1914:	6f 92       	push	r6
    1916:	7f 92       	push	r7
    1918:	8f 92       	push	r8
    191a:	9f 92       	push	r9
    191c:	af 92       	push	r10
    191e:	bf 92       	push	r11
    1920:	cf 92       	push	r12
    1922:	df 92       	push	r13
    1924:	ef 92       	push	r14
    1926:	ff 92       	push	r15
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	3c 01       	movw	r6, r24
    1936:	ca 01       	movw	r24, r20
    , myDebounceTimer{debounceTimer}
    , myToggleTimer{toggleTimer}
    , mySerial{serial}
    , myWatchdog{watchdog}
    , myEeprom{eeprom}
    , myAdc{adc}
    1938:	d3 01       	movw	r26, r6
    193a:	11 96       	adiw	r26, 0x01	; 1
    193c:	7c 93       	st	X, r23
    193e:	6e 93       	st	-X, r22
    1940:	13 96       	adiw	r26, 0x03	; 3
    1942:	5c 93       	st	X, r21
    1944:	4e 93       	st	-X, r20
    1946:	12 97       	sbiw	r26, 0x02	; 2
    1948:	15 96       	adiw	r26, 0x05	; 5
    194a:	3c 93       	st	X, r19
    194c:	2e 93       	st	-X, r18
    194e:	14 97       	sbiw	r26, 0x04	; 4
    1950:	17 96       	adiw	r26, 0x07	; 7
    1952:	1c 93       	st	X, r17
    1954:	0e 93       	st	-X, r16
    1956:	16 97       	sbiw	r26, 0x06	; 6
    1958:	19 96       	adiw	r26, 0x09	; 9
    195a:	fc 92       	st	X, r15
    195c:	ee 92       	st	-X, r14
    195e:	18 97       	sbiw	r26, 0x08	; 8
    1960:	1b 96       	adiw	r26, 0x0b	; 11
    1962:	dc 92       	st	X, r13
    1964:	ce 92       	st	-X, r12
    1966:	1a 97       	sbiw	r26, 0x0a	; 10
    1968:	1d 96       	adiw	r26, 0x0d	; 13
    196a:	bc 92       	st	X, r11
    196c:	ae 92       	st	-X, r10
    196e:	1c 97       	sbiw	r26, 0x0c	; 12
    1970:	1f 96       	adiw	r26, 0x0f	; 15
    1972:	9c 92       	st	X, r9
    1974:	8e 92       	st	-X, r8
    1976:	1e 97       	sbiw	r26, 0x0e	; 14
{
    myButton.enableInterrupt(true);
    1978:	da 01       	movw	r26, r20
    197a:	ed 91       	ld	r30, X+
    197c:	fc 91       	ld	r31, X
    197e:	04 84       	ldd	r0, Z+12	; 0x0c
    1980:	f5 85       	ldd	r31, Z+13	; 0x0d
    1982:	e0 2d       	mov	r30, r0
    1984:	61 e0       	ldi	r22, 0x01	; 1
    1986:	09 95       	icall
    mySerial.setEnabled(true);
    1988:	f3 01       	movw	r30, r6
    198a:	80 85       	ldd	r24, Z+8	; 0x08
    198c:	91 85       	ldd	r25, Z+9	; 0x09
    198e:	dc 01       	movw	r26, r24
    1990:	ed 91       	ld	r30, X+
    1992:	fc 91       	ld	r31, X
    1994:	02 84       	ldd	r0, Z+10	; 0x0a
    1996:	f3 85       	ldd	r31, Z+11	; 0x0b
    1998:	e0 2d       	mov	r30, r0
    199a:	61 e0       	ldi	r22, 0x01	; 1
    199c:	09 95       	icall
    myWatchdog.setEnabled(true);
    199e:	f3 01       	movw	r30, r6
    19a0:	82 85       	ldd	r24, Z+10	; 0x0a
    19a2:	93 85       	ldd	r25, Z+11	; 0x0b
    19a4:	dc 01       	movw	r26, r24
    19a6:	ed 91       	ld	r30, X+
    19a8:	fc 91       	ld	r31, X
    19aa:	00 84       	ldd	r0, Z+8	; 0x08
    19ac:	f1 85       	ldd	r31, Z+9	; 0x09
    19ae:	e0 2d       	mov	r30, r0
    19b0:	61 e0       	ldi	r22, 0x01	; 1
    19b2:	09 95       	icall
    myEeprom.setEnabled(true);
    19b4:	f3 01       	movw	r30, r6
    19b6:	84 85       	ldd	r24, Z+12	; 0x0c
    19b8:	95 85       	ldd	r25, Z+13	; 0x0d
    19ba:	dc 01       	movw	r26, r24
    19bc:	ed 91       	ld	r30, X+
    19be:	fc 91       	ld	r31, X
    19c0:	00 84       	ldd	r0, Z+8	; 0x08
    19c2:	f1 85       	ldd	r31, Z+9	; 0x09
    19c4:	e0 2d       	mov	r30, r0
    19c6:	61 e0       	ldi	r22, 0x01	; 1
    19c8:	09 95       	icall
    checkLedStateInEeprom();
    19ca:	c3 01       	movw	r24, r6
    19cc:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN6target6System21checkLedStateInEepromEv>
}
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	1f 91       	pop	r17
    19d6:	0f 91       	pop	r16
    19d8:	ff 90       	pop	r15
    19da:	ef 90       	pop	r14
    19dc:	df 90       	pop	r13
    19de:	cf 90       	pop	r12
    19e0:	bf 90       	pop	r11
    19e2:	af 90       	pop	r10
    19e4:	9f 90       	pop	r9
    19e6:	8f 90       	pop	r8
    19e8:	7f 90       	pop	r7
    19ea:	6f 90       	pop	r6
    19ec:	08 95       	ret

000019ee <_ZN5utils21globalInterruptEnableEv>:
        _delay_us(1U);
    }
}

// -----------------------------------------------------------------------------
void globalInterruptEnable() noexcept { asm("SEI"); }
    19ee:	78 94       	sei
    19f0:	08 95       	ret

000019f2 <_ZN5utils22globalInterruptDisableEv>:

// -----------------------------------------------------------------------------
void globalInterruptDisable() noexcept { asm("CLI"); }
    19f2:	f8 94       	cli
    19f4:	08 95       	ret

000019f6 <_ZdlPvj>:

/**
 * @note Definitions required to satisfy the linker when using C++ interfaces and static local 
 *       variables in embedded projects. 
 */
void operator delete(void*, unsigned int) noexcept {}
    19f6:	08 95       	ret

000019f8 <__cxa_pure_virtual>:
extern "C" void __cxa_pure_virtual() {}
    19f8:	08 95       	ret

000019fa <__cxa_guard_acquire>:
extern "C" int __cxa_guard_acquire (volatile void *g) { return !*(char *)g; }
    19fa:	fc 01       	movw	r30, r24
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	20 81       	ld	r18, Z
    1a02:	22 23       	and	r18, r18
    1a04:	11 f0       	breq	.+4      	; 0x1a0a <__cxa_guard_acquire+0x10>
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	08 95       	ret

00001a0c <__cxa_guard_release>:
extern "C" void __cxa_guard_release (volatile void *g) { *(char *)g = 1; }
    1a0c:	21 e0       	ldi	r18, 0x01	; 1
    1a0e:	fc 01       	movw	r30, r24
    1a10:	20 83       	st	Z, r18
    1a12:	08 95       	ret

00001a14 <__subsf3>:
    1a14:	50 58       	subi	r21, 0x80	; 128

00001a16 <__addsf3>:
    1a16:	bb 27       	eor	r27, r27
    1a18:	aa 27       	eor	r26, r26
    1a1a:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__addsf3x>
    1a1e:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__fp_round>
    1a22:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__fp_pscA>
    1a26:	38 f0       	brcs	.+14     	; 0x1a36 <__addsf3+0x20>
    1a28:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__fp_pscB>
    1a2c:	20 f0       	brcs	.+8      	; 0x1a36 <__addsf3+0x20>
    1a2e:	39 f4       	brne	.+14     	; 0x1a3e <__addsf3+0x28>
    1a30:	9f 3f       	cpi	r25, 0xFF	; 255
    1a32:	19 f4       	brne	.+6      	; 0x1a3a <__addsf3+0x24>
    1a34:	26 f4       	brtc	.+8      	; 0x1a3e <__addsf3+0x28>
    1a36:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__fp_nan>
    1a3a:	0e f4       	brtc	.+2      	; 0x1a3e <__addsf3+0x28>
    1a3c:	e0 95       	com	r30
    1a3e:	e7 fb       	bst	r30, 7
    1a40:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__fp_inf>

00001a44 <__addsf3x>:
    1a44:	e9 2f       	mov	r30, r25
    1a46:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__fp_split3>
    1a4a:	58 f3       	brcs	.-42     	; 0x1a22 <__addsf3+0xc>
    1a4c:	ba 17       	cp	r27, r26
    1a4e:	62 07       	cpc	r22, r18
    1a50:	73 07       	cpc	r23, r19
    1a52:	84 07       	cpc	r24, r20
    1a54:	95 07       	cpc	r25, r21
    1a56:	20 f0       	brcs	.+8      	; 0x1a60 <__addsf3x+0x1c>
    1a58:	79 f4       	brne	.+30     	; 0x1a78 <__addsf3x+0x34>
    1a5a:	a6 f5       	brtc	.+104    	; 0x1ac4 <__addsf3x+0x80>
    1a5c:	0c 94 9f 0e 	jmp	0x1d3e	; 0x1d3e <__fp_zero>
    1a60:	0e f4       	brtc	.+2      	; 0x1a64 <__addsf3x+0x20>
    1a62:	e0 95       	com	r30
    1a64:	0b 2e       	mov	r0, r27
    1a66:	ba 2f       	mov	r27, r26
    1a68:	a0 2d       	mov	r26, r0
    1a6a:	0b 01       	movw	r0, r22
    1a6c:	b9 01       	movw	r22, r18
    1a6e:	90 01       	movw	r18, r0
    1a70:	0c 01       	movw	r0, r24
    1a72:	ca 01       	movw	r24, r20
    1a74:	a0 01       	movw	r20, r0
    1a76:	11 24       	eor	r1, r1
    1a78:	ff 27       	eor	r31, r31
    1a7a:	59 1b       	sub	r21, r25
    1a7c:	99 f0       	breq	.+38     	; 0x1aa4 <__addsf3x+0x60>
    1a7e:	59 3f       	cpi	r21, 0xF9	; 249
    1a80:	50 f4       	brcc	.+20     	; 0x1a96 <__addsf3x+0x52>
    1a82:	50 3e       	cpi	r21, 0xE0	; 224
    1a84:	68 f1       	brcs	.+90     	; 0x1ae0 <__addsf3x+0x9c>
    1a86:	1a 16       	cp	r1, r26
    1a88:	f0 40       	sbci	r31, 0x00	; 0
    1a8a:	a2 2f       	mov	r26, r18
    1a8c:	23 2f       	mov	r18, r19
    1a8e:	34 2f       	mov	r19, r20
    1a90:	44 27       	eor	r20, r20
    1a92:	58 5f       	subi	r21, 0xF8	; 248
    1a94:	f3 cf       	rjmp	.-26     	; 0x1a7c <__addsf3x+0x38>
    1a96:	46 95       	lsr	r20
    1a98:	37 95       	ror	r19
    1a9a:	27 95       	ror	r18
    1a9c:	a7 95       	ror	r26
    1a9e:	f0 40       	sbci	r31, 0x00	; 0
    1aa0:	53 95       	inc	r21
    1aa2:	c9 f7       	brne	.-14     	; 0x1a96 <__addsf3x+0x52>
    1aa4:	7e f4       	brtc	.+30     	; 0x1ac4 <__addsf3x+0x80>
    1aa6:	1f 16       	cp	r1, r31
    1aa8:	ba 0b       	sbc	r27, r26
    1aaa:	62 0b       	sbc	r22, r18
    1aac:	73 0b       	sbc	r23, r19
    1aae:	84 0b       	sbc	r24, r20
    1ab0:	ba f0       	brmi	.+46     	; 0x1ae0 <__addsf3x+0x9c>
    1ab2:	91 50       	subi	r25, 0x01	; 1
    1ab4:	a1 f0       	breq	.+40     	; 0x1ade <__addsf3x+0x9a>
    1ab6:	ff 0f       	add	r31, r31
    1ab8:	bb 1f       	adc	r27, r27
    1aba:	66 1f       	adc	r22, r22
    1abc:	77 1f       	adc	r23, r23
    1abe:	88 1f       	adc	r24, r24
    1ac0:	c2 f7       	brpl	.-16     	; 0x1ab2 <__addsf3x+0x6e>
    1ac2:	0e c0       	rjmp	.+28     	; 0x1ae0 <__addsf3x+0x9c>
    1ac4:	ba 0f       	add	r27, r26
    1ac6:	62 1f       	adc	r22, r18
    1ac8:	73 1f       	adc	r23, r19
    1aca:	84 1f       	adc	r24, r20
    1acc:	48 f4       	brcc	.+18     	; 0x1ae0 <__addsf3x+0x9c>
    1ace:	87 95       	ror	r24
    1ad0:	77 95       	ror	r23
    1ad2:	67 95       	ror	r22
    1ad4:	b7 95       	ror	r27
    1ad6:	f7 95       	ror	r31
    1ad8:	9e 3f       	cpi	r25, 0xFE	; 254
    1ada:	08 f0       	brcs	.+2      	; 0x1ade <__addsf3x+0x9a>
    1adc:	b0 cf       	rjmp	.-160    	; 0x1a3e <__addsf3+0x28>
    1ade:	93 95       	inc	r25
    1ae0:	88 0f       	add	r24, r24
    1ae2:	08 f0       	brcs	.+2      	; 0x1ae6 <__addsf3x+0xa2>
    1ae4:	99 27       	eor	r25, r25
    1ae6:	ee 0f       	add	r30, r30
    1ae8:	97 95       	ror	r25
    1aea:	87 95       	ror	r24
    1aec:	08 95       	ret

00001aee <__divsf3>:
    1aee:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__divsf3x>
    1af2:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__fp_round>
    1af6:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__fp_pscB>
    1afa:	58 f0       	brcs	.+22     	; 0x1b12 <__divsf3+0x24>
    1afc:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__fp_pscA>
    1b00:	40 f0       	brcs	.+16     	; 0x1b12 <__divsf3+0x24>
    1b02:	29 f4       	brne	.+10     	; 0x1b0e <__divsf3+0x20>
    1b04:	5f 3f       	cpi	r21, 0xFF	; 255
    1b06:	29 f0       	breq	.+10     	; 0x1b12 <__divsf3+0x24>
    1b08:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__fp_inf>
    1b0c:	51 11       	cpse	r21, r1
    1b0e:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__fp_szero>
    1b12:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__fp_nan>

00001b16 <__divsf3x>:
    1b16:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__fp_split3>
    1b1a:	68 f3       	brcs	.-38     	; 0x1af6 <__divsf3+0x8>

00001b1c <__divsf3_pse>:
    1b1c:	99 23       	and	r25, r25
    1b1e:	b1 f3       	breq	.-20     	; 0x1b0c <__divsf3+0x1e>
    1b20:	55 23       	and	r21, r21
    1b22:	91 f3       	breq	.-28     	; 0x1b08 <__divsf3+0x1a>
    1b24:	95 1b       	sub	r25, r21
    1b26:	55 0b       	sbc	r21, r21
    1b28:	bb 27       	eor	r27, r27
    1b2a:	aa 27       	eor	r26, r26
    1b2c:	62 17       	cp	r22, r18
    1b2e:	73 07       	cpc	r23, r19
    1b30:	84 07       	cpc	r24, r20
    1b32:	38 f0       	brcs	.+14     	; 0x1b42 <__divsf3_pse+0x26>
    1b34:	9f 5f       	subi	r25, 0xFF	; 255
    1b36:	5f 4f       	sbci	r21, 0xFF	; 255
    1b38:	22 0f       	add	r18, r18
    1b3a:	33 1f       	adc	r19, r19
    1b3c:	44 1f       	adc	r20, r20
    1b3e:	aa 1f       	adc	r26, r26
    1b40:	a9 f3       	breq	.-22     	; 0x1b2c <__divsf3_pse+0x10>
    1b42:	35 d0       	rcall	.+106    	; 0x1bae <__divsf3_pse+0x92>
    1b44:	0e 2e       	mov	r0, r30
    1b46:	3a f0       	brmi	.+14     	; 0x1b56 <__divsf3_pse+0x3a>
    1b48:	e0 e8       	ldi	r30, 0x80	; 128
    1b4a:	32 d0       	rcall	.+100    	; 0x1bb0 <__divsf3_pse+0x94>
    1b4c:	91 50       	subi	r25, 0x01	; 1
    1b4e:	50 40       	sbci	r21, 0x00	; 0
    1b50:	e6 95       	lsr	r30
    1b52:	00 1c       	adc	r0, r0
    1b54:	ca f7       	brpl	.-14     	; 0x1b48 <__divsf3_pse+0x2c>
    1b56:	2b d0       	rcall	.+86     	; 0x1bae <__divsf3_pse+0x92>
    1b58:	fe 2f       	mov	r31, r30
    1b5a:	29 d0       	rcall	.+82     	; 0x1bae <__divsf3_pse+0x92>
    1b5c:	66 0f       	add	r22, r22
    1b5e:	77 1f       	adc	r23, r23
    1b60:	88 1f       	adc	r24, r24
    1b62:	bb 1f       	adc	r27, r27
    1b64:	26 17       	cp	r18, r22
    1b66:	37 07       	cpc	r19, r23
    1b68:	48 07       	cpc	r20, r24
    1b6a:	ab 07       	cpc	r26, r27
    1b6c:	b0 e8       	ldi	r27, 0x80	; 128
    1b6e:	09 f0       	breq	.+2      	; 0x1b72 <__divsf3_pse+0x56>
    1b70:	bb 0b       	sbc	r27, r27
    1b72:	80 2d       	mov	r24, r0
    1b74:	bf 01       	movw	r22, r30
    1b76:	ff 27       	eor	r31, r31
    1b78:	93 58       	subi	r25, 0x83	; 131
    1b7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b7c:	3a f0       	brmi	.+14     	; 0x1b8c <__divsf3_pse+0x70>
    1b7e:	9e 3f       	cpi	r25, 0xFE	; 254
    1b80:	51 05       	cpc	r21, r1
    1b82:	78 f0       	brcs	.+30     	; 0x1ba2 <__divsf3_pse+0x86>
    1b84:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__fp_inf>
    1b88:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__fp_szero>
    1b8c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b8e:	e4 f3       	brlt	.-8      	; 0x1b88 <__divsf3_pse+0x6c>
    1b90:	98 3e       	cpi	r25, 0xE8	; 232
    1b92:	d4 f3       	brlt	.-12     	; 0x1b88 <__divsf3_pse+0x6c>
    1b94:	86 95       	lsr	r24
    1b96:	77 95       	ror	r23
    1b98:	67 95       	ror	r22
    1b9a:	b7 95       	ror	r27
    1b9c:	f7 95       	ror	r31
    1b9e:	9f 5f       	subi	r25, 0xFF	; 255
    1ba0:	c9 f7       	brne	.-14     	; 0x1b94 <__divsf3_pse+0x78>
    1ba2:	88 0f       	add	r24, r24
    1ba4:	91 1d       	adc	r25, r1
    1ba6:	96 95       	lsr	r25
    1ba8:	87 95       	ror	r24
    1baa:	97 f9       	bld	r25, 7
    1bac:	08 95       	ret
    1bae:	e1 e0       	ldi	r30, 0x01	; 1
    1bb0:	66 0f       	add	r22, r22
    1bb2:	77 1f       	adc	r23, r23
    1bb4:	88 1f       	adc	r24, r24
    1bb6:	bb 1f       	adc	r27, r27
    1bb8:	62 17       	cp	r22, r18
    1bba:	73 07       	cpc	r23, r19
    1bbc:	84 07       	cpc	r24, r20
    1bbe:	ba 07       	cpc	r27, r26
    1bc0:	20 f0       	brcs	.+8      	; 0x1bca <__divsf3_pse+0xae>
    1bc2:	62 1b       	sub	r22, r18
    1bc4:	73 0b       	sbc	r23, r19
    1bc6:	84 0b       	sbc	r24, r20
    1bc8:	ba 0b       	sbc	r27, r26
    1bca:	ee 1f       	adc	r30, r30
    1bcc:	88 f7       	brcc	.-30     	; 0x1bb0 <__divsf3_pse+0x94>
    1bce:	e0 95       	com	r30
    1bd0:	08 95       	ret

00001bd2 <__fixunssfsi>:
    1bd2:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__fp_splitA>
    1bd6:	88 f0       	brcs	.+34     	; 0x1bfa <__fixunssfsi+0x28>
    1bd8:	9f 57       	subi	r25, 0x7F	; 127
    1bda:	98 f0       	brcs	.+38     	; 0x1c02 <__fixunssfsi+0x30>
    1bdc:	b9 2f       	mov	r27, r25
    1bde:	99 27       	eor	r25, r25
    1be0:	b7 51       	subi	r27, 0x17	; 23
    1be2:	b0 f0       	brcs	.+44     	; 0x1c10 <__fixunssfsi+0x3e>
    1be4:	e1 f0       	breq	.+56     	; 0x1c1e <__fixunssfsi+0x4c>
    1be6:	66 0f       	add	r22, r22
    1be8:	77 1f       	adc	r23, r23
    1bea:	88 1f       	adc	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	1a f0       	brmi	.+6      	; 0x1bf6 <__fixunssfsi+0x24>
    1bf0:	ba 95       	dec	r27
    1bf2:	c9 f7       	brne	.-14     	; 0x1be6 <__fixunssfsi+0x14>
    1bf4:	14 c0       	rjmp	.+40     	; 0x1c1e <__fixunssfsi+0x4c>
    1bf6:	b1 30       	cpi	r27, 0x01	; 1
    1bf8:	91 f0       	breq	.+36     	; 0x1c1e <__fixunssfsi+0x4c>
    1bfa:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fp_zero>
    1bfe:	b1 e0       	ldi	r27, 0x01	; 1
    1c00:	08 95       	ret
    1c02:	0c 94 9f 0e 	jmp	0x1d3e	; 0x1d3e <__fp_zero>
    1c06:	67 2f       	mov	r22, r23
    1c08:	78 2f       	mov	r23, r24
    1c0a:	88 27       	eor	r24, r24
    1c0c:	b8 5f       	subi	r27, 0xF8	; 248
    1c0e:	39 f0       	breq	.+14     	; 0x1c1e <__fixunssfsi+0x4c>
    1c10:	b9 3f       	cpi	r27, 0xF9	; 249
    1c12:	cc f3       	brlt	.-14     	; 0x1c06 <__fixunssfsi+0x34>
    1c14:	86 95       	lsr	r24
    1c16:	77 95       	ror	r23
    1c18:	67 95       	ror	r22
    1c1a:	b3 95       	inc	r27
    1c1c:	d9 f7       	brne	.-10     	; 0x1c14 <__fixunssfsi+0x42>
    1c1e:	3e f4       	brtc	.+14     	; 0x1c2e <__fixunssfsi+0x5c>
    1c20:	90 95       	com	r25
    1c22:	80 95       	com	r24
    1c24:	70 95       	com	r23
    1c26:	61 95       	neg	r22
    1c28:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2e:	08 95       	ret

00001c30 <__floatunsisf>:
    1c30:	e8 94       	clt
    1c32:	09 c0       	rjmp	.+18     	; 0x1c46 <__floatsisf+0x12>

00001c34 <__floatsisf>:
    1c34:	97 fb       	bst	r25, 7
    1c36:	3e f4       	brtc	.+14     	; 0x1c46 <__floatsisf+0x12>
    1c38:	90 95       	com	r25
    1c3a:	80 95       	com	r24
    1c3c:	70 95       	com	r23
    1c3e:	61 95       	neg	r22
    1c40:	7f 4f       	sbci	r23, 0xFF	; 255
    1c42:	8f 4f       	sbci	r24, 0xFF	; 255
    1c44:	9f 4f       	sbci	r25, 0xFF	; 255
    1c46:	99 23       	and	r25, r25
    1c48:	a9 f0       	breq	.+42     	; 0x1c74 <__floatsisf+0x40>
    1c4a:	f9 2f       	mov	r31, r25
    1c4c:	96 e9       	ldi	r25, 0x96	; 150
    1c4e:	bb 27       	eor	r27, r27
    1c50:	93 95       	inc	r25
    1c52:	f6 95       	lsr	r31
    1c54:	87 95       	ror	r24
    1c56:	77 95       	ror	r23
    1c58:	67 95       	ror	r22
    1c5a:	b7 95       	ror	r27
    1c5c:	f1 11       	cpse	r31, r1
    1c5e:	f8 cf       	rjmp	.-16     	; 0x1c50 <__floatsisf+0x1c>
    1c60:	fa f4       	brpl	.+62     	; 0x1ca0 <__floatsisf+0x6c>
    1c62:	bb 0f       	add	r27, r27
    1c64:	11 f4       	brne	.+4      	; 0x1c6a <__floatsisf+0x36>
    1c66:	60 ff       	sbrs	r22, 0
    1c68:	1b c0       	rjmp	.+54     	; 0x1ca0 <__floatsisf+0x6c>
    1c6a:	6f 5f       	subi	r22, 0xFF	; 255
    1c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c70:	9f 4f       	sbci	r25, 0xFF	; 255
    1c72:	16 c0       	rjmp	.+44     	; 0x1ca0 <__floatsisf+0x6c>
    1c74:	88 23       	and	r24, r24
    1c76:	11 f0       	breq	.+4      	; 0x1c7c <__floatsisf+0x48>
    1c78:	96 e9       	ldi	r25, 0x96	; 150
    1c7a:	11 c0       	rjmp	.+34     	; 0x1c9e <__floatsisf+0x6a>
    1c7c:	77 23       	and	r23, r23
    1c7e:	21 f0       	breq	.+8      	; 0x1c88 <__floatsisf+0x54>
    1c80:	9e e8       	ldi	r25, 0x8E	; 142
    1c82:	87 2f       	mov	r24, r23
    1c84:	76 2f       	mov	r23, r22
    1c86:	05 c0       	rjmp	.+10     	; 0x1c92 <__floatsisf+0x5e>
    1c88:	66 23       	and	r22, r22
    1c8a:	71 f0       	breq	.+28     	; 0x1ca8 <__floatsisf+0x74>
    1c8c:	96 e8       	ldi	r25, 0x86	; 134
    1c8e:	86 2f       	mov	r24, r22
    1c90:	70 e0       	ldi	r23, 0x00	; 0
    1c92:	60 e0       	ldi	r22, 0x00	; 0
    1c94:	2a f0       	brmi	.+10     	; 0x1ca0 <__floatsisf+0x6c>
    1c96:	9a 95       	dec	r25
    1c98:	66 0f       	add	r22, r22
    1c9a:	77 1f       	adc	r23, r23
    1c9c:	88 1f       	adc	r24, r24
    1c9e:	da f7       	brpl	.-10     	; 0x1c96 <__floatsisf+0x62>
    1ca0:	88 0f       	add	r24, r24
    1ca2:	96 95       	lsr	r25
    1ca4:	87 95       	ror	r24
    1ca6:	97 f9       	bld	r25, 7
    1ca8:	08 95       	ret

00001caa <__fp_inf>:
    1caa:	97 f9       	bld	r25, 7
    1cac:	9f 67       	ori	r25, 0x7F	; 127
    1cae:	80 e8       	ldi	r24, 0x80	; 128
    1cb0:	70 e0       	ldi	r23, 0x00	; 0
    1cb2:	60 e0       	ldi	r22, 0x00	; 0
    1cb4:	08 95       	ret

00001cb6 <__fp_nan>:
    1cb6:	9f ef       	ldi	r25, 0xFF	; 255
    1cb8:	80 ec       	ldi	r24, 0xC0	; 192
    1cba:	08 95       	ret

00001cbc <__fp_pscA>:
    1cbc:	00 24       	eor	r0, r0
    1cbe:	0a 94       	dec	r0
    1cc0:	16 16       	cp	r1, r22
    1cc2:	17 06       	cpc	r1, r23
    1cc4:	18 06       	cpc	r1, r24
    1cc6:	09 06       	cpc	r0, r25
    1cc8:	08 95       	ret

00001cca <__fp_pscB>:
    1cca:	00 24       	eor	r0, r0
    1ccc:	0a 94       	dec	r0
    1cce:	12 16       	cp	r1, r18
    1cd0:	13 06       	cpc	r1, r19
    1cd2:	14 06       	cpc	r1, r20
    1cd4:	05 06       	cpc	r0, r21
    1cd6:	08 95       	ret

00001cd8 <__fp_round>:
    1cd8:	09 2e       	mov	r0, r25
    1cda:	03 94       	inc	r0
    1cdc:	00 0c       	add	r0, r0
    1cde:	11 f4       	brne	.+4      	; 0x1ce4 <__fp_round+0xc>
    1ce0:	88 23       	and	r24, r24
    1ce2:	52 f0       	brmi	.+20     	; 0x1cf8 <__fp_round+0x20>
    1ce4:	bb 0f       	add	r27, r27
    1ce6:	40 f4       	brcc	.+16     	; 0x1cf8 <__fp_round+0x20>
    1ce8:	bf 2b       	or	r27, r31
    1cea:	11 f4       	brne	.+4      	; 0x1cf0 <__fp_round+0x18>
    1cec:	60 ff       	sbrs	r22, 0
    1cee:	04 c0       	rjmp	.+8      	; 0x1cf8 <__fp_round+0x20>
    1cf0:	6f 5f       	subi	r22, 0xFF	; 255
    1cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf4:	8f 4f       	sbci	r24, 0xFF	; 255
    1cf6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf8:	08 95       	ret

00001cfa <__fp_split3>:
    1cfa:	57 fd       	sbrc	r21, 7
    1cfc:	90 58       	subi	r25, 0x80	; 128
    1cfe:	44 0f       	add	r20, r20
    1d00:	55 1f       	adc	r21, r21
    1d02:	59 f0       	breq	.+22     	; 0x1d1a <__fp_splitA+0x10>
    1d04:	5f 3f       	cpi	r21, 0xFF	; 255
    1d06:	71 f0       	breq	.+28     	; 0x1d24 <__fp_splitA+0x1a>
    1d08:	47 95       	ror	r20

00001d0a <__fp_splitA>:
    1d0a:	88 0f       	add	r24, r24
    1d0c:	97 fb       	bst	r25, 7
    1d0e:	99 1f       	adc	r25, r25
    1d10:	61 f0       	breq	.+24     	; 0x1d2a <__fp_splitA+0x20>
    1d12:	9f 3f       	cpi	r25, 0xFF	; 255
    1d14:	79 f0       	breq	.+30     	; 0x1d34 <__fp_splitA+0x2a>
    1d16:	87 95       	ror	r24
    1d18:	08 95       	ret
    1d1a:	12 16       	cp	r1, r18
    1d1c:	13 06       	cpc	r1, r19
    1d1e:	14 06       	cpc	r1, r20
    1d20:	55 1f       	adc	r21, r21
    1d22:	f2 cf       	rjmp	.-28     	; 0x1d08 <__fp_split3+0xe>
    1d24:	46 95       	lsr	r20
    1d26:	f1 df       	rcall	.-30     	; 0x1d0a <__fp_splitA>
    1d28:	08 c0       	rjmp	.+16     	; 0x1d3a <__fp_splitA+0x30>
    1d2a:	16 16       	cp	r1, r22
    1d2c:	17 06       	cpc	r1, r23
    1d2e:	18 06       	cpc	r1, r24
    1d30:	99 1f       	adc	r25, r25
    1d32:	f1 cf       	rjmp	.-30     	; 0x1d16 <__fp_splitA+0xc>
    1d34:	86 95       	lsr	r24
    1d36:	71 05       	cpc	r23, r1
    1d38:	61 05       	cpc	r22, r1
    1d3a:	08 94       	sec
    1d3c:	08 95       	ret

00001d3e <__fp_zero>:
    1d3e:	e8 94       	clt

00001d40 <__fp_szero>:
    1d40:	bb 27       	eor	r27, r27
    1d42:	66 27       	eor	r22, r22
    1d44:	77 27       	eor	r23, r23
    1d46:	cb 01       	movw	r24, r22
    1d48:	97 f9       	bld	r25, 7
    1d4a:	08 95       	ret

00001d4c <__mulsf3>:
    1d4c:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__mulsf3x>
    1d50:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__fp_round>
    1d54:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__fp_pscA>
    1d58:	38 f0       	brcs	.+14     	; 0x1d68 <__mulsf3+0x1c>
    1d5a:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__fp_pscB>
    1d5e:	20 f0       	brcs	.+8      	; 0x1d68 <__mulsf3+0x1c>
    1d60:	95 23       	and	r25, r21
    1d62:	11 f0       	breq	.+4      	; 0x1d68 <__mulsf3+0x1c>
    1d64:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__fp_inf>
    1d68:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__fp_nan>
    1d6c:	11 24       	eor	r1, r1
    1d6e:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__fp_szero>

00001d72 <__mulsf3x>:
    1d72:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__fp_split3>
    1d76:	70 f3       	brcs	.-36     	; 0x1d54 <__mulsf3+0x8>

00001d78 <__mulsf3_pse>:
    1d78:	95 9f       	mul	r25, r21
    1d7a:	c1 f3       	breq	.-16     	; 0x1d6c <__mulsf3+0x20>
    1d7c:	95 0f       	add	r25, r21
    1d7e:	50 e0       	ldi	r21, 0x00	; 0
    1d80:	55 1f       	adc	r21, r21
    1d82:	62 9f       	mul	r22, r18
    1d84:	f0 01       	movw	r30, r0
    1d86:	72 9f       	mul	r23, r18
    1d88:	bb 27       	eor	r27, r27
    1d8a:	f0 0d       	add	r31, r0
    1d8c:	b1 1d       	adc	r27, r1
    1d8e:	63 9f       	mul	r22, r19
    1d90:	aa 27       	eor	r26, r26
    1d92:	f0 0d       	add	r31, r0
    1d94:	b1 1d       	adc	r27, r1
    1d96:	aa 1f       	adc	r26, r26
    1d98:	64 9f       	mul	r22, r20
    1d9a:	66 27       	eor	r22, r22
    1d9c:	b0 0d       	add	r27, r0
    1d9e:	a1 1d       	adc	r26, r1
    1da0:	66 1f       	adc	r22, r22
    1da2:	82 9f       	mul	r24, r18
    1da4:	22 27       	eor	r18, r18
    1da6:	b0 0d       	add	r27, r0
    1da8:	a1 1d       	adc	r26, r1
    1daa:	62 1f       	adc	r22, r18
    1dac:	73 9f       	mul	r23, r19
    1dae:	b0 0d       	add	r27, r0
    1db0:	a1 1d       	adc	r26, r1
    1db2:	62 1f       	adc	r22, r18
    1db4:	83 9f       	mul	r24, r19
    1db6:	a0 0d       	add	r26, r0
    1db8:	61 1d       	adc	r22, r1
    1dba:	22 1f       	adc	r18, r18
    1dbc:	74 9f       	mul	r23, r20
    1dbe:	33 27       	eor	r19, r19
    1dc0:	a0 0d       	add	r26, r0
    1dc2:	61 1d       	adc	r22, r1
    1dc4:	23 1f       	adc	r18, r19
    1dc6:	84 9f       	mul	r24, r20
    1dc8:	60 0d       	add	r22, r0
    1dca:	21 1d       	adc	r18, r1
    1dcc:	82 2f       	mov	r24, r18
    1dce:	76 2f       	mov	r23, r22
    1dd0:	6a 2f       	mov	r22, r26
    1dd2:	11 24       	eor	r1, r1
    1dd4:	9f 57       	subi	r25, 0x7F	; 127
    1dd6:	50 40       	sbci	r21, 0x00	; 0
    1dd8:	9a f0       	brmi	.+38     	; 0x1e00 <__mulsf3_pse+0x88>
    1dda:	f1 f0       	breq	.+60     	; 0x1e18 <__mulsf3_pse+0xa0>
    1ddc:	88 23       	and	r24, r24
    1dde:	4a f0       	brmi	.+18     	; 0x1df2 <__mulsf3_pse+0x7a>
    1de0:	ee 0f       	add	r30, r30
    1de2:	ff 1f       	adc	r31, r31
    1de4:	bb 1f       	adc	r27, r27
    1de6:	66 1f       	adc	r22, r22
    1de8:	77 1f       	adc	r23, r23
    1dea:	88 1f       	adc	r24, r24
    1dec:	91 50       	subi	r25, 0x01	; 1
    1dee:	50 40       	sbci	r21, 0x00	; 0
    1df0:	a9 f7       	brne	.-22     	; 0x1ddc <__mulsf3_pse+0x64>
    1df2:	9e 3f       	cpi	r25, 0xFE	; 254
    1df4:	51 05       	cpc	r21, r1
    1df6:	80 f0       	brcs	.+32     	; 0x1e18 <__mulsf3_pse+0xa0>
    1df8:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__fp_inf>
    1dfc:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__fp_szero>
    1e00:	5f 3f       	cpi	r21, 0xFF	; 255
    1e02:	e4 f3       	brlt	.-8      	; 0x1dfc <__mulsf3_pse+0x84>
    1e04:	98 3e       	cpi	r25, 0xE8	; 232
    1e06:	d4 f3       	brlt	.-12     	; 0x1dfc <__mulsf3_pse+0x84>
    1e08:	86 95       	lsr	r24
    1e0a:	77 95       	ror	r23
    1e0c:	67 95       	ror	r22
    1e0e:	b7 95       	ror	r27
    1e10:	f7 95       	ror	r31
    1e12:	e7 95       	ror	r30
    1e14:	9f 5f       	subi	r25, 0xFF	; 255
    1e16:	c1 f7       	brne	.-16     	; 0x1e08 <__mulsf3_pse+0x90>
    1e18:	fe 2b       	or	r31, r30
    1e1a:	88 0f       	add	r24, r24
    1e1c:	91 1d       	adc	r25, r1
    1e1e:	96 95       	lsr	r25
    1e20:	87 95       	ror	r24
    1e22:	97 f9       	bld	r25, 7
    1e24:	08 95       	ret

00001e26 <__ashldi3>:
    1e26:	0f 93       	push	r16
    1e28:	08 30       	cpi	r16, 0x08	; 8
    1e2a:	90 f0       	brcs	.+36     	; 0x1e50 <__ashldi3+0x2a>
    1e2c:	98 2f       	mov	r25, r24
    1e2e:	87 2f       	mov	r24, r23
    1e30:	76 2f       	mov	r23, r22
    1e32:	65 2f       	mov	r22, r21
    1e34:	54 2f       	mov	r21, r20
    1e36:	43 2f       	mov	r20, r19
    1e38:	32 2f       	mov	r19, r18
    1e3a:	22 27       	eor	r18, r18
    1e3c:	08 50       	subi	r16, 0x08	; 8
    1e3e:	f4 cf       	rjmp	.-24     	; 0x1e28 <__ashldi3+0x2>
    1e40:	22 0f       	add	r18, r18
    1e42:	33 1f       	adc	r19, r19
    1e44:	44 1f       	adc	r20, r20
    1e46:	55 1f       	adc	r21, r21
    1e48:	66 1f       	adc	r22, r22
    1e4a:	77 1f       	adc	r23, r23
    1e4c:	88 1f       	adc	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	0a 95       	dec	r16
    1e52:	b2 f7       	brpl	.-20     	; 0x1e40 <__ashldi3+0x1a>
    1e54:	0f 91       	pop	r16
    1e56:	08 95       	ret

00001e58 <__ashrdi3>:
    1e58:	97 fb       	bst	r25, 7
    1e5a:	10 f8       	bld	r1, 0

00001e5c <__lshrdi3>:
    1e5c:	16 94       	lsr	r1
    1e5e:	00 08       	sbc	r0, r0
    1e60:	0f 93       	push	r16
    1e62:	08 30       	cpi	r16, 0x08	; 8
    1e64:	98 f0       	brcs	.+38     	; 0x1e8c <__lshrdi3+0x30>
    1e66:	08 50       	subi	r16, 0x08	; 8
    1e68:	23 2f       	mov	r18, r19
    1e6a:	34 2f       	mov	r19, r20
    1e6c:	45 2f       	mov	r20, r21
    1e6e:	56 2f       	mov	r21, r22
    1e70:	67 2f       	mov	r22, r23
    1e72:	78 2f       	mov	r23, r24
    1e74:	89 2f       	mov	r24, r25
    1e76:	90 2d       	mov	r25, r0
    1e78:	f4 cf       	rjmp	.-24     	; 0x1e62 <__lshrdi3+0x6>
    1e7a:	05 94       	asr	r0
    1e7c:	97 95       	ror	r25
    1e7e:	87 95       	ror	r24
    1e80:	77 95       	ror	r23
    1e82:	67 95       	ror	r22
    1e84:	57 95       	ror	r21
    1e86:	47 95       	ror	r20
    1e88:	37 95       	ror	r19
    1e8a:	27 95       	ror	r18
    1e8c:	0a 95       	dec	r16
    1e8e:	aa f7       	brpl	.-22     	; 0x1e7a <__lshrdi3+0x1e>
    1e90:	0f 91       	pop	r16
    1e92:	08 95       	ret

00001e94 <__cmpdi2_s8>:
    1e94:	00 24       	eor	r0, r0
    1e96:	a7 fd       	sbrc	r26, 7
    1e98:	00 94       	com	r0
    1e9a:	2a 17       	cp	r18, r26
    1e9c:	30 05       	cpc	r19, r0
    1e9e:	40 05       	cpc	r20, r0
    1ea0:	50 05       	cpc	r21, r0
    1ea2:	60 05       	cpc	r22, r0
    1ea4:	70 05       	cpc	r23, r0
    1ea6:	80 05       	cpc	r24, r0
    1ea8:	90 05       	cpc	r25, r0
    1eaa:	08 95       	ret

00001eac <__tablejump2__>:
    1eac:	ee 0f       	add	r30, r30
    1eae:	ff 1f       	adc	r31, r31
    1eb0:	05 90       	lpm	r0, Z+
    1eb2:	f4 91       	lpm	r31, Z
    1eb4:	e0 2d       	mov	r30, r0
    1eb6:	09 94       	ijmp

00001eb8 <malloc>:
    1eb8:	0f 93       	push	r16
    1eba:	1f 93       	push	r17
    1ebc:	cf 93       	push	r28
    1ebe:	df 93       	push	r29
    1ec0:	82 30       	cpi	r24, 0x02	; 2
    1ec2:	91 05       	cpc	r25, r1
    1ec4:	10 f4       	brcc	.+4      	; 0x1eca <malloc+0x12>
    1ec6:	82 e0       	ldi	r24, 0x02	; 2
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	e0 91 fa 02 	lds	r30, 0x02FA	; 0x8002fa <__flp>
    1ece:	f0 91 fb 02 	lds	r31, 0x02FB	; 0x8002fb <__flp+0x1>
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	a0 e0       	ldi	r26, 0x00	; 0
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	30 97       	sbiw	r30, 0x00	; 0
    1edc:	19 f1       	breq	.+70     	; 0x1f24 <malloc+0x6c>
    1ede:	40 81       	ld	r20, Z
    1ee0:	51 81       	ldd	r21, Z+1	; 0x01
    1ee2:	02 81       	ldd	r16, Z+2	; 0x02
    1ee4:	13 81       	ldd	r17, Z+3	; 0x03
    1ee6:	48 17       	cp	r20, r24
    1ee8:	59 07       	cpc	r21, r25
    1eea:	c8 f0       	brcs	.+50     	; 0x1f1e <malloc+0x66>
    1eec:	84 17       	cp	r24, r20
    1eee:	95 07       	cpc	r25, r21
    1ef0:	69 f4       	brne	.+26     	; 0x1f0c <malloc+0x54>
    1ef2:	10 97       	sbiw	r26, 0x00	; 0
    1ef4:	31 f0       	breq	.+12     	; 0x1f02 <malloc+0x4a>
    1ef6:	12 96       	adiw	r26, 0x02	; 2
    1ef8:	0c 93       	st	X, r16
    1efa:	12 97       	sbiw	r26, 0x02	; 2
    1efc:	13 96       	adiw	r26, 0x03	; 3
    1efe:	1c 93       	st	X, r17
    1f00:	27 c0       	rjmp	.+78     	; 0x1f50 <malloc+0x98>
    1f02:	00 93 fa 02 	sts	0x02FA, r16	; 0x8002fa <__flp>
    1f06:	10 93 fb 02 	sts	0x02FB, r17	; 0x8002fb <__flp+0x1>
    1f0a:	22 c0       	rjmp	.+68     	; 0x1f50 <malloc+0x98>
    1f0c:	21 15       	cp	r18, r1
    1f0e:	31 05       	cpc	r19, r1
    1f10:	19 f0       	breq	.+6      	; 0x1f18 <malloc+0x60>
    1f12:	42 17       	cp	r20, r18
    1f14:	53 07       	cpc	r21, r19
    1f16:	18 f4       	brcc	.+6      	; 0x1f1e <malloc+0x66>
    1f18:	9a 01       	movw	r18, r20
    1f1a:	bd 01       	movw	r22, r26
    1f1c:	ef 01       	movw	r28, r30
    1f1e:	df 01       	movw	r26, r30
    1f20:	f8 01       	movw	r30, r16
    1f22:	db cf       	rjmp	.-74     	; 0x1eda <malloc+0x22>
    1f24:	21 15       	cp	r18, r1
    1f26:	31 05       	cpc	r19, r1
    1f28:	f9 f0       	breq	.+62     	; 0x1f68 <malloc+0xb0>
    1f2a:	28 1b       	sub	r18, r24
    1f2c:	39 0b       	sbc	r19, r25
    1f2e:	24 30       	cpi	r18, 0x04	; 4
    1f30:	31 05       	cpc	r19, r1
    1f32:	80 f4       	brcc	.+32     	; 0x1f54 <malloc+0x9c>
    1f34:	8a 81       	ldd	r24, Y+2	; 0x02
    1f36:	9b 81       	ldd	r25, Y+3	; 0x03
    1f38:	61 15       	cp	r22, r1
    1f3a:	71 05       	cpc	r23, r1
    1f3c:	21 f0       	breq	.+8      	; 0x1f46 <malloc+0x8e>
    1f3e:	fb 01       	movw	r30, r22
    1f40:	93 83       	std	Z+3, r25	; 0x03
    1f42:	82 83       	std	Z+2, r24	; 0x02
    1f44:	04 c0       	rjmp	.+8      	; 0x1f4e <malloc+0x96>
    1f46:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <__flp+0x1>
    1f4a:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <__flp>
    1f4e:	fe 01       	movw	r30, r28
    1f50:	32 96       	adiw	r30, 0x02	; 2
    1f52:	44 c0       	rjmp	.+136    	; 0x1fdc <malloc+0x124>
    1f54:	fe 01       	movw	r30, r28
    1f56:	e2 0f       	add	r30, r18
    1f58:	f3 1f       	adc	r31, r19
    1f5a:	81 93       	st	Z+, r24
    1f5c:	91 93       	st	Z+, r25
    1f5e:	22 50       	subi	r18, 0x02	; 2
    1f60:	31 09       	sbc	r19, r1
    1f62:	39 83       	std	Y+1, r19	; 0x01
    1f64:	28 83       	st	Y, r18
    1f66:	3a c0       	rjmp	.+116    	; 0x1fdc <malloc+0x124>
    1f68:	20 91 f8 02 	lds	r18, 0x02F8	; 0x8002f8 <__brkval>
    1f6c:	30 91 f9 02 	lds	r19, 0x02F9	; 0x8002f9 <__brkval+0x1>
    1f70:	23 2b       	or	r18, r19
    1f72:	41 f4       	brne	.+16     	; 0x1f84 <malloc+0xcc>
    1f74:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1f78:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1f7c:	30 93 f9 02 	sts	0x02F9, r19	; 0x8002f9 <__brkval+0x1>
    1f80:	20 93 f8 02 	sts	0x02F8, r18	; 0x8002f8 <__brkval>
    1f84:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1f88:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1f8c:	21 15       	cp	r18, r1
    1f8e:	31 05       	cpc	r19, r1
    1f90:	41 f4       	brne	.+16     	; 0x1fa2 <malloc+0xea>
    1f92:	2d b7       	in	r18, 0x3d	; 61
    1f94:	3e b7       	in	r19, 0x3e	; 62
    1f96:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1f9a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1f9e:	24 1b       	sub	r18, r20
    1fa0:	35 0b       	sbc	r19, r21
    1fa2:	e0 91 f8 02 	lds	r30, 0x02F8	; 0x8002f8 <__brkval>
    1fa6:	f0 91 f9 02 	lds	r31, 0x02F9	; 0x8002f9 <__brkval+0x1>
    1faa:	e2 17       	cp	r30, r18
    1fac:	f3 07       	cpc	r31, r19
    1fae:	a0 f4       	brcc	.+40     	; 0x1fd8 <malloc+0x120>
    1fb0:	2e 1b       	sub	r18, r30
    1fb2:	3f 0b       	sbc	r19, r31
    1fb4:	28 17       	cp	r18, r24
    1fb6:	39 07       	cpc	r19, r25
    1fb8:	78 f0       	brcs	.+30     	; 0x1fd8 <malloc+0x120>
    1fba:	ac 01       	movw	r20, r24
    1fbc:	4e 5f       	subi	r20, 0xFE	; 254
    1fbe:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc0:	24 17       	cp	r18, r20
    1fc2:	35 07       	cpc	r19, r21
    1fc4:	48 f0       	brcs	.+18     	; 0x1fd8 <malloc+0x120>
    1fc6:	4e 0f       	add	r20, r30
    1fc8:	5f 1f       	adc	r21, r31
    1fca:	50 93 f9 02 	sts	0x02F9, r21	; 0x8002f9 <__brkval+0x1>
    1fce:	40 93 f8 02 	sts	0x02F8, r20	; 0x8002f8 <__brkval>
    1fd2:	81 93       	st	Z+, r24
    1fd4:	91 93       	st	Z+, r25
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <malloc+0x124>
    1fd8:	e0 e0       	ldi	r30, 0x00	; 0
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	cf 01       	movw	r24, r30
    1fde:	df 91       	pop	r29
    1fe0:	cf 91       	pop	r28
    1fe2:	1f 91       	pop	r17
    1fe4:	0f 91       	pop	r16
    1fe6:	08 95       	ret

00001fe8 <free>:
    1fe8:	cf 93       	push	r28
    1fea:	df 93       	push	r29
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <free+0xa>
    1ff0:	81 c0       	rjmp	.+258    	; 0x20f4 <free+0x10c>
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	32 97       	sbiw	r30, 0x02	; 2
    1ff6:	13 82       	std	Z+3, r1	; 0x03
    1ff8:	12 82       	std	Z+2, r1	; 0x02
    1ffa:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <__flp>
    1ffe:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <__flp+0x1>
    2002:	10 97       	sbiw	r26, 0x00	; 0
    2004:	81 f4       	brne	.+32     	; 0x2026 <free+0x3e>
    2006:	20 81       	ld	r18, Z
    2008:	31 81       	ldd	r19, Z+1	; 0x01
    200a:	82 0f       	add	r24, r18
    200c:	93 1f       	adc	r25, r19
    200e:	20 91 f8 02 	lds	r18, 0x02F8	; 0x8002f8 <__brkval>
    2012:	30 91 f9 02 	lds	r19, 0x02F9	; 0x8002f9 <__brkval+0x1>
    2016:	28 17       	cp	r18, r24
    2018:	39 07       	cpc	r19, r25
    201a:	51 f5       	brne	.+84     	; 0x2070 <free+0x88>
    201c:	f0 93 f9 02 	sts	0x02F9, r31	; 0x8002f9 <__brkval+0x1>
    2020:	e0 93 f8 02 	sts	0x02F8, r30	; 0x8002f8 <__brkval>
    2024:	67 c0       	rjmp	.+206    	; 0x20f4 <free+0x10c>
    2026:	ed 01       	movw	r28, r26
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	ce 17       	cp	r28, r30
    202e:	df 07       	cpc	r29, r31
    2030:	40 f4       	brcc	.+16     	; 0x2042 <free+0x5a>
    2032:	4a 81       	ldd	r20, Y+2	; 0x02
    2034:	5b 81       	ldd	r21, Y+3	; 0x03
    2036:	9e 01       	movw	r18, r28
    2038:	41 15       	cp	r20, r1
    203a:	51 05       	cpc	r21, r1
    203c:	f1 f0       	breq	.+60     	; 0x207a <free+0x92>
    203e:	ea 01       	movw	r28, r20
    2040:	f5 cf       	rjmp	.-22     	; 0x202c <free+0x44>
    2042:	d3 83       	std	Z+3, r29	; 0x03
    2044:	c2 83       	std	Z+2, r28	; 0x02
    2046:	40 81       	ld	r20, Z
    2048:	51 81       	ldd	r21, Z+1	; 0x01
    204a:	84 0f       	add	r24, r20
    204c:	95 1f       	adc	r25, r21
    204e:	c8 17       	cp	r28, r24
    2050:	d9 07       	cpc	r29, r25
    2052:	59 f4       	brne	.+22     	; 0x206a <free+0x82>
    2054:	88 81       	ld	r24, Y
    2056:	99 81       	ldd	r25, Y+1	; 0x01
    2058:	84 0f       	add	r24, r20
    205a:	95 1f       	adc	r25, r21
    205c:	02 96       	adiw	r24, 0x02	; 2
    205e:	91 83       	std	Z+1, r25	; 0x01
    2060:	80 83       	st	Z, r24
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	9b 81       	ldd	r25, Y+3	; 0x03
    2066:	93 83       	std	Z+3, r25	; 0x03
    2068:	82 83       	std	Z+2, r24	; 0x02
    206a:	21 15       	cp	r18, r1
    206c:	31 05       	cpc	r19, r1
    206e:	29 f4       	brne	.+10     	; 0x207a <free+0x92>
    2070:	f0 93 fb 02 	sts	0x02FB, r31	; 0x8002fb <__flp+0x1>
    2074:	e0 93 fa 02 	sts	0x02FA, r30	; 0x8002fa <__flp>
    2078:	3d c0       	rjmp	.+122    	; 0x20f4 <free+0x10c>
    207a:	e9 01       	movw	r28, r18
    207c:	fb 83       	std	Y+3, r31	; 0x03
    207e:	ea 83       	std	Y+2, r30	; 0x02
    2080:	49 91       	ld	r20, Y+
    2082:	59 91       	ld	r21, Y+
    2084:	c4 0f       	add	r28, r20
    2086:	d5 1f       	adc	r29, r21
    2088:	ec 17       	cp	r30, r28
    208a:	fd 07       	cpc	r31, r29
    208c:	61 f4       	brne	.+24     	; 0x20a6 <free+0xbe>
    208e:	80 81       	ld	r24, Z
    2090:	91 81       	ldd	r25, Z+1	; 0x01
    2092:	84 0f       	add	r24, r20
    2094:	95 1f       	adc	r25, r21
    2096:	02 96       	adiw	r24, 0x02	; 2
    2098:	e9 01       	movw	r28, r18
    209a:	99 83       	std	Y+1, r25	; 0x01
    209c:	88 83       	st	Y, r24
    209e:	82 81       	ldd	r24, Z+2	; 0x02
    20a0:	93 81       	ldd	r25, Z+3	; 0x03
    20a2:	9b 83       	std	Y+3, r25	; 0x03
    20a4:	8a 83       	std	Y+2, r24	; 0x02
    20a6:	e0 e0       	ldi	r30, 0x00	; 0
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	12 96       	adiw	r26, 0x02	; 2
    20ac:	8d 91       	ld	r24, X+
    20ae:	9c 91       	ld	r25, X
    20b0:	13 97       	sbiw	r26, 0x03	; 3
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	19 f0       	breq	.+6      	; 0x20bc <free+0xd4>
    20b6:	fd 01       	movw	r30, r26
    20b8:	dc 01       	movw	r26, r24
    20ba:	f7 cf       	rjmp	.-18     	; 0x20aa <free+0xc2>
    20bc:	8d 91       	ld	r24, X+
    20be:	9c 91       	ld	r25, X
    20c0:	11 97       	sbiw	r26, 0x01	; 1
    20c2:	9d 01       	movw	r18, r26
    20c4:	2e 5f       	subi	r18, 0xFE	; 254
    20c6:	3f 4f       	sbci	r19, 0xFF	; 255
    20c8:	82 0f       	add	r24, r18
    20ca:	93 1f       	adc	r25, r19
    20cc:	20 91 f8 02 	lds	r18, 0x02F8	; 0x8002f8 <__brkval>
    20d0:	30 91 f9 02 	lds	r19, 0x02F9	; 0x8002f9 <__brkval+0x1>
    20d4:	28 17       	cp	r18, r24
    20d6:	39 07       	cpc	r19, r25
    20d8:	69 f4       	brne	.+26     	; 0x20f4 <free+0x10c>
    20da:	30 97       	sbiw	r30, 0x00	; 0
    20dc:	29 f4       	brne	.+10     	; 0x20e8 <free+0x100>
    20de:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <__flp+0x1>
    20e2:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <__flp>
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <free+0x104>
    20e8:	13 82       	std	Z+3, r1	; 0x03
    20ea:	12 82       	std	Z+2, r1	; 0x02
    20ec:	b0 93 f9 02 	sts	0x02F9, r27	; 0x8002f9 <__brkval+0x1>
    20f0:	a0 93 f8 02 	sts	0x02F8, r26	; 0x8002f8 <__brkval>
    20f4:	df 91       	pop	r29
    20f6:	cf 91       	pop	r28
    20f8:	08 95       	ret

000020fa <snprintf>:
    20fa:	ae e0       	ldi	r26, 0x0E	; 14
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e3 e8       	ldi	r30, 0x83	; 131
    2100:	f0 e1       	ldi	r31, 0x10	; 16
    2102:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <__prologue_saves__+0x1c>
    2106:	0d 89       	ldd	r16, Y+21	; 0x15
    2108:	1e 89       	ldd	r17, Y+22	; 0x16
    210a:	8f 89       	ldd	r24, Y+23	; 0x17
    210c:	98 8d       	ldd	r25, Y+24	; 0x18
    210e:	26 e0       	ldi	r18, 0x06	; 6
    2110:	2c 83       	std	Y+4, r18	; 0x04
    2112:	1a 83       	std	Y+2, r17	; 0x02
    2114:	09 83       	std	Y+1, r16	; 0x01
    2116:	97 ff       	sbrs	r25, 7
    2118:	02 c0       	rjmp	.+4      	; 0x211e <snprintf+0x24>
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	90 e8       	ldi	r25, 0x80	; 128
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	9e 83       	std	Y+6, r25	; 0x06
    2122:	8d 83       	std	Y+5, r24	; 0x05
    2124:	ae 01       	movw	r20, r28
    2126:	45 5e       	subi	r20, 0xE5	; 229
    2128:	5f 4f       	sbci	r21, 0xFF	; 255
    212a:	69 8d       	ldd	r22, Y+25	; 0x19
    212c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    212e:	ce 01       	movw	r24, r28
    2130:	01 96       	adiw	r24, 0x01	; 1
    2132:	0e 94 ad 10 	call	0x215a	; 0x215a <vfprintf>
    2136:	4d 81       	ldd	r20, Y+5	; 0x05
    2138:	5e 81       	ldd	r21, Y+6	; 0x06
    213a:	57 fd       	sbrc	r21, 7
    213c:	0a c0       	rjmp	.+20     	; 0x2152 <snprintf+0x58>
    213e:	2f 81       	ldd	r18, Y+7	; 0x07
    2140:	38 85       	ldd	r19, Y+8	; 0x08
    2142:	42 17       	cp	r20, r18
    2144:	53 07       	cpc	r21, r19
    2146:	0c f4       	brge	.+2      	; 0x214a <snprintf+0x50>
    2148:	9a 01       	movw	r18, r20
    214a:	f8 01       	movw	r30, r16
    214c:	e2 0f       	add	r30, r18
    214e:	f3 1f       	adc	r31, r19
    2150:	10 82       	st	Z, r1
    2152:	2e 96       	adiw	r28, 0x0e	; 14
    2154:	e4 e0       	ldi	r30, 0x04	; 4
    2156:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <__epilogue_restores__+0x1c>

0000215a <vfprintf>:
    215a:	ab e0       	ldi	r26, 0x0B	; 11
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	e3 eb       	ldi	r30, 0xB3	; 179
    2160:	f0 e1       	ldi	r31, 0x10	; 16
    2162:	0c 94 3e 13 	jmp	0x267c	; 0x267c <__prologue_saves__>
    2166:	6c 01       	movw	r12, r24
    2168:	7b 01       	movw	r14, r22
    216a:	8a 01       	movw	r16, r20
    216c:	fc 01       	movw	r30, r24
    216e:	17 82       	std	Z+7, r1	; 0x07
    2170:	16 82       	std	Z+6, r1	; 0x06
    2172:	83 81       	ldd	r24, Z+3	; 0x03
    2174:	81 ff       	sbrs	r24, 1
    2176:	cc c1       	rjmp	.+920    	; 0x2510 <vfprintf+0x3b6>
    2178:	ce 01       	movw	r24, r28
    217a:	01 96       	adiw	r24, 0x01	; 1
    217c:	3c 01       	movw	r6, r24
    217e:	f6 01       	movw	r30, r12
    2180:	93 81       	ldd	r25, Z+3	; 0x03
    2182:	f7 01       	movw	r30, r14
    2184:	93 fd       	sbrc	r25, 3
    2186:	85 91       	lpm	r24, Z+
    2188:	93 ff       	sbrs	r25, 3
    218a:	81 91       	ld	r24, Z+
    218c:	7f 01       	movw	r14, r30
    218e:	88 23       	and	r24, r24
    2190:	09 f4       	brne	.+2      	; 0x2194 <vfprintf+0x3a>
    2192:	ba c1       	rjmp	.+884    	; 0x2508 <vfprintf+0x3ae>
    2194:	85 32       	cpi	r24, 0x25	; 37
    2196:	39 f4       	brne	.+14     	; 0x21a6 <vfprintf+0x4c>
    2198:	93 fd       	sbrc	r25, 3
    219a:	85 91       	lpm	r24, Z+
    219c:	93 ff       	sbrs	r25, 3
    219e:	81 91       	ld	r24, Z+
    21a0:	7f 01       	movw	r14, r30
    21a2:	85 32       	cpi	r24, 0x25	; 37
    21a4:	29 f4       	brne	.+10     	; 0x21b0 <vfprintf+0x56>
    21a6:	b6 01       	movw	r22, r12
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	0e 94 a4 12 	call	0x2548	; 0x2548 <fputc>
    21ae:	e7 cf       	rjmp	.-50     	; 0x217e <vfprintf+0x24>
    21b0:	91 2c       	mov	r9, r1
    21b2:	21 2c       	mov	r2, r1
    21b4:	31 2c       	mov	r3, r1
    21b6:	ff e1       	ldi	r31, 0x1F	; 31
    21b8:	f3 15       	cp	r31, r3
    21ba:	d8 f0       	brcs	.+54     	; 0x21f2 <vfprintf+0x98>
    21bc:	8b 32       	cpi	r24, 0x2B	; 43
    21be:	79 f0       	breq	.+30     	; 0x21de <vfprintf+0x84>
    21c0:	38 f4       	brcc	.+14     	; 0x21d0 <vfprintf+0x76>
    21c2:	80 32       	cpi	r24, 0x20	; 32
    21c4:	79 f0       	breq	.+30     	; 0x21e4 <vfprintf+0x8a>
    21c6:	83 32       	cpi	r24, 0x23	; 35
    21c8:	a1 f4       	brne	.+40     	; 0x21f2 <vfprintf+0x98>
    21ca:	23 2d       	mov	r18, r3
    21cc:	20 61       	ori	r18, 0x10	; 16
    21ce:	1d c0       	rjmp	.+58     	; 0x220a <vfprintf+0xb0>
    21d0:	8d 32       	cpi	r24, 0x2D	; 45
    21d2:	61 f0       	breq	.+24     	; 0x21ec <vfprintf+0x92>
    21d4:	80 33       	cpi	r24, 0x30	; 48
    21d6:	69 f4       	brne	.+26     	; 0x21f2 <vfprintf+0x98>
    21d8:	23 2d       	mov	r18, r3
    21da:	21 60       	ori	r18, 0x01	; 1
    21dc:	16 c0       	rjmp	.+44     	; 0x220a <vfprintf+0xb0>
    21de:	83 2d       	mov	r24, r3
    21e0:	82 60       	ori	r24, 0x02	; 2
    21e2:	38 2e       	mov	r3, r24
    21e4:	e3 2d       	mov	r30, r3
    21e6:	e4 60       	ori	r30, 0x04	; 4
    21e8:	3e 2e       	mov	r3, r30
    21ea:	2a c0       	rjmp	.+84     	; 0x2240 <vfprintf+0xe6>
    21ec:	f3 2d       	mov	r31, r3
    21ee:	f8 60       	ori	r31, 0x08	; 8
    21f0:	1d c0       	rjmp	.+58     	; 0x222c <vfprintf+0xd2>
    21f2:	37 fc       	sbrc	r3, 7
    21f4:	2d c0       	rjmp	.+90     	; 0x2250 <vfprintf+0xf6>
    21f6:	20 ed       	ldi	r18, 0xD0	; 208
    21f8:	28 0f       	add	r18, r24
    21fa:	2a 30       	cpi	r18, 0x0A	; 10
    21fc:	40 f0       	brcs	.+16     	; 0x220e <vfprintf+0xb4>
    21fe:	8e 32       	cpi	r24, 0x2E	; 46
    2200:	b9 f4       	brne	.+46     	; 0x2230 <vfprintf+0xd6>
    2202:	36 fc       	sbrc	r3, 6
    2204:	81 c1       	rjmp	.+770    	; 0x2508 <vfprintf+0x3ae>
    2206:	23 2d       	mov	r18, r3
    2208:	20 64       	ori	r18, 0x40	; 64
    220a:	32 2e       	mov	r3, r18
    220c:	19 c0       	rjmp	.+50     	; 0x2240 <vfprintf+0xe6>
    220e:	36 fe       	sbrs	r3, 6
    2210:	06 c0       	rjmp	.+12     	; 0x221e <vfprintf+0xc4>
    2212:	8a e0       	ldi	r24, 0x0A	; 10
    2214:	98 9e       	mul	r9, r24
    2216:	20 0d       	add	r18, r0
    2218:	11 24       	eor	r1, r1
    221a:	92 2e       	mov	r9, r18
    221c:	11 c0       	rjmp	.+34     	; 0x2240 <vfprintf+0xe6>
    221e:	ea e0       	ldi	r30, 0x0A	; 10
    2220:	2e 9e       	mul	r2, r30
    2222:	20 0d       	add	r18, r0
    2224:	11 24       	eor	r1, r1
    2226:	22 2e       	mov	r2, r18
    2228:	f3 2d       	mov	r31, r3
    222a:	f0 62       	ori	r31, 0x20	; 32
    222c:	3f 2e       	mov	r3, r31
    222e:	08 c0       	rjmp	.+16     	; 0x2240 <vfprintf+0xe6>
    2230:	8c 36       	cpi	r24, 0x6C	; 108
    2232:	21 f4       	brne	.+8      	; 0x223c <vfprintf+0xe2>
    2234:	83 2d       	mov	r24, r3
    2236:	80 68       	ori	r24, 0x80	; 128
    2238:	38 2e       	mov	r3, r24
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <vfprintf+0xe6>
    223c:	88 36       	cpi	r24, 0x68	; 104
    223e:	41 f4       	brne	.+16     	; 0x2250 <vfprintf+0xf6>
    2240:	f7 01       	movw	r30, r14
    2242:	93 fd       	sbrc	r25, 3
    2244:	85 91       	lpm	r24, Z+
    2246:	93 ff       	sbrs	r25, 3
    2248:	81 91       	ld	r24, Z+
    224a:	7f 01       	movw	r14, r30
    224c:	81 11       	cpse	r24, r1
    224e:	b3 cf       	rjmp	.-154    	; 0x21b6 <vfprintf+0x5c>
    2250:	98 2f       	mov	r25, r24
    2252:	9f 7d       	andi	r25, 0xDF	; 223
    2254:	95 54       	subi	r25, 0x45	; 69
    2256:	93 30       	cpi	r25, 0x03	; 3
    2258:	28 f4       	brcc	.+10     	; 0x2264 <vfprintf+0x10a>
    225a:	0c 5f       	subi	r16, 0xFC	; 252
    225c:	1f 4f       	sbci	r17, 0xFF	; 255
    225e:	9f e3       	ldi	r25, 0x3F	; 63
    2260:	99 83       	std	Y+1, r25	; 0x01
    2262:	0d c0       	rjmp	.+26     	; 0x227e <vfprintf+0x124>
    2264:	83 36       	cpi	r24, 0x63	; 99
    2266:	31 f0       	breq	.+12     	; 0x2274 <vfprintf+0x11a>
    2268:	83 37       	cpi	r24, 0x73	; 115
    226a:	71 f0       	breq	.+28     	; 0x2288 <vfprintf+0x12e>
    226c:	83 35       	cpi	r24, 0x53	; 83
    226e:	09 f0       	breq	.+2      	; 0x2272 <vfprintf+0x118>
    2270:	59 c0       	rjmp	.+178    	; 0x2324 <vfprintf+0x1ca>
    2272:	21 c0       	rjmp	.+66     	; 0x22b6 <vfprintf+0x15c>
    2274:	f8 01       	movw	r30, r16
    2276:	80 81       	ld	r24, Z
    2278:	89 83       	std	Y+1, r24	; 0x01
    227a:	0e 5f       	subi	r16, 0xFE	; 254
    227c:	1f 4f       	sbci	r17, 0xFF	; 255
    227e:	88 24       	eor	r8, r8
    2280:	83 94       	inc	r8
    2282:	91 2c       	mov	r9, r1
    2284:	53 01       	movw	r10, r6
    2286:	13 c0       	rjmp	.+38     	; 0x22ae <vfprintf+0x154>
    2288:	28 01       	movw	r4, r16
    228a:	f2 e0       	ldi	r31, 0x02	; 2
    228c:	4f 0e       	add	r4, r31
    228e:	51 1c       	adc	r5, r1
    2290:	f8 01       	movw	r30, r16
    2292:	a0 80       	ld	r10, Z
    2294:	b1 80       	ldd	r11, Z+1	; 0x01
    2296:	36 fe       	sbrs	r3, 6
    2298:	03 c0       	rjmp	.+6      	; 0x22a0 <vfprintf+0x146>
    229a:	69 2d       	mov	r22, r9
    229c:	70 e0       	ldi	r23, 0x00	; 0
    229e:	02 c0       	rjmp	.+4      	; 0x22a4 <vfprintf+0x14a>
    22a0:	6f ef       	ldi	r22, 0xFF	; 255
    22a2:	7f ef       	ldi	r23, 0xFF	; 255
    22a4:	c5 01       	movw	r24, r10
    22a6:	0e 94 99 12 	call	0x2532	; 0x2532 <strnlen>
    22aa:	4c 01       	movw	r8, r24
    22ac:	82 01       	movw	r16, r4
    22ae:	f3 2d       	mov	r31, r3
    22b0:	ff 77       	andi	r31, 0x7F	; 127
    22b2:	3f 2e       	mov	r3, r31
    22b4:	16 c0       	rjmp	.+44     	; 0x22e2 <vfprintf+0x188>
    22b6:	28 01       	movw	r4, r16
    22b8:	22 e0       	ldi	r18, 0x02	; 2
    22ba:	42 0e       	add	r4, r18
    22bc:	51 1c       	adc	r5, r1
    22be:	f8 01       	movw	r30, r16
    22c0:	a0 80       	ld	r10, Z
    22c2:	b1 80       	ldd	r11, Z+1	; 0x01
    22c4:	36 fe       	sbrs	r3, 6
    22c6:	03 c0       	rjmp	.+6      	; 0x22ce <vfprintf+0x174>
    22c8:	69 2d       	mov	r22, r9
    22ca:	70 e0       	ldi	r23, 0x00	; 0
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <vfprintf+0x178>
    22ce:	6f ef       	ldi	r22, 0xFF	; 255
    22d0:	7f ef       	ldi	r23, 0xFF	; 255
    22d2:	c5 01       	movw	r24, r10
    22d4:	0e 94 8e 12 	call	0x251c	; 0x251c <strnlen_P>
    22d8:	4c 01       	movw	r8, r24
    22da:	f3 2d       	mov	r31, r3
    22dc:	f0 68       	ori	r31, 0x80	; 128
    22de:	3f 2e       	mov	r3, r31
    22e0:	82 01       	movw	r16, r4
    22e2:	33 fc       	sbrc	r3, 3
    22e4:	1b c0       	rjmp	.+54     	; 0x231c <vfprintf+0x1c2>
    22e6:	82 2d       	mov	r24, r2
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	88 16       	cp	r8, r24
    22ec:	99 06       	cpc	r9, r25
    22ee:	b0 f4       	brcc	.+44     	; 0x231c <vfprintf+0x1c2>
    22f0:	b6 01       	movw	r22, r12
    22f2:	80 e2       	ldi	r24, 0x20	; 32
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	0e 94 a4 12 	call	0x2548	; 0x2548 <fputc>
    22fa:	2a 94       	dec	r2
    22fc:	f4 cf       	rjmp	.-24     	; 0x22e6 <vfprintf+0x18c>
    22fe:	f5 01       	movw	r30, r10
    2300:	37 fc       	sbrc	r3, 7
    2302:	85 91       	lpm	r24, Z+
    2304:	37 fe       	sbrs	r3, 7
    2306:	81 91       	ld	r24, Z+
    2308:	5f 01       	movw	r10, r30
    230a:	b6 01       	movw	r22, r12
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	0e 94 a4 12 	call	0x2548	; 0x2548 <fputc>
    2312:	21 10       	cpse	r2, r1
    2314:	2a 94       	dec	r2
    2316:	21 e0       	ldi	r18, 0x01	; 1
    2318:	82 1a       	sub	r8, r18
    231a:	91 08       	sbc	r9, r1
    231c:	81 14       	cp	r8, r1
    231e:	91 04       	cpc	r9, r1
    2320:	71 f7       	brne	.-36     	; 0x22fe <vfprintf+0x1a4>
    2322:	e8 c0       	rjmp	.+464    	; 0x24f4 <vfprintf+0x39a>
    2324:	84 36       	cpi	r24, 0x64	; 100
    2326:	11 f0       	breq	.+4      	; 0x232c <vfprintf+0x1d2>
    2328:	89 36       	cpi	r24, 0x69	; 105
    232a:	41 f5       	brne	.+80     	; 0x237c <vfprintf+0x222>
    232c:	f8 01       	movw	r30, r16
    232e:	37 fe       	sbrs	r3, 7
    2330:	07 c0       	rjmp	.+14     	; 0x2340 <vfprintf+0x1e6>
    2332:	60 81       	ld	r22, Z
    2334:	71 81       	ldd	r23, Z+1	; 0x01
    2336:	82 81       	ldd	r24, Z+2	; 0x02
    2338:	93 81       	ldd	r25, Z+3	; 0x03
    233a:	0c 5f       	subi	r16, 0xFC	; 252
    233c:	1f 4f       	sbci	r17, 0xFF	; 255
    233e:	08 c0       	rjmp	.+16     	; 0x2350 <vfprintf+0x1f6>
    2340:	60 81       	ld	r22, Z
    2342:	71 81       	ldd	r23, Z+1	; 0x01
    2344:	07 2e       	mov	r0, r23
    2346:	00 0c       	add	r0, r0
    2348:	88 0b       	sbc	r24, r24
    234a:	99 0b       	sbc	r25, r25
    234c:	0e 5f       	subi	r16, 0xFE	; 254
    234e:	1f 4f       	sbci	r17, 0xFF	; 255
    2350:	f3 2d       	mov	r31, r3
    2352:	ff 76       	andi	r31, 0x6F	; 111
    2354:	3f 2e       	mov	r3, r31
    2356:	97 ff       	sbrs	r25, 7
    2358:	09 c0       	rjmp	.+18     	; 0x236c <vfprintf+0x212>
    235a:	90 95       	com	r25
    235c:	80 95       	com	r24
    235e:	70 95       	com	r23
    2360:	61 95       	neg	r22
    2362:	7f 4f       	sbci	r23, 0xFF	; 255
    2364:	8f 4f       	sbci	r24, 0xFF	; 255
    2366:	9f 4f       	sbci	r25, 0xFF	; 255
    2368:	f0 68       	ori	r31, 0x80	; 128
    236a:	3f 2e       	mov	r3, r31
    236c:	2a e0       	ldi	r18, 0x0A	; 10
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	a3 01       	movw	r20, r6
    2372:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__ultoa_invert>
    2376:	88 2e       	mov	r8, r24
    2378:	86 18       	sub	r8, r6
    237a:	45 c0       	rjmp	.+138    	; 0x2406 <vfprintf+0x2ac>
    237c:	85 37       	cpi	r24, 0x75	; 117
    237e:	31 f4       	brne	.+12     	; 0x238c <vfprintf+0x232>
    2380:	23 2d       	mov	r18, r3
    2382:	2f 7e       	andi	r18, 0xEF	; 239
    2384:	b2 2e       	mov	r11, r18
    2386:	2a e0       	ldi	r18, 0x0A	; 10
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	25 c0       	rjmp	.+74     	; 0x23d6 <vfprintf+0x27c>
    238c:	93 2d       	mov	r25, r3
    238e:	99 7f       	andi	r25, 0xF9	; 249
    2390:	b9 2e       	mov	r11, r25
    2392:	8f 36       	cpi	r24, 0x6F	; 111
    2394:	c1 f0       	breq	.+48     	; 0x23c6 <vfprintf+0x26c>
    2396:	18 f4       	brcc	.+6      	; 0x239e <vfprintf+0x244>
    2398:	88 35       	cpi	r24, 0x58	; 88
    239a:	79 f0       	breq	.+30     	; 0x23ba <vfprintf+0x260>
    239c:	b5 c0       	rjmp	.+362    	; 0x2508 <vfprintf+0x3ae>
    239e:	80 37       	cpi	r24, 0x70	; 112
    23a0:	19 f0       	breq	.+6      	; 0x23a8 <vfprintf+0x24e>
    23a2:	88 37       	cpi	r24, 0x78	; 120
    23a4:	21 f0       	breq	.+8      	; 0x23ae <vfprintf+0x254>
    23a6:	b0 c0       	rjmp	.+352    	; 0x2508 <vfprintf+0x3ae>
    23a8:	e9 2f       	mov	r30, r25
    23aa:	e0 61       	ori	r30, 0x10	; 16
    23ac:	be 2e       	mov	r11, r30
    23ae:	b4 fe       	sbrs	r11, 4
    23b0:	0d c0       	rjmp	.+26     	; 0x23cc <vfprintf+0x272>
    23b2:	fb 2d       	mov	r31, r11
    23b4:	f4 60       	ori	r31, 0x04	; 4
    23b6:	bf 2e       	mov	r11, r31
    23b8:	09 c0       	rjmp	.+18     	; 0x23cc <vfprintf+0x272>
    23ba:	34 fe       	sbrs	r3, 4
    23bc:	0a c0       	rjmp	.+20     	; 0x23d2 <vfprintf+0x278>
    23be:	29 2f       	mov	r18, r25
    23c0:	26 60       	ori	r18, 0x06	; 6
    23c2:	b2 2e       	mov	r11, r18
    23c4:	06 c0       	rjmp	.+12     	; 0x23d2 <vfprintf+0x278>
    23c6:	28 e0       	ldi	r18, 0x08	; 8
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	05 c0       	rjmp	.+10     	; 0x23d6 <vfprintf+0x27c>
    23cc:	20 e1       	ldi	r18, 0x10	; 16
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <vfprintf+0x27c>
    23d2:	20 e1       	ldi	r18, 0x10	; 16
    23d4:	32 e0       	ldi	r19, 0x02	; 2
    23d6:	f8 01       	movw	r30, r16
    23d8:	b7 fe       	sbrs	r11, 7
    23da:	07 c0       	rjmp	.+14     	; 0x23ea <vfprintf+0x290>
    23dc:	60 81       	ld	r22, Z
    23de:	71 81       	ldd	r23, Z+1	; 0x01
    23e0:	82 81       	ldd	r24, Z+2	; 0x02
    23e2:	93 81       	ldd	r25, Z+3	; 0x03
    23e4:	0c 5f       	subi	r16, 0xFC	; 252
    23e6:	1f 4f       	sbci	r17, 0xFF	; 255
    23e8:	06 c0       	rjmp	.+12     	; 0x23f6 <vfprintf+0x29c>
    23ea:	60 81       	ld	r22, Z
    23ec:	71 81       	ldd	r23, Z+1	; 0x01
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	0e 5f       	subi	r16, 0xFE	; 254
    23f4:	1f 4f       	sbci	r17, 0xFF	; 255
    23f6:	a3 01       	movw	r20, r6
    23f8:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__ultoa_invert>
    23fc:	88 2e       	mov	r8, r24
    23fe:	86 18       	sub	r8, r6
    2400:	fb 2d       	mov	r31, r11
    2402:	ff 77       	andi	r31, 0x7F	; 127
    2404:	3f 2e       	mov	r3, r31
    2406:	36 fe       	sbrs	r3, 6
    2408:	0d c0       	rjmp	.+26     	; 0x2424 <vfprintf+0x2ca>
    240a:	23 2d       	mov	r18, r3
    240c:	2e 7f       	andi	r18, 0xFE	; 254
    240e:	a2 2e       	mov	r10, r18
    2410:	89 14       	cp	r8, r9
    2412:	58 f4       	brcc	.+22     	; 0x242a <vfprintf+0x2d0>
    2414:	34 fe       	sbrs	r3, 4
    2416:	0b c0       	rjmp	.+22     	; 0x242e <vfprintf+0x2d4>
    2418:	32 fc       	sbrc	r3, 2
    241a:	09 c0       	rjmp	.+18     	; 0x242e <vfprintf+0x2d4>
    241c:	83 2d       	mov	r24, r3
    241e:	8e 7e       	andi	r24, 0xEE	; 238
    2420:	a8 2e       	mov	r10, r24
    2422:	05 c0       	rjmp	.+10     	; 0x242e <vfprintf+0x2d4>
    2424:	b8 2c       	mov	r11, r8
    2426:	a3 2c       	mov	r10, r3
    2428:	03 c0       	rjmp	.+6      	; 0x2430 <vfprintf+0x2d6>
    242a:	b8 2c       	mov	r11, r8
    242c:	01 c0       	rjmp	.+2      	; 0x2430 <vfprintf+0x2d6>
    242e:	b9 2c       	mov	r11, r9
    2430:	a4 fe       	sbrs	r10, 4
    2432:	0f c0       	rjmp	.+30     	; 0x2452 <vfprintf+0x2f8>
    2434:	fe 01       	movw	r30, r28
    2436:	e8 0d       	add	r30, r8
    2438:	f1 1d       	adc	r31, r1
    243a:	80 81       	ld	r24, Z
    243c:	80 33       	cpi	r24, 0x30	; 48
    243e:	21 f4       	brne	.+8      	; 0x2448 <vfprintf+0x2ee>
    2440:	9a 2d       	mov	r25, r10
    2442:	99 7e       	andi	r25, 0xE9	; 233
    2444:	a9 2e       	mov	r10, r25
    2446:	09 c0       	rjmp	.+18     	; 0x245a <vfprintf+0x300>
    2448:	a2 fe       	sbrs	r10, 2
    244a:	06 c0       	rjmp	.+12     	; 0x2458 <vfprintf+0x2fe>
    244c:	b3 94       	inc	r11
    244e:	b3 94       	inc	r11
    2450:	04 c0       	rjmp	.+8      	; 0x245a <vfprintf+0x300>
    2452:	8a 2d       	mov	r24, r10
    2454:	86 78       	andi	r24, 0x86	; 134
    2456:	09 f0       	breq	.+2      	; 0x245a <vfprintf+0x300>
    2458:	b3 94       	inc	r11
    245a:	a3 fc       	sbrc	r10, 3
    245c:	11 c0       	rjmp	.+34     	; 0x2480 <vfprintf+0x326>
    245e:	a0 fe       	sbrs	r10, 0
    2460:	06 c0       	rjmp	.+12     	; 0x246e <vfprintf+0x314>
    2462:	b2 14       	cp	r11, r2
    2464:	88 f4       	brcc	.+34     	; 0x2488 <vfprintf+0x32e>
    2466:	28 0c       	add	r2, r8
    2468:	92 2c       	mov	r9, r2
    246a:	9b 18       	sub	r9, r11
    246c:	0e c0       	rjmp	.+28     	; 0x248a <vfprintf+0x330>
    246e:	b2 14       	cp	r11, r2
    2470:	60 f4       	brcc	.+24     	; 0x248a <vfprintf+0x330>
    2472:	b6 01       	movw	r22, r12
    2474:	80 e2       	ldi	r24, 0x20	; 32
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	0e 94 a4 12 	call	0x2548	; 0x2548 <fputc>
    247c:	b3 94       	inc	r11
    247e:	f7 cf       	rjmp	.-18     	; 0x246e <vfprintf+0x314>
    2480:	b2 14       	cp	r11, r2
    2482:	18 f4       	brcc	.+6      	; 0x248a <vfprintf+0x330>
    2484:	2b 18       	sub	r2, r11
    2486:	02 c0       	rjmp	.+4      	; 0x248c <vfprintf+0x332>
    2488:	98 2c       	mov	r9, r8
    248a:	21 2c       	mov	r2, r1
    248c:	a4 fe       	sbrs	r10, 4
    248e:	10 c0       	rjmp	.+32     	; 0x24b0 <vfprintf+0x356>
    2490:	b6 01       	movw	r22, r12
    2492:	80 e3       	ldi	r24, 0x30	; 48
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	0e 94 a4 12 	call	0x2548	; 0x2548 <fputc>
    249a:	a2 fe       	sbrs	r10, 2
    249c:	17 c0       	rjmp	.+46     	; 0x24cc <vfprintf+0x372>
    249e:	a1 fc       	sbrc	r10, 1
    24a0:	03 c0       	rjmp	.+6      	; 0x24a8 <vfprintf+0x34e>
    24a2:	88 e7       	ldi	r24, 0x78	; 120
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <vfprintf+0x352>
    24a8:	88 e5       	ldi	r24, 0x58	; 88
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	b6 01       	movw	r22, r12
    24ae:	0c c0       	rjmp	.+24     	; 0x24c8 <vfprintf+0x36e>
    24b0:	8a 2d       	mov	r24, r10
    24b2:	86 78       	andi	r24, 0x86	; 134
    24b4:	59 f0       	breq	.+22     	; 0x24cc <vfprintf+0x372>
    24b6:	a1 fe       	sbrs	r10, 1
    24b8:	02 c0       	rjmp	.+4      	; 0x24be <vfprintf+0x364>
    24ba:	8b e2       	ldi	r24, 0x2B	; 43
    24bc:	01 c0       	rjmp	.+2      	; 0x24c0 <vfprintf+0x366>
    24be:	80 e2       	ldi	r24, 0x20	; 32
    24c0:	a7 fc       	sbrc	r10, 7
    24c2:	8d e2       	ldi	r24, 0x2D	; 45
    24c4:	b6 01       	movw	r22, r12
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	0e 94 a4 12 	call	0x2548	; 0x2548 <fputc>
    24cc:	89 14       	cp	r8, r9
    24ce:	38 f4       	brcc	.+14     	; 0x24de <vfprintf+0x384>
    24d0:	b6 01       	movw	r22, r12
    24d2:	80 e3       	ldi	r24, 0x30	; 48
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	0e 94 a4 12 	call	0x2548	; 0x2548 <fputc>
    24da:	9a 94       	dec	r9
    24dc:	f7 cf       	rjmp	.-18     	; 0x24cc <vfprintf+0x372>
    24de:	8a 94       	dec	r8
    24e0:	f3 01       	movw	r30, r6
    24e2:	e8 0d       	add	r30, r8
    24e4:	f1 1d       	adc	r31, r1
    24e6:	80 81       	ld	r24, Z
    24e8:	b6 01       	movw	r22, r12
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	0e 94 a4 12 	call	0x2548	; 0x2548 <fputc>
    24f0:	81 10       	cpse	r8, r1
    24f2:	f5 cf       	rjmp	.-22     	; 0x24de <vfprintf+0x384>
    24f4:	22 20       	and	r2, r2
    24f6:	09 f4       	brne	.+2      	; 0x24fa <vfprintf+0x3a0>
    24f8:	42 ce       	rjmp	.-892    	; 0x217e <vfprintf+0x24>
    24fa:	b6 01       	movw	r22, r12
    24fc:	80 e2       	ldi	r24, 0x20	; 32
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	0e 94 a4 12 	call	0x2548	; 0x2548 <fputc>
    2504:	2a 94       	dec	r2
    2506:	f6 cf       	rjmp	.-20     	; 0x24f4 <vfprintf+0x39a>
    2508:	f6 01       	movw	r30, r12
    250a:	86 81       	ldd	r24, Z+6	; 0x06
    250c:	97 81       	ldd	r25, Z+7	; 0x07
    250e:	02 c0       	rjmp	.+4      	; 0x2514 <vfprintf+0x3ba>
    2510:	8f ef       	ldi	r24, 0xFF	; 255
    2512:	9f ef       	ldi	r25, 0xFF	; 255
    2514:	2b 96       	adiw	r28, 0x0b	; 11
    2516:	e2 e1       	ldi	r30, 0x12	; 18
    2518:	0c 94 5a 13 	jmp	0x26b4	; 0x26b4 <__epilogue_restores__>

0000251c <strnlen_P>:
    251c:	fc 01       	movw	r30, r24
    251e:	05 90       	lpm	r0, Z+
    2520:	61 50       	subi	r22, 0x01	; 1
    2522:	70 40       	sbci	r23, 0x00	; 0
    2524:	01 10       	cpse	r0, r1
    2526:	d8 f7       	brcc	.-10     	; 0x251e <strnlen_P+0x2>
    2528:	80 95       	com	r24
    252a:	90 95       	com	r25
    252c:	8e 0f       	add	r24, r30
    252e:	9f 1f       	adc	r25, r31
    2530:	08 95       	ret

00002532 <strnlen>:
    2532:	fc 01       	movw	r30, r24
    2534:	61 50       	subi	r22, 0x01	; 1
    2536:	70 40       	sbci	r23, 0x00	; 0
    2538:	01 90       	ld	r0, Z+
    253a:	01 10       	cpse	r0, r1
    253c:	d8 f7       	brcc	.-10     	; 0x2534 <strnlen+0x2>
    253e:	80 95       	com	r24
    2540:	90 95       	com	r25
    2542:	8e 0f       	add	r24, r30
    2544:	9f 1f       	adc	r25, r31
    2546:	08 95       	ret

00002548 <fputc>:
    2548:	0f 93       	push	r16
    254a:	1f 93       	push	r17
    254c:	cf 93       	push	r28
    254e:	df 93       	push	r29
    2550:	fb 01       	movw	r30, r22
    2552:	23 81       	ldd	r18, Z+3	; 0x03
    2554:	21 fd       	sbrc	r18, 1
    2556:	03 c0       	rjmp	.+6      	; 0x255e <fputc+0x16>
    2558:	8f ef       	ldi	r24, 0xFF	; 255
    255a:	9f ef       	ldi	r25, 0xFF	; 255
    255c:	2c c0       	rjmp	.+88     	; 0x25b6 <fputc+0x6e>
    255e:	22 ff       	sbrs	r18, 2
    2560:	16 c0       	rjmp	.+44     	; 0x258e <fputc+0x46>
    2562:	46 81       	ldd	r20, Z+6	; 0x06
    2564:	57 81       	ldd	r21, Z+7	; 0x07
    2566:	24 81       	ldd	r18, Z+4	; 0x04
    2568:	35 81       	ldd	r19, Z+5	; 0x05
    256a:	42 17       	cp	r20, r18
    256c:	53 07       	cpc	r21, r19
    256e:	44 f4       	brge	.+16     	; 0x2580 <fputc+0x38>
    2570:	a0 81       	ld	r26, Z
    2572:	b1 81       	ldd	r27, Z+1	; 0x01
    2574:	9d 01       	movw	r18, r26
    2576:	2f 5f       	subi	r18, 0xFF	; 255
    2578:	3f 4f       	sbci	r19, 0xFF	; 255
    257a:	31 83       	std	Z+1, r19	; 0x01
    257c:	20 83       	st	Z, r18
    257e:	8c 93       	st	X, r24
    2580:	26 81       	ldd	r18, Z+6	; 0x06
    2582:	37 81       	ldd	r19, Z+7	; 0x07
    2584:	2f 5f       	subi	r18, 0xFF	; 255
    2586:	3f 4f       	sbci	r19, 0xFF	; 255
    2588:	37 83       	std	Z+7, r19	; 0x07
    258a:	26 83       	std	Z+6, r18	; 0x06
    258c:	14 c0       	rjmp	.+40     	; 0x25b6 <fputc+0x6e>
    258e:	8b 01       	movw	r16, r22
    2590:	ec 01       	movw	r28, r24
    2592:	fb 01       	movw	r30, r22
    2594:	00 84       	ldd	r0, Z+8	; 0x08
    2596:	f1 85       	ldd	r31, Z+9	; 0x09
    2598:	e0 2d       	mov	r30, r0
    259a:	09 95       	icall
    259c:	89 2b       	or	r24, r25
    259e:	e1 f6       	brne	.-72     	; 0x2558 <fputc+0x10>
    25a0:	d8 01       	movw	r26, r16
    25a2:	16 96       	adiw	r26, 0x06	; 6
    25a4:	8d 91       	ld	r24, X+
    25a6:	9c 91       	ld	r25, X
    25a8:	17 97       	sbiw	r26, 0x07	; 7
    25aa:	01 96       	adiw	r24, 0x01	; 1
    25ac:	17 96       	adiw	r26, 0x07	; 7
    25ae:	9c 93       	st	X, r25
    25b0:	8e 93       	st	-X, r24
    25b2:	16 97       	sbiw	r26, 0x06	; 6
    25b4:	ce 01       	movw	r24, r28
    25b6:	df 91       	pop	r29
    25b8:	cf 91       	pop	r28
    25ba:	1f 91       	pop	r17
    25bc:	0f 91       	pop	r16
    25be:	08 95       	ret

000025c0 <__ultoa_invert>:
    25c0:	fa 01       	movw	r30, r20
    25c2:	aa 27       	eor	r26, r26
    25c4:	28 30       	cpi	r18, 0x08	; 8
    25c6:	51 f1       	breq	.+84     	; 0x261c <__ultoa_invert+0x5c>
    25c8:	20 31       	cpi	r18, 0x10	; 16
    25ca:	81 f1       	breq	.+96     	; 0x262c <__ultoa_invert+0x6c>
    25cc:	e8 94       	clt
    25ce:	6f 93       	push	r22
    25d0:	6e 7f       	andi	r22, 0xFE	; 254
    25d2:	6e 5f       	subi	r22, 0xFE	; 254
    25d4:	7f 4f       	sbci	r23, 0xFF	; 255
    25d6:	8f 4f       	sbci	r24, 0xFF	; 255
    25d8:	9f 4f       	sbci	r25, 0xFF	; 255
    25da:	af 4f       	sbci	r26, 0xFF	; 255
    25dc:	b1 e0       	ldi	r27, 0x01	; 1
    25de:	3e d0       	rcall	.+124    	; 0x265c <__ultoa_invert+0x9c>
    25e0:	b4 e0       	ldi	r27, 0x04	; 4
    25e2:	3c d0       	rcall	.+120    	; 0x265c <__ultoa_invert+0x9c>
    25e4:	67 0f       	add	r22, r23
    25e6:	78 1f       	adc	r23, r24
    25e8:	89 1f       	adc	r24, r25
    25ea:	9a 1f       	adc	r25, r26
    25ec:	a1 1d       	adc	r26, r1
    25ee:	68 0f       	add	r22, r24
    25f0:	79 1f       	adc	r23, r25
    25f2:	8a 1f       	adc	r24, r26
    25f4:	91 1d       	adc	r25, r1
    25f6:	a1 1d       	adc	r26, r1
    25f8:	6a 0f       	add	r22, r26
    25fa:	71 1d       	adc	r23, r1
    25fc:	81 1d       	adc	r24, r1
    25fe:	91 1d       	adc	r25, r1
    2600:	a1 1d       	adc	r26, r1
    2602:	20 d0       	rcall	.+64     	; 0x2644 <__ultoa_invert+0x84>
    2604:	09 f4       	brne	.+2      	; 0x2608 <__ultoa_invert+0x48>
    2606:	68 94       	set
    2608:	3f 91       	pop	r19
    260a:	2a e0       	ldi	r18, 0x0A	; 10
    260c:	26 9f       	mul	r18, r22
    260e:	11 24       	eor	r1, r1
    2610:	30 19       	sub	r19, r0
    2612:	30 5d       	subi	r19, 0xD0	; 208
    2614:	31 93       	st	Z+, r19
    2616:	de f6       	brtc	.-74     	; 0x25ce <__ultoa_invert+0xe>
    2618:	cf 01       	movw	r24, r30
    261a:	08 95       	ret
    261c:	46 2f       	mov	r20, r22
    261e:	47 70       	andi	r20, 0x07	; 7
    2620:	40 5d       	subi	r20, 0xD0	; 208
    2622:	41 93       	st	Z+, r20
    2624:	b3 e0       	ldi	r27, 0x03	; 3
    2626:	0f d0       	rcall	.+30     	; 0x2646 <__ultoa_invert+0x86>
    2628:	c9 f7       	brne	.-14     	; 0x261c <__ultoa_invert+0x5c>
    262a:	f6 cf       	rjmp	.-20     	; 0x2618 <__ultoa_invert+0x58>
    262c:	46 2f       	mov	r20, r22
    262e:	4f 70       	andi	r20, 0x0F	; 15
    2630:	40 5d       	subi	r20, 0xD0	; 208
    2632:	4a 33       	cpi	r20, 0x3A	; 58
    2634:	18 f0       	brcs	.+6      	; 0x263c <__ultoa_invert+0x7c>
    2636:	49 5d       	subi	r20, 0xD9	; 217
    2638:	31 fd       	sbrc	r19, 1
    263a:	40 52       	subi	r20, 0x20	; 32
    263c:	41 93       	st	Z+, r20
    263e:	02 d0       	rcall	.+4      	; 0x2644 <__ultoa_invert+0x84>
    2640:	a9 f7       	brne	.-22     	; 0x262c <__ultoa_invert+0x6c>
    2642:	ea cf       	rjmp	.-44     	; 0x2618 <__ultoa_invert+0x58>
    2644:	b4 e0       	ldi	r27, 0x04	; 4
    2646:	a6 95       	lsr	r26
    2648:	97 95       	ror	r25
    264a:	87 95       	ror	r24
    264c:	77 95       	ror	r23
    264e:	67 95       	ror	r22
    2650:	ba 95       	dec	r27
    2652:	c9 f7       	brne	.-14     	; 0x2646 <__ultoa_invert+0x86>
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	61 05       	cpc	r22, r1
    2658:	71 05       	cpc	r23, r1
    265a:	08 95       	ret
    265c:	9b 01       	movw	r18, r22
    265e:	ac 01       	movw	r20, r24
    2660:	0a 2e       	mov	r0, r26
    2662:	06 94       	lsr	r0
    2664:	57 95       	ror	r21
    2666:	47 95       	ror	r20
    2668:	37 95       	ror	r19
    266a:	27 95       	ror	r18
    266c:	ba 95       	dec	r27
    266e:	c9 f7       	brne	.-14     	; 0x2662 <__ultoa_invert+0xa2>
    2670:	62 0f       	add	r22, r18
    2672:	73 1f       	adc	r23, r19
    2674:	84 1f       	adc	r24, r20
    2676:	95 1f       	adc	r25, r21
    2678:	a0 1d       	adc	r26, r0
    267a:	08 95       	ret

0000267c <__prologue_saves__>:
    267c:	2f 92       	push	r2
    267e:	3f 92       	push	r3
    2680:	4f 92       	push	r4
    2682:	5f 92       	push	r5
    2684:	6f 92       	push	r6
    2686:	7f 92       	push	r7
    2688:	8f 92       	push	r8
    268a:	9f 92       	push	r9
    268c:	af 92       	push	r10
    268e:	bf 92       	push	r11
    2690:	cf 92       	push	r12
    2692:	df 92       	push	r13
    2694:	ef 92       	push	r14
    2696:	ff 92       	push	r15
    2698:	0f 93       	push	r16
    269a:	1f 93       	push	r17
    269c:	cf 93       	push	r28
    269e:	df 93       	push	r29
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	ca 1b       	sub	r28, r26
    26a6:	db 0b       	sbc	r29, r27
    26a8:	0f b6       	in	r0, 0x3f	; 63
    26aa:	f8 94       	cli
    26ac:	de bf       	out	0x3e, r29	; 62
    26ae:	0f be       	out	0x3f, r0	; 63
    26b0:	cd bf       	out	0x3d, r28	; 61
    26b2:	09 94       	ijmp

000026b4 <__epilogue_restores__>:
    26b4:	2a 88       	ldd	r2, Y+18	; 0x12
    26b6:	39 88       	ldd	r3, Y+17	; 0x11
    26b8:	48 88       	ldd	r4, Y+16	; 0x10
    26ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    26bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    26be:	7d 84       	ldd	r7, Y+13	; 0x0d
    26c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    26c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    26c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    26c6:	b9 84       	ldd	r11, Y+9	; 0x09
    26c8:	c8 84       	ldd	r12, Y+8	; 0x08
    26ca:	df 80       	ldd	r13, Y+7	; 0x07
    26cc:	ee 80       	ldd	r14, Y+6	; 0x06
    26ce:	fd 80       	ldd	r15, Y+5	; 0x05
    26d0:	0c 81       	ldd	r16, Y+4	; 0x04
    26d2:	1b 81       	ldd	r17, Y+3	; 0x03
    26d4:	aa 81       	ldd	r26, Y+2	; 0x02
    26d6:	b9 81       	ldd	r27, Y+1	; 0x01
    26d8:	ce 0f       	add	r28, r30
    26da:	d1 1d       	adc	r29, r1
    26dc:	0f b6       	in	r0, 0x3f	; 63
    26de:	f8 94       	cli
    26e0:	de bf       	out	0x3e, r29	; 62
    26e2:	0f be       	out	0x3f, r0	; 63
    26e4:	cd bf       	out	0x3d, r28	; 61
    26e6:	ed 01       	movw	r28, r26
    26e8:	08 95       	ret

000026ea <atexit_fini>:
    26ea:	0e 94 63 00 	call	0xc6	; 0xc6 <atexit_finido>

000026ee <__do_global_dtors>:
    26ee:	10 e0       	ldi	r17, 0x00	; 0
    26f0:	c7 e3       	ldi	r28, 0x37	; 55
    26f2:	d0 e0       	ldi	r29, 0x00	; 0
    26f4:	04 c0       	rjmp	.+8      	; 0x26fe <__do_global_dtors+0x10>
    26f6:	fe 01       	movw	r30, r28
    26f8:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__tablejump2__>
    26fc:	21 96       	adiw	r28, 0x01	; 1
    26fe:	c9 33       	cpi	r28, 0x39	; 57
    2700:	d1 07       	cpc	r29, r17
    2702:	c9 f7       	brne	.-14     	; 0x26f6 <__do_global_dtors+0x8>
    2704:	f8 94       	cli

00002706 <__stop_program>:
    2706:	ff cf       	rjmp	.-2      	; 0x2706 <__stop_program>
