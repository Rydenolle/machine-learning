
ATmega328P_factory.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000200  00800100  00003a88  00003b1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000053  00800300  00800300  00003d1c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003d1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003d78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000678  00000000  00000000  00003db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c3c6  00000000  00000000  00004430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003494  00000000  00000000  000107f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003444  00000000  00000000  00013c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000014b4  00000000  00000000  000170d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005249  00000000  00000000  00018584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005b28  00000000  00000000  0001d7cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005f0  00000000  00000000  000232f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__dtors_end>
       4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       c:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__vector_3>
      10:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__vector_4>
      14:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__vector_5>
      18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      24:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__vector_9>
      28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      2c:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__vector_11>
      30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      40:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__vector_16>
      44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>

00000068 <__ctors_start>:
      68:	81 05       	cpc	r24, r1
      6a:	bc 08       	sbc	r11, r12
      6c:	20 12       	cpse	r2, r16

0000006e <__ctors_end>:
      6e:	88 05       	cpc	r24, r8
      70:	c3 08       	sbc	r12, r3

00000072 <__dtors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf ef       	ldi	r28, 0xFF	; 255
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	13 e0       	ldi	r17, 0x03	; 3
      80:	a0 e0       	ldi	r26, 0x00	; 0
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	e8 e8       	ldi	r30, 0x88	; 136
      86:	fa e3       	ldi	r31, 0x3A	; 58
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	a0 30       	cpi	r26, 0x00	; 0
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	23 e0       	ldi	r18, 0x03	; 3
      96:	a0 e0       	ldi	r26, 0x00	; 0
      98:	b3 e0       	ldi	r27, 0x03	; 3
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	a3 35       	cpi	r26, 0x53	; 83
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>

000000a4 <__do_global_ctors>:
      a4:	10 e0       	ldi	r17, 0x00	; 0
      a6:	c7 e3       	ldi	r28, 0x37	; 55
      a8:	d0 e0       	ldi	r29, 0x00	; 0
      aa:	04 c0       	rjmp	.+8      	; 0xb4 <__do_global_ctors+0x10>
      ac:	21 97       	sbiw	r28, 0x01	; 1
      ae:	fe 01       	movw	r30, r28
      b0:	0e 94 88 17 	call	0x2f10	; 0x2f10 <__tablejump2__>
      b4:	c4 33       	cpi	r28, 0x34	; 52
      b6:	d1 07       	cpc	r29, r17
      b8:	c9 f7       	brne	.-14     	; 0xac <__do_global_ctors+0x8>
      ba:	0e 94 94 0c 	call	0x1928	; 0x1928 <main>
      be:	0c 94 35 1d 	jmp	0x3a6a	; 0x3a6a <atexit_fini>

000000c2 <__bad_interrupt>:
      c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <atexit_finido>:
      c6:	a0 91 00 03 	lds	r26, 0x0300	; 0x800300 <__data_end>
      ca:	b0 91 01 03 	lds	r27, 0x0301	; 0x800301 <__data_end+0x1>
      ce:	10 97       	sbiw	r26, 0x00	; 0
      d0:	69 f0       	breq	.+26     	; 0xec <atexit_finido+0x26>
      d2:	ed 91       	ld	r30, X+
      d4:	fc 91       	ld	r31, X
      d6:	11 97       	sbiw	r26, 0x01	; 1
      d8:	12 96       	adiw	r26, 0x02	; 2
      da:	8d 91       	ld	r24, X+
      dc:	9c 91       	ld	r25, X
      de:	13 97       	sbiw	r26, 0x03	; 3
      e0:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <__data_end+0x1>
      e4:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
      e8:	09 95       	icall
      ea:	ed cf       	rjmp	.-38     	; 0xc6 <atexit_finido>
      ec:	08 95       	ret

000000ee <atexit>:
      ee:	cf 93       	push	r28
      f0:	df 93       	push	r29
      f2:	ec 01       	movw	r28, r24
      f4:	84 e0       	ldi	r24, 0x04	; 4
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <malloc>
      fc:	00 97       	sbiw	r24, 0x00	; 0
      fe:	81 f0       	breq	.+32     	; 0x120 <atexit+0x32>
     100:	fc 01       	movw	r30, r24
     102:	d1 83       	std	Z+1, r29	; 0x01
     104:	c0 83       	st	Z, r28
     106:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <__data_end>
     10a:	30 91 01 03 	lds	r19, 0x0301	; 0x800301 <__data_end+0x1>
     10e:	33 83       	std	Z+3, r19	; 0x03
     110:	22 83       	std	Z+2, r18	; 0x02
     112:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <__data_end+0x1>
     116:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	02 c0       	rjmp	.+4      	; 0x124 <atexit+0x36>
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <time>:
     12a:	fc 01       	movw	r30, r24
     12c:	0f b6       	in	r0, 0x3f	; 63
     12e:	f8 94       	cli
     130:	60 91 4f 03 	lds	r22, 0x034F	; 0x80034f <__system_time>
     134:	70 91 50 03 	lds	r23, 0x0350	; 0x800350 <__system_time+0x1>
     138:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <__system_time+0x2>
     13c:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <__system_time+0x3>
     140:	0f be       	out	0x3f, r0	; 63
     142:	30 97       	sbiw	r30, 0x00	; 0
     144:	21 f0       	breq	.+8      	; 0x14e <time+0x24>
     146:	60 83       	st	Z, r22
     148:	71 83       	std	Z+1, r23	; 0x01
     14a:	82 83       	std	Z+2, r24	; 0x02
     14c:	93 83       	std	Z+3, r25	; 0x03
     14e:	08 95       	ret

00000150 <__tcf_0>:
{
public:
    /**
     * @brief Delete the ADC.
     */
    virtual ~AdcInterface() noexcept = default;
     150:	8c e2       	ldi	r24, 0x2C	; 44
     152:	91 e0       	ldi	r25, 0x01	; 1
     154:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <_ZZN6driver10atmega328p3Adc11getInstanceEvE10myInstance+0x1>
     158:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <_ZZN6driver10atmega328p3Adc11getInstanceEvE10myInstance>
     15c:	08 95       	ret

0000015e <_ZNK6driver10atmega328p3Adc10resolutionEv>:
    // Return a reference to the singleton ADC instance, cast to the corresponding interface.
    return myInstance; 
}

// -----------------------------------------------------------------------------
uint8_t Adc::resolution() const noexcept { return AdcParam::Resolution; }
     15e:	8a e0       	ldi	r24, 0x0A	; 10
     160:	08 95       	ret

00000162 <_ZNK6driver10atmega328p3Adc8maxValueEv>:

// -----------------------------------------------------------------------------
uint16_t Adc::maxValue() const noexcept { return AdcParam::MaxValue; }
     162:	8f ef       	ldi	r24, 0xFF	; 255
     164:	93 e0       	ldi	r25, 0x03	; 3
     166:	08 95       	ret

00000168 <_ZNK6driver10atmega328p3Adc13supplyVoltageEv>:

// -----------------------------------------------------------------------------
double Adc::supplyVoltage() const noexcept { return AdcParam::SupplyVoltage; }
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	70 e0       	ldi	r23, 0x00	; 0
     16c:	80 ea       	ldi	r24, 0xA0	; 160
     16e:	90 e4       	ldi	r25, 0x40	; 64
     170:	08 95       	ret

00000172 <_ZNK6driver10atmega328p3Adc4readEh>:

// -----------------------------------------------------------------------------
uint16_t Adc::read(const uint8_t analogPin) const noexcept
{ 
     172:	0f 93       	push	r16
    return myEnabled ? adcValue(analogPin) : 0U;
     174:	fc 01       	movw	r30, r24
     176:	82 81       	ldd	r24, Z+2	; 0x02
     178:	88 23       	and	r24, r24
     17a:	09 f4       	brne	.+2      	; 0x17e <_ZNK6driver10atmega328p3Adc4readEh+0xc>
     17c:	4a c0       	rjmp	.+148    	; 0x212 <_ZNK6driver10atmega328p3Adc4readEh+0xa0>
template <typename T>
constexpr bool inRange(const T number, const T min, const T max) noexcept
{
    static_assert(type_traits::is_arithmetic<T>::value, 
        "Range checks are only supported for arithmetic types!");
    return ((min <= number) && (max >= number));
     17e:	66 30       	cpi	r22, 0x06	; 6
     180:	10 f4       	brcc	.+4      	; 0x186 <_ZNK6driver10atmega328p3Adc4readEh+0x14>
     182:	98 2f       	mov	r25, r24
     184:	01 c0       	rjmp	.+2      	; 0x188 <_ZNK6driver10atmega328p3Adc4readEh+0x16>
     186:	90 e0       	ldi	r25, 0x00	; 0

// -----------------------------------------------------------------------------
constexpr bool isPinNumberValid(const uint8_t pin) noexcept
{
    return utils::inRange(pin, Adc::Pin::A0, Adc::Pin::A5) 
        || utils::inRange(pin, Adc::Port::C0, Adc::Port::C5);
     188:	91 11       	cpse	r25, r1
     18a:	05 c0       	rjmp	.+10     	; 0x196 <_ZNK6driver10atmega328p3Adc4readEh+0x24>
     18c:	6e 30       	cpi	r22, 0x0E	; 14
     18e:	18 f0       	brcs	.+6      	; 0x196 <_ZNK6driver10atmega328p3Adc4readEh+0x24>
     190:	64 31       	cpi	r22, 0x14	; 20
     192:	08 f4       	brcc	.+2      	; 0x196 <_ZNK6driver10atmega328p3Adc4readEh+0x24>
     194:	98 2f       	mov	r25, r24
}

// -----------------------------------------------------------------------------
inline uint16_t adcValue(const uint8_t pin) noexcept
{
    if (!isPinNumberValid(pin)) { return 0U; }
     196:	99 23       	and	r25, r25
     198:	c9 f1       	breq	.+114    	; 0x20c <_ZNK6driver10atmega328p3Adc4readEh+0x9a>
}

// -----------------------------------------------------------------------------
constexpr uint8_t isPinAdjustedForOffset(const uint8_t pin) noexcept
{
    return Adc::Pin::A5 >= pin ? pin : pin - AdcParam::PortOffset;
     19a:	66 30       	cpi	r22, 0x06	; 6
     19c:	08 f0       	brcs	.+2      	; 0x1a0 <_ZNK6driver10atmega328p3Adc4readEh+0x2e>
     19e:	6e 50       	subi	r22, 0x0E	; 14

// -----------------------------------------------------------------------------
inline uint16_t adcValue(const uint8_t pin) noexcept
{
    if (!isPinNumberValid(pin)) { return 0U; }
    ADMUX = (1U << REFS0) | isPinAdjustedForOffset(pin);
     1a0:	60 64       	ori	r22, 0x40	; 64
     1a2:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
     1a6:	ea e7       	ldi	r30, 0x7A	; 122
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	80 81       	ld	r24, Z
     1ac:	80 68       	ori	r24, 0x80	; 128
     1ae:	80 83       	st	Z, r24
     1b0:	80 81       	ld	r24, Z
     1b2:	80 64       	ori	r24, 0x40	; 64
     1b4:	80 83       	st	Z, r24
     1b6:	80 81       	ld	r24, Z
     1b8:	81 60       	ori	r24, 0x01	; 1
     1ba:	80 83       	st	Z, r24
     1bc:	80 81       	ld	r24, Z
     1be:	82 60       	ori	r24, 0x02	; 2
     1c0:	80 83       	st	Z, r24
     1c2:	80 81       	ld	r24, Z
     1c4:	84 60       	ori	r24, 0x04	; 4
     1c6:	80 83       	st	Z, r24
// -----------------------------------------------------------------------------
template <typename T>
constexpr bool read(const volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    return reg & (1ULL << bit);
     1c8:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	40 e0       	ldi	r20, 0x00	; 0
     1d0:	50 e0       	ldi	r21, 0x00	; 0
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	70 e0       	ldi	r23, 0x00	; 0
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	04 e0       	ldi	r16, 0x04	; 4
     1dc:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <__lshrdi3>
     1e0:	21 70       	andi	r18, 0x01	; 1
    utils::set(ADCSRA, ADEN, ADSC, ADPS0, ADPS1, ADPS2);
    while (!utils::read(ADCSRA, ADIF));
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	40 e0       	ldi	r20, 0x00	; 0
     1e6:	50 e0       	ldi	r21, 0x00	; 0
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	70 e0       	ldi	r23, 0x00	; 0
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	a0 e0       	ldi	r26, 0x00	; 0
     1f2:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__cmpdi2_s8>
     1f6:	41 f3       	breq	.-48     	; 0x1c8 <_ZNK6driver10atmega328p3Adc4readEh+0x56>
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
     1f8:	ea e7       	ldi	r30, 0x7A	; 122
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	80 81       	ld	r24, Z
     1fe:	80 61       	ori	r24, 0x10	; 16
     200:	80 83       	st	Z, r24
    utils::set(ADCSRA, ADIF);
    return ADC;
     202:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     206:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     20a:	05 c0       	rjmp	.+10     	; 0x216 <_ZNK6driver10atmega328p3Adc4readEh+0xa4>
}

// -----------------------------------------------------------------------------
inline uint16_t adcValue(const uint8_t pin) noexcept
{
    if (!isPinNumberValid(pin)) { return 0U; }
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	02 c0       	rjmp	.+4      	; 0x216 <_ZNK6driver10atmega328p3Adc4readEh+0xa4>
double Adc::supplyVoltage() const noexcept { return AdcParam::SupplyVoltage; }

// -----------------------------------------------------------------------------
uint16_t Adc::read(const uint8_t analogPin) const noexcept
{ 
    return myEnabled ? adcValue(analogPin) : 0U;
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	90 e0       	ldi	r25, 0x00	; 0
}
     216:	0f 91       	pop	r16
     218:	08 95       	ret

0000021a <_ZNK6driver10atmega328p3Adc9dutyCycleEh>:

// -----------------------------------------------------------------------------
double Adc::dutyCycle(const uint8_t analogPin) const noexcept
{
    return read(analogPin) / static_cast<double>(AdcParam::MaxValue);
     21a:	0e 94 b9 00 	call	0x172	; 0x172 <_ZNK6driver10atmega328p3Adc4readEh>
     21e:	bc 01       	movw	r22, r24
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__floatunsisf>
     228:	20 e0       	ldi	r18, 0x00	; 0
     22a:	30 ec       	ldi	r19, 0xC0	; 192
     22c:	4f e7       	ldi	r20, 0x7F	; 127
     22e:	54 e4       	ldi	r21, 0x44	; 68
     230:	0e 94 65 15 	call	0x2aca	; 0x2aca <__divsf3>
}
     234:	08 95       	ret

00000236 <_ZNK6driver10atmega328p3Adc12inputVoltageEh>:

// -----------------------------------------------------------------------------
double Adc::inputVoltage(const uint8_t analogPin) const noexcept
{
    return dutyCycle(analogPin) * AdcParam::SupplyVoltage;
     236:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZNK6driver10atmega328p3Adc9dutyCycleEh>
     23a:	20 e0       	ldi	r18, 0x00	; 0
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	40 ea       	ldi	r20, 0xA0	; 160
     240:	50 e4       	ldi	r21, 0x40	; 64
     242:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
}
     246:	08 95       	ret

00000248 <_ZNK6driver10atmega328p3Adc13isInitializedEv>:

// -----------------------------------------------------------------------------
bool Adc::isInitialized() const noexcept { return true; }
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	08 95       	ret

0000024c <_ZNK6driver10atmega328p3Adc9isEnabledEv>:

// -----------------------------------------------------------------------------
bool Adc::isEnabled() const noexcept { return myEnabled; }
     24c:	fc 01       	movw	r30, r24
     24e:	82 81       	ldd	r24, Z+2	; 0x02
     250:	08 95       	ret

00000252 <_ZN6driver10atmega328p3Adc10setEnabledEb>:

// -----------------------------------------------------------------------------
void Adc::setEnabled(const bool enable) noexcept { myEnabled = enable; }
     252:	fc 01       	movw	r30, r24
     254:	62 83       	std	Z+2, r22	; 0x02
     256:	08 95       	ret

00000258 <_ZN6driver10atmega328p3AdcD1Ev>:
     258:	2c e2       	ldi	r18, 0x2C	; 44
     25a:	31 e0       	ldi	r19, 0x01	; 1
     25c:	fc 01       	movw	r30, r24
     25e:	31 83       	std	Z+1, r19	; 0x01
     260:	20 83       	st	Z, r18
     262:	08 95       	ret

00000264 <_ZN6driver10atmega328p3AdcD0Ev>:
     264:	2c e2       	ldi	r18, 0x2C	; 44
     266:	31 e0       	ldi	r19, 0x01	; 1
     268:	fc 01       	movw	r30, r24
     26a:	31 83       	std	Z+1, r19	; 0x01
     26c:	20 83       	st	Z, r18
    Adc& operator=(const Adc&) = delete; // No copy assignment.
    Adc& operator=(Adc&&)      = delete; // No move assignment.

private:
    Adc() noexcept;
    ~Adc() noexcept override = default;
     26e:	63 e0       	ldi	r22, 0x03	; 3
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <_ZdlPvj>
     276:	08 95       	ret

00000278 <_ZN6driver10atmega328p3AdcC1Ev>:

// -----------------------------------------------------------------------------
Adc::Adc() noexcept
    : myEnabled{false}
     278:	26 e4       	ldi	r18, 0x46	; 70
     27a:	31 e0       	ldi	r19, 0x01	; 1
     27c:	fc 01       	movw	r30, r24
     27e:	31 83       	std	Z+1, r19	; 0x01
     280:	20 83       	st	Z, r18
     282:	12 82       	std	Z+2, r1	; 0x02
{
    read(Pin::A0);
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	0e 94 b9 00 	call	0x172	; 0x172 <_ZNK6driver10atmega328p3Adc4readEh>
     28a:	08 95       	ret

0000028c <_ZN6driver10atmega328p3Adc11getInstanceEv>:

// -----------------------------------------------------------------------------
AdcInterface& Adc::getInstance() noexcept
{ 
    // Create and initialize the singleton ADC instance (once only).
    static Adc myInstance{};
     28c:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <_ZGVZN6driver10atmega328p3Adc11getInstanceEvE10myInstance>
     290:	81 11       	cpse	r24, r1
     292:	12 c0       	rjmp	.+36     	; 0x2b8 <_ZN6driver10atmega328p3Adc11getInstanceEv+0x2c>
     294:	85 e0       	ldi	r24, 0x05	; 5
     296:	93 e0       	ldi	r25, 0x03	; 3
     298:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__cxa_guard_acquire>
     29c:	89 2b       	or	r24, r25
     29e:	61 f0       	breq	.+24     	; 0x2b8 <_ZN6driver10atmega328p3Adc11getInstanceEv+0x2c>
     2a0:	82 e0       	ldi	r24, 0x02	; 2
     2a2:	93 e0       	ldi	r25, 0x03	; 3
     2a4:	0e 94 3c 01 	call	0x278	; 0x278 <_ZN6driver10atmega328p3AdcC1Ev>
     2a8:	85 e0       	ldi	r24, 0x05	; 5
     2aa:	93 e0       	ldi	r25, 0x03	; 3
     2ac:	0e 94 ef 14 	call	0x29de	; 0x29de <__cxa_guard_release>
     2b0:	88 ea       	ldi	r24, 0xA8	; 168
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0e 94 77 00 	call	0xee	; 0xee <atexit>

    // Return a reference to the singleton ADC instance, cast to the corresponding interface.
    return myInstance; 
}
     2b8:	82 e0       	ldi	r24, 0x02	; 2
     2ba:	93 e0       	ldi	r25, 0x03	; 3
     2bc:	08 95       	ret

000002be <__tcf_0>:
{
public:
    /**
     * @brief Delete the EEPROM stream.
     */
    virtual ~EepromInterface() noexcept = default;
     2be:	80 e6       	ldi	r24, 0x60	; 96
     2c0:	91 e0       	ldi	r25, 0x01	; 1
     2c2:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <_ZZN6driver10atmega328p6Eeprom11getInstanceEvE10myInstance+0x1>
     2c6:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <_ZZN6driver10atmega328p6Eeprom11getInstanceEvE10myInstance>
     2ca:	08 95       	ret

000002cc <_ZNK6driver10atmega328p6Eeprom13isInitializedEv>:
    // Return a reference to the singleton EEPROM instance, cast to the corresponding interface.
    return myInstance; 
}

// -----------------------------------------------------------------------------
bool Eeprom::isInitialized() const noexcept { return true; }
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	08 95       	ret

000002d0 <_ZNK6driver10atmega328p6Eeprom9isEnabledEv>:

// -----------------------------------------------------------------------------
bool Eeprom::isEnabled() const noexcept { return myEnabled; }
     2d0:	fc 01       	movw	r30, r24
     2d2:	82 81       	ldd	r24, Z+2	; 0x02
     2d4:	08 95       	ret

000002d6 <_ZN6driver10atmega328p6Eeprom10setEnabledEb>:

// -----------------------------------------------------------------------------
void Eeprom::setEnabled(const bool enable) noexcept { myEnabled = enable; }
     2d6:	fc 01       	movw	r30, r24
     2d8:	62 83       	std	Z+2, r22	; 0x02
     2da:	08 95       	ret

000002dc <_ZNK6driver10atmega328p6Eeprom14isAddressValidEjh>:
{}

// -----------------------------------------------------------------------------
bool Eeprom::isAddressValid(const uint16_t address, const uint8_t dataSize) const noexcept
{
    return EepromParam::MaxAddress >= address + dataSize;
     2dc:	64 0f       	add	r22, r20
     2de:	71 1d       	adc	r23, r1
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	61 15       	cp	r22, r1
     2e4:	74 40       	sbci	r23, 0x04	; 4
     2e6:	08 f0       	brcs	.+2      	; 0x2ea <_ZNK6driver10atmega328p6Eeprom14isAddressValidEjh+0xe>
     2e8:	80 e0       	ldi	r24, 0x00	; 0
}
     2ea:	08 95       	ret

000002ec <_ZNK6driver10atmega328p6Eeprom8readByteEj>:
    utils::globalInterruptEnable();
}

// -----------------------------------------------------------------------------
uint8_t Eeprom::readByte(const uint16_t address) const noexcept
{
     2ec:	0f 93       	push	r16
     2ee:	fb 01       	movw	r30, r22
// -----------------------------------------------------------------------------
template <typename T>
constexpr bool read(const volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    return reg & (1ULL << bit);
     2f0:	2f b3       	in	r18, 0x1f	; 31
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	40 e0       	ldi	r20, 0x00	; 0
     2f6:	50 e0       	ldi	r21, 0x00	; 0
     2f8:	60 e0       	ldi	r22, 0x00	; 0
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	01 e0       	ldi	r16, 0x01	; 1
     302:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <__lshrdi3>
     306:	21 70       	andi	r18, 0x01	; 1
    // Wait until EEPROM is ready to read the next byte.
    while (utils::read(EECR, EEPE));
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	40 e0       	ldi	r20, 0x00	; 0
     30c:	50 e0       	ldi	r21, 0x00	; 0
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	70 e0       	ldi	r23, 0x00	; 0
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	a0 e0       	ldi	r26, 0x00	; 0
     318:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__cmpdi2_s8>
     31c:	49 f7       	brne	.-46     	; 0x2f0 <_ZNK6driver10atmega328p6Eeprom8readByteEj+0x4>

    // Set the address from which to read.
    EEAR = address;
     31e:	f2 bd       	out	0x22, r31	; 34
     320:	e1 bd       	out	0x21, r30	; 33
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
     322:	8f b3       	in	r24, 0x1f	; 31
     324:	81 60       	ori	r24, 0x01	; 1
     326:	8f bb       	out	0x1f, r24	; 31

    // Read and return the value of the given address.
    utils::set(EECR, EERE);
    return EEDR;
     328:	80 b5       	in	r24, 0x20	; 32
}
     32a:	0f 91       	pop	r16
     32c:	08 95       	ret

0000032e <_ZN6driver10atmega328p6EepromD1Ev>:
     32e:	20 e6       	ldi	r18, 0x60	; 96
     330:	31 e0       	ldi	r19, 0x01	; 1
     332:	fc 01       	movw	r30, r24
     334:	31 83       	std	Z+1, r19	; 0x01
     336:	20 83       	st	Z, r18
     338:	08 95       	ret

0000033a <_ZN6driver10atmega328p6EepromD0Ev>:
     33a:	20 e6       	ldi	r18, 0x60	; 96
     33c:	31 e0       	ldi	r19, 0x01	; 1
     33e:	fc 01       	movw	r30, r24
     340:	31 83       	std	Z+1, r19	; 0x01
     342:	20 83       	st	Z, r18
    Eeprom& operator=(const Eeprom&) = delete; // No copy assignment.
    Eeprom& operator=(Eeprom&&)      = delete; // No move assignment.

private: 
    Eeprom() noexcept;
    ~Eeprom() noexcept override = default;
     344:	63 e0       	ldi	r22, 0x03	; 3
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <_ZdlPvj>
     34c:	08 95       	ret

0000034e <_ZNK6driver10atmega328p6Eeprom9writeByteEjh>:
    return EepromParam::MaxAddress >= address + dataSize;
}

// -----------------------------------------------------------------------------
void Eeprom::writeByte(const uint16_t address, const uint8_t data) const noexcept
{
     34e:	0f 93       	push	r16
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	eb 01       	movw	r28, r22
     356:	e4 2f       	mov	r30, r20
// -----------------------------------------------------------------------------
template <typename T>
constexpr bool read(const volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    return reg & (1ULL << bit);
     358:	2f b3       	in	r18, 0x1f	; 31
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	40 e0       	ldi	r20, 0x00	; 0
     35e:	50 e0       	ldi	r21, 0x00	; 0
     360:	60 e0       	ldi	r22, 0x00	; 0
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	01 e0       	ldi	r16, 0x01	; 1
     36a:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <__lshrdi3>
     36e:	21 70       	andi	r18, 0x01	; 1
    // Wait until EEPROM is ready to send the next byte.
    while (utils::read(EECR, EEPE));
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	40 e0       	ldi	r20, 0x00	; 0
     374:	50 e0       	ldi	r21, 0x00	; 0
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	a0 e0       	ldi	r26, 0x00	; 0
     380:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__cmpdi2_s8>
     384:	49 f7       	brne	.-46     	; 0x358 <_ZNK6driver10atmega328p6Eeprom9writeByteEjh+0xa>

    // Set the address and data to write.
    EEAR = address;
     386:	d2 bd       	out	0x22, r29	; 34
     388:	c1 bd       	out	0x21, r28	; 33
    EEDR = data;
     38a:	e0 bd       	out	0x20, r30	; 32

    // Perform write, disable interrupts during the write sequence.
    utils::globalInterruptDisable();
     38c:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <_ZN5utils22globalInterruptDisableEv>
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
     390:	8f b3       	in	r24, 0x1f	; 31
     392:	84 60       	ori	r24, 0x04	; 4
     394:	8f bb       	out	0x1f, r24	; 31
     396:	8f b3       	in	r24, 0x1f	; 31
     398:	82 60       	ori	r24, 0x02	; 2
     39a:	8f bb       	out	0x1f, r24	; 31
    utils::set(EECR, EEMPE);
    utils::set(EECR, EEPE);

    // Re-enable interrupts once the write sequence is complete.
    utils::globalInterruptEnable();
     39c:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <_ZN5utils21globalInterruptEnableEv>
}
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	0f 91       	pop	r16
     3a6:	08 95       	ret

000003a8 <_ZN6driver10atmega328p6EepromC1Ev>:
// -----------------------------------------------------------------------------
void Eeprom::setEnabled(const bool enable) noexcept { myEnabled = enable; }

// -----------------------------------------------------------------------------
Eeprom::Eeprom() noexcept
    : myEnabled{false} 
     3a8:	24 e7       	ldi	r18, 0x74	; 116
     3aa:	31 e0       	ldi	r19, 0x01	; 1
     3ac:	fc 01       	movw	r30, r24
     3ae:	31 83       	std	Z+1, r19	; 0x01
     3b0:	20 83       	st	Z, r18
     3b2:	12 82       	std	Z+2, r1	; 0x02
     3b4:	08 95       	ret

000003b6 <_ZN6driver10atmega328p6Eeprom11getInstanceEv>:

// -----------------------------------------------------------------------------
EepromInterface& Eeprom::getInstance() noexcept
{
    // Create and initialize the singleton EEPROM instance (once only).
    static Eeprom myInstance{};
     3b6:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <_ZGVZN6driver10atmega328p6Eeprom11getInstanceEvE10myInstance>
     3ba:	81 11       	cpse	r24, r1
     3bc:	12 c0       	rjmp	.+36     	; 0x3e2 <_ZN6driver10atmega328p6Eeprom11getInstanceEv+0x2c>
     3be:	80 e1       	ldi	r24, 0x10	; 16
     3c0:	93 e0       	ldi	r25, 0x03	; 3
     3c2:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__cxa_guard_acquire>
     3c6:	89 2b       	or	r24, r25
     3c8:	61 f0       	breq	.+24     	; 0x3e2 <_ZN6driver10atmega328p6Eeprom11getInstanceEv+0x2c>
     3ca:	8d e0       	ldi	r24, 0x0D	; 13
     3cc:	93 e0       	ldi	r25, 0x03	; 3
     3ce:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <_ZN6driver10atmega328p6EepromC1Ev>
     3d2:	80 e1       	ldi	r24, 0x10	; 16
     3d4:	93 e0       	ldi	r25, 0x03	; 3
     3d6:	0e 94 ef 14 	call	0x29de	; 0x29de <__cxa_guard_release>
     3da:	8f e5       	ldi	r24, 0x5F	; 95
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	0e 94 77 00 	call	0xee	; 0xee <atexit>

    // Return a reference to the singleton EEPROM instance, cast to the corresponding interface.
    return myInstance; 
}
     3e2:	8d e0       	ldi	r24, 0x0D	; 13
     3e4:	93 e0       	ldi	r25, 0x03	; 3
     3e6:	08 95       	ret

000003e8 <_ZNK6driver10atmega328p4Gpio13isInitializedEv>:
 *        This class is non-copyable and non-movable.
 * 
 * @tparam Size The array size. Must be greater than 0.
 */
template <size_t Size>
class CallbackArray : public Array<void (*)(), Size>
     3e8:	21 e0       	ldi	r18, 0x01	; 1
     3ea:	fc 01       	movw	r30, r24
     3ec:	82 81       	ldd	r24, Z+2	; 0x02
     3ee:	93 81       	ldd	r25, Z+3	; 0x03
     3f0:	89 2b       	or	r24, r25
     3f2:	09 f4       	brne	.+2      	; 0x3f6 <_ZNK6driver10atmega328p4Gpio13isInitializedEv+0xe>
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	82 2f       	mov	r24, r18
     3f8:	08 95       	ret

000003fa <_ZNK6driver10atmega328p4Gpio4readEv>:
     3fa:	0f 93       	push	r16
     3fc:	dc 01       	movw	r26, r24
     3fe:	14 96       	adiw	r26, 0x04	; 4
     400:	0c 91       	ld	r16, X
     402:	14 97       	sbiw	r26, 0x04	; 4
     404:	12 96       	adiw	r26, 0x02	; 2
     406:	ed 91       	ld	r30, X+
     408:	fc 91       	ld	r31, X
     40a:	13 97       	sbiw	r26, 0x03	; 3
     40c:	04 80       	ldd	r0, Z+4	; 0x04
     40e:	f5 81       	ldd	r31, Z+5	; 0x05
     410:	e0 2d       	mov	r30, r0
     412:	20 81       	ld	r18, Z
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	40 e0       	ldi	r20, 0x00	; 0
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <__lshrdi3>
     426:	82 2f       	mov	r24, r18
     428:	81 70       	andi	r24, 0x01	; 1
     42a:	0f 91       	pop	r16
     42c:	08 95       	ret

0000042e <_ZN6driver10atmega328p4Gpio5writeEb>:
     42e:	0f 93       	push	r16
     430:	66 23       	and	r22, r22
     432:	c9 f0       	breq	.+50     	; 0x466 <_ZN6driver10atmega328p4Gpio5writeEb+0x38>
     434:	dc 01       	movw	r26, r24
     436:	14 96       	adiw	r26, 0x04	; 4
     438:	0c 91       	ld	r16, X
     43a:	14 97       	sbiw	r26, 0x04	; 4
     43c:	12 96       	adiw	r26, 0x02	; 2
     43e:	ed 91       	ld	r30, X+
     440:	fc 91       	ld	r31, X
     442:	13 97       	sbiw	r26, 0x03	; 3
     444:	02 80       	ldd	r0, Z+2	; 0x02
     446:	f3 81       	ldd	r31, Z+3	; 0x03
     448:	e0 2d       	mov	r30, r0
     44a:	a0 81       	ld	r26, Z
     44c:	21 e0       	ldi	r18, 0x01	; 1
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	40 e0       	ldi	r20, 0x00	; 0
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	70 e0       	ldi	r23, 0x00	; 0
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__ashldi3>
     460:	2a 2b       	or	r18, r26
     462:	20 83       	st	Z, r18
     464:	15 c0       	rjmp	.+42     	; 0x490 <_ZN6driver10atmega328p4Gpio5writeEb+0x62>
     466:	fc 01       	movw	r30, r24
     468:	04 81       	ldd	r16, Z+4	; 0x04
     46a:	02 80       	ldd	r0, Z+2	; 0x02
     46c:	f3 81       	ldd	r31, Z+3	; 0x03
     46e:	e0 2d       	mov	r30, r0
     470:	a2 81       	ldd	r26, Z+2	; 0x02
     472:	b3 81       	ldd	r27, Z+3	; 0x03
     474:	ec 91       	ld	r30, X
     476:	21 e0       	ldi	r18, 0x01	; 1
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	40 e0       	ldi	r20, 0x00	; 0
     47c:	50 e0       	ldi	r21, 0x00	; 0
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__ashldi3>
     48a:	20 95       	com	r18
     48c:	e2 23       	and	r30, r18
     48e:	ec 93       	st	X, r30
     490:	0f 91       	pop	r16
     492:	08 95       	ret

00000494 <_ZN6driver10atmega328p4Gpio6toggleEv>:
     494:	0f 93       	push	r16
     496:	dc 01       	movw	r26, r24
     498:	14 96       	adiw	r26, 0x04	; 4
     49a:	0c 91       	ld	r16, X
     49c:	14 97       	sbiw	r26, 0x04	; 4
     49e:	12 96       	adiw	r26, 0x02	; 2
     4a0:	ed 91       	ld	r30, X+
     4a2:	fc 91       	ld	r31, X
     4a4:	13 97       	sbiw	r26, 0x03	; 3
     4a6:	04 80       	ldd	r0, Z+4	; 0x04
     4a8:	f5 81       	ldd	r31, Z+5	; 0x05
     4aa:	e0 2d       	mov	r30, r0
     4ac:	a0 81       	ld	r26, Z
     4ae:	21 e0       	ldi	r18, 0x01	; 1
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	40 e0       	ldi	r20, 0x00	; 0
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__ashldi3>
     4c2:	2a 2b       	or	r18, r26
     4c4:	20 83       	st	Z, r18
     4c6:	0f 91       	pop	r16
     4c8:	08 95       	ret

000004ca <_ZN6driver10atmega328p4Gpio21enableInterruptOnPortEb>:
     4ca:	0f 93       	push	r16
     4cc:	66 23       	and	r22, r22
     4ce:	b1 f0       	breq	.+44     	; 0x4fc <_ZN6driver10atmega328p4Gpio21enableInterruptOnPortEb+0x32>
     4d0:	dc 01       	movw	r26, r24
     4d2:	12 96       	adiw	r26, 0x02	; 2
     4d4:	ed 91       	ld	r30, X+
     4d6:	fc 91       	ld	r31, X
     4d8:	13 97       	sbiw	r26, 0x03	; 3
     4da:	00 85       	ldd	r16, Z+8	; 0x08
     4dc:	e8 e6       	ldi	r30, 0x68	; 104
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	a0 81       	ld	r26, Z
     4e2:	21 e0       	ldi	r18, 0x01	; 1
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__ashldi3>
     4f6:	2a 2b       	or	r18, r26
     4f8:	20 83       	st	Z, r18
     4fa:	16 c0       	rjmp	.+44     	; 0x528 <_ZN6driver10atmega328p4Gpio21enableInterruptOnPortEb+0x5e>
     4fc:	dc 01       	movw	r26, r24
     4fe:	12 96       	adiw	r26, 0x02	; 2
     500:	ed 91       	ld	r30, X+
     502:	fc 91       	ld	r31, X
     504:	13 97       	sbiw	r26, 0x03	; 3
     506:	00 85       	ldd	r16, Z+8	; 0x08
     508:	a8 e6       	ldi	r26, 0x68	; 104
     50a:	b0 e0       	ldi	r27, 0x00	; 0
     50c:	ec 91       	ld	r30, X
     50e:	21 e0       	ldi	r18, 0x01	; 1
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	40 e0       	ldi	r20, 0x00	; 0
     514:	50 e0       	ldi	r21, 0x00	; 0
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	70 e0       	ldi	r23, 0x00	; 0
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__ashldi3>
     522:	20 95       	com	r18
     524:	e2 23       	and	r30, r18
     526:	ec 93       	st	X, r30
     528:	0f 91       	pop	r16
     52a:	08 95       	ret

0000052c <_ZN6driver10atmega328p4Gpio15enableInterruptEb>:
     52c:	0f 93       	push	r16
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	66 23       	and	r22, r22
     534:	49 f1       	breq	.+82     	; 0x588 <_ZN6driver10atmega328p4Gpio15enableInterruptEb+0x5c>
     536:	ec 01       	movw	r28, r24
     538:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <_ZN5utils21globalInterruptEnableEv>
     53c:	ea 81       	ldd	r30, Y+2	; 0x02
     53e:	fb 81       	ldd	r31, Y+3	; 0x03
     540:	00 85       	ldd	r16, Z+8	; 0x08
     542:	e8 e6       	ldi	r30, 0x68	; 104
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	a0 81       	ld	r26, Z
     548:	21 e0       	ldi	r18, 0x01	; 1
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	40 e0       	ldi	r20, 0x00	; 0
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__ashldi3>
     55c:	2a 2b       	or	r18, r26
     55e:	20 83       	st	Z, r18
     560:	0c 81       	ldd	r16, Y+4	; 0x04
     562:	ea 81       	ldd	r30, Y+2	; 0x02
     564:	fb 81       	ldd	r31, Y+3	; 0x03
     566:	06 80       	ldd	r0, Z+6	; 0x06
     568:	f7 81       	ldd	r31, Z+7	; 0x07
     56a:	e0 2d       	mov	r30, r0
     56c:	a0 81       	ld	r26, Z
     56e:	21 e0       	ldi	r18, 0x01	; 1
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	40 e0       	ldi	r20, 0x00	; 0
     574:	50 e0       	ldi	r21, 0x00	; 0
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	70 e0       	ldi	r23, 0x00	; 0
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__ashldi3>
     582:	2a 2b       	or	r18, r26
     584:	20 83       	st	Z, r18
     586:	18 c0       	rjmp	.+48     	; 0x5b8 <_ZN6driver10atmega328p4Gpio15enableInterruptEb+0x8c>
     588:	dc 01       	movw	r26, r24
     58a:	14 96       	adiw	r26, 0x04	; 4
     58c:	0c 91       	ld	r16, X
     58e:	14 97       	sbiw	r26, 0x04	; 4
     590:	12 96       	adiw	r26, 0x02	; 2
     592:	ed 91       	ld	r30, X+
     594:	fc 91       	ld	r31, X
     596:	13 97       	sbiw	r26, 0x03	; 3
     598:	a6 81       	ldd	r26, Z+6	; 0x06
     59a:	b7 81       	ldd	r27, Z+7	; 0x07
     59c:	ec 91       	ld	r30, X
     59e:	21 e0       	ldi	r18, 0x01	; 1
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	40 e0       	ldi	r20, 0x00	; 0
     5a4:	50 e0       	ldi	r21, 0x00	; 0
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__ashldi3>
     5b2:	20 95       	com	r18
     5b4:	e2 23       	and	r30, r18
     5b6:	ec 93       	st	X, r30
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	0f 91       	pop	r16
     5be:	08 95       	ret

000005c0 <_ZN6driver10atmega328p4GpioD1Ev>:
     5c0:	4f 92       	push	r4
     5c2:	5f 92       	push	r5
     5c4:	6f 92       	push	r6
     5c6:	7f 92       	push	r7
     5c8:	8f 92       	push	r8
     5ca:	9f 92       	push	r9
     5cc:	af 92       	push	r10
     5ce:	bf 92       	push	r11
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	ec 01       	movw	r28, r24
     5e0:	8c e9       	ldi	r24, 0x9C	; 156
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	99 83       	std	Y+1, r25	; 0x01
     5e6:	88 83       	st	Y, r24
     5e8:	0c 81       	ldd	r16, Y+4	; 0x04
     5ea:	ea 81       	ldd	r30, Y+2	; 0x02
     5ec:	fb 81       	ldd	r31, Y+3	; 0x03
     5ee:	a0 81       	ld	r26, Z
     5f0:	b1 81       	ldd	r27, Z+1	; 0x01
     5f2:	ec 91       	ld	r30, X
     5f4:	21 e0       	ldi	r18, 0x01	; 1
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__ashldi3>
     608:	20 95       	com	r18
     60a:	e2 23       	and	r30, r18
     60c:	ec 93       	st	X, r30
     60e:	0c 81       	ldd	r16, Y+4	; 0x04
     610:	ea 81       	ldd	r30, Y+2	; 0x02
     612:	fb 81       	ldd	r31, Y+3	; 0x03
     614:	a2 81       	ldd	r26, Z+2	; 0x02
     616:	b3 81       	ldd	r27, Z+3	; 0x03
     618:	ec 91       	ld	r30, X
     61a:	21 e0       	ldi	r18, 0x01	; 1
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	40 e0       	ldi	r20, 0x00	; 0
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__ashldi3>
     62e:	20 95       	com	r18
     630:	e2 23       	and	r30, r18
     632:	ec 93       	st	X, r30
     634:	0c 81       	ldd	r16, Y+4	; 0x04
     636:	e8 e1       	ldi	r30, 0x18	; 24
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	40 80       	ld	r4, Z
     63c:	51 80       	ldd	r5, Z+1	; 0x01
     63e:	62 80       	ldd	r6, Z+2	; 0x02
     640:	73 80       	ldd	r7, Z+3	; 0x03
     642:	21 e0       	ldi	r18, 0x01	; 1
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	40 e0       	ldi	r20, 0x00	; 0
     648:	50 e0       	ldi	r21, 0x00	; 0
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__ashldi3>
     656:	82 2e       	mov	r8, r18
     658:	93 2e       	mov	r9, r19
     65a:	a4 2e       	mov	r10, r20
     65c:	b5 2e       	mov	r11, r21
     65e:	80 94       	com	r8
     660:	90 94       	com	r9
     662:	a0 94       	com	r10
     664:	b0 94       	com	r11
     666:	84 20       	and	r8, r4
     668:	95 20       	and	r9, r5
     66a:	a6 20       	and	r10, r6
     66c:	b7 20       	and	r11, r7
     66e:	80 82       	st	Z, r8
     670:	91 82       	std	Z+1, r9	; 0x01
     672:	a2 82       	std	Z+2, r10	; 0x02
     674:	b3 82       	std	Z+3, r11	; 0x03
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	ce 01       	movw	r24, r28
     67a:	0e 94 96 02 	call	0x52c	; 0x52c <_ZN6driver10atmega328p4Gpio15enableInterruptEb>
     67e:	1b 82       	std	Y+3, r1	; 0x03
     680:	1a 82       	std	Y+2, r1	; 0x02
     682:	88 e8       	ldi	r24, 0x88	; 136
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	99 83       	std	Y+1, r25	; 0x01
     688:	88 83       	st	Y, r24
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	0f 91       	pop	r16
     690:	ff 90       	pop	r15
     692:	ef 90       	pop	r14
     694:	df 90       	pop	r13
     696:	cf 90       	pop	r12
     698:	bf 90       	pop	r11
     69a:	af 90       	pop	r10
     69c:	9f 90       	pop	r9
     69e:	8f 90       	pop	r8
     6a0:	7f 90       	pop	r7
     6a2:	6f 90       	pop	r6
     6a4:	5f 90       	pop	r5
     6a6:	4f 90       	pop	r4
     6a8:	08 95       	ret

000006aa <_ZN6driver10atmega328p4GpioD0Ev>:
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	ec 01       	movw	r28, r24
     6b0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6driver10atmega328p4GpioD1Ev>
     6b4:	65 e0       	ldi	r22, 0x05	; 5
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	ce 01       	movw	r24, r28
     6ba:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <_ZdlPvj>
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <_ZN6driver10atmega328p4Gpio12initHardwareEh>:
     6c4:	88 30       	cpi	r24, 0x08	; 8
     6c6:	20 f0       	brcs	.+8      	; 0x6d0 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0xc>
     6c8:	8e 30       	cpi	r24, 0x0E	; 14
     6ca:	20 f0       	brcs	.+8      	; 0x6d4 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x10>
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x12>
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x12>
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	91 11       	cpse	r25, r1
     6d8:	0f c0       	rjmp	.+30     	; 0x6f8 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x34>
     6da:	8e 30       	cpi	r24, 0x0E	; 14
     6dc:	18 f0       	brcs	.+6      	; 0x6e4 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x20>
     6de:	84 31       	cpi	r24, 0x14	; 20
     6e0:	08 f4       	brcc	.+2      	; 0x6e4 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x20>
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	91 11       	cpse	r25, r1
     6e6:	0b c0       	rjmp	.+22     	; 0x6fe <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x3a>
     6e8:	86 30       	cpi	r24, 0x06	; 6
     6ea:	08 f4       	brcc	.+2      	; 0x6ee <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x2a>
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	99 23       	and	r25, r25
     6f0:	49 f0       	breq	.+18     	; 0x704 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x40>
     6f2:	8a e0       	ldi	r24, 0x0A	; 10
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	08 95       	ret
     6f8:	8e e1       	ldi	r24, 0x1E	; 30
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	08 95       	ret
     6fe:	84 e1       	ldi	r24, 0x14	; 20
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	08 95       	ret
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	08 95       	ret

0000070a <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE>:
     70a:	4f 92       	push	r4
     70c:	5f 92       	push	r5
     70e:	6f 92       	push	r6
     710:	7f 92       	push	r7
     712:	8f 92       	push	r8
     714:	9f 92       	push	r9
     716:	af 92       	push	r10
     718:	bf 92       	push	r11
     71a:	cf 92       	push	r12
     71c:	df 92       	push	r13
     71e:	ef 92       	push	r14
     720:	ff 92       	push	r15
     722:	0f 93       	push	r16
     724:	e8 2f       	mov	r30, r24
     726:	84 31       	cpi	r24, 0x14	; 20
     728:	d8 f4       	brcc	.+54     	; 0x760 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x56>
     72a:	63 30       	cpi	r22, 0x03	; 3
     72c:	d8 f4       	brcc	.+54     	; 0x764 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x5a>
     72e:	84 31       	cpi	r24, 0x14	; 20
     730:	a8 f4       	brcc	.+42     	; 0x75c <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x52>
     732:	80 90 18 03 	lds	r8, 0x0318	; 0x800318 <_ZN6driver10atmega328p12_GLOBAL__N_19GpioParam11pinRegistryE>
     736:	90 90 19 03 	lds	r9, 0x0319	; 0x800319 <_ZN6driver10atmega328p12_GLOBAL__N_19GpioParam11pinRegistryE+0x1>
     73a:	a0 90 1a 03 	lds	r10, 0x031A	; 0x80031a <_ZN6driver10atmega328p12_GLOBAL__N_19GpioParam11pinRegistryE+0x2>
     73e:	b0 90 1b 03 	lds	r11, 0x031B	; 0x80031b <_ZN6driver10atmega328p12_GLOBAL__N_19GpioParam11pinRegistryE+0x3>
     742:	28 2d       	mov	r18, r8
     744:	39 2d       	mov	r19, r9
     746:	4a 2d       	mov	r20, r10
     748:	5b 2d       	mov	r21, r11
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0e 2f       	mov	r16, r30
     754:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <__lshrdi3>
     758:	21 70       	andi	r18, 0x01	; 1
     75a:	05 c0       	rjmp	.+10     	; 0x766 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x5c>
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	03 c0       	rjmp	.+6      	; 0x766 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x5c>
     760:	21 e0       	ldi	r18, 0x01	; 1
     762:	01 c0       	rjmp	.+2      	; 0x766 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x5c>
     764:	21 e0       	ldi	r18, 0x01	; 1
     766:	21 11       	cpse	r18, r1
     768:	28 c0       	rjmp	.+80     	; 0x7ba <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0xb0>
     76a:	0e 2f       	mov	r16, r30
     76c:	8e 2f       	mov	r24, r30
     76e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN6driver10atmega328p4Gpio12initHardwareEh>
     772:	fc 01       	movw	r30, r24
     774:	00 97       	sbiw	r24, 0x00	; 0
     776:	21 f1       	breq	.+72     	; 0x7c0 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0xb6>
     778:	a8 e1       	ldi	r26, 0x18	; 24
     77a:	b3 e0       	ldi	r27, 0x03	; 3
     77c:	4d 90       	ld	r4, X+
     77e:	5d 90       	ld	r5, X+
     780:	6d 90       	ld	r6, X+
     782:	7c 90       	ld	r7, X
     784:	13 97       	sbiw	r26, 0x03	; 3
     786:	21 e0       	ldi	r18, 0x01	; 1
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	40 e0       	ldi	r20, 0x00	; 0
     78c:	50 e0       	ldi	r21, 0x00	; 0
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__ashldi3>
     79a:	82 2e       	mov	r8, r18
     79c:	93 2e       	mov	r9, r19
     79e:	a4 2e       	mov	r10, r20
     7a0:	b5 2e       	mov	r11, r21
     7a2:	84 28       	or	r8, r4
     7a4:	95 28       	or	r9, r5
     7a6:	a6 28       	or	r10, r6
     7a8:	b7 28       	or	r11, r7
     7aa:	8d 92       	st	X+, r8
     7ac:	9d 92       	st	X+, r9
     7ae:	ad 92       	st	X+, r10
     7b0:	bc 92       	st	X, r11
     7b2:	13 97       	sbiw	r26, 0x03	; 3
     7b4:	8e 2f       	mov	r24, r30
     7b6:	9f 2f       	mov	r25, r31
     7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0xb8>
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	01 c0       	rjmp	.+2      	; 0x7c2 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0xb8>
     7c0:	9f 2f       	mov	r25, r31
     7c2:	0f 91       	pop	r16
     7c4:	ff 90       	pop	r15
     7c6:	ef 90       	pop	r14
     7c8:	df 90       	pop	r13
     7ca:	cf 90       	pop	r12
     7cc:	bf 90       	pop	r11
     7ce:	af 90       	pop	r10
     7d0:	9f 90       	pop	r9
     7d2:	8f 90       	pop	r8
     7d4:	7f 90       	pop	r7
     7d6:	6f 90       	pop	r6
     7d8:	5f 90       	pop	r5
     7da:	4f 90       	pop	r4
     7dc:	08 95       	ret

000007de <_ZN6driver10atmega328p4Gpio12setDirectionENS1_9DirectionE>:
     7de:	0f 93       	push	r16
     7e0:	61 30       	cpi	r22, 0x01	; 1
     7e2:	c9 f4       	brne	.+50     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     7e4:	dc 01       	movw	r26, r24
     7e6:	14 96       	adiw	r26, 0x04	; 4
     7e8:	0c 91       	ld	r16, X
     7ea:	14 97       	sbiw	r26, 0x04	; 4
     7ec:	12 96       	adiw	r26, 0x02	; 2
     7ee:	ed 91       	ld	r30, X+
     7f0:	fc 91       	ld	r31, X
     7f2:	13 97       	sbiw	r26, 0x03	; 3
     7f4:	02 80       	ldd	r0, Z+2	; 0x02
     7f6:	f3 81       	ldd	r31, Z+3	; 0x03
     7f8:	e0 2d       	mov	r30, r0
     7fa:	a0 81       	ld	r26, Z
     7fc:	21 e0       	ldi	r18, 0x01	; 1
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	40 e0       	ldi	r20, 0x00	; 0
     802:	50 e0       	ldi	r21, 0x00	; 0
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__ashldi3>
     810:	2a 2b       	or	r18, r26
     812:	20 83       	st	Z, r18
     814:	17 c0       	rjmp	.+46     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     816:	62 30       	cpi	r22, 0x02	; 2
     818:	a9 f4       	brne	.+42     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     81a:	fc 01       	movw	r30, r24
     81c:	04 81       	ldd	r16, Z+4	; 0x04
     81e:	02 80       	ldd	r0, Z+2	; 0x02
     820:	f3 81       	ldd	r31, Z+3	; 0x03
     822:	e0 2d       	mov	r30, r0
     824:	01 90       	ld	r0, Z+
     826:	f0 81       	ld	r31, Z
     828:	e0 2d       	mov	r30, r0
     82a:	a0 81       	ld	r26, Z
     82c:	21 e0       	ldi	r18, 0x01	; 1
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	40 e0       	ldi	r20, 0x00	; 0
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__ashldi3>
     840:	2a 2b       	or	r18, r26
     842:	20 83       	st	Z, r18
     844:	0f 91       	pop	r16
     846:	08 95       	ret

00000848 <_ZN9container5ArrayIPFvvELj3EEC1Ev>:
     848:	26 e0       	ldi	r18, 0x06	; 6
     84a:	fc 01       	movw	r30, r24
     84c:	11 92       	st	Z+, r1
     84e:	2a 95       	dec	r18
     850:	e9 f7       	brne	.-6      	; 0x84c <_ZN9container5ArrayIPFvvELj3EEC1Ev+0x4>
     852:	08 95       	ret

00000854 <_ZN9container13CallbackArrayILj3EEC1Ev>:
     854:	0e 94 24 04 	call	0x848	; 0x848 <_ZN9container5ArrayIPFvvELj3EEC1Ev>
     858:	08 95       	ret

0000085a <_ZNK9container13CallbackArrayILj3EE12isIndexValidEj>:
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	63 30       	cpi	r22, 0x03	; 3
     85e:	71 05       	cpc	r23, r1
     860:	08 f0       	brcs	.+2      	; 0x864 <_ZNK9container13CallbackArrayILj3EE12isIndexValidEj+0xa>
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	08 95       	ret

00000866 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj>:
     866:	ef 92       	push	r14
     868:	ff 92       	push	r15
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	8c 01       	movw	r16, r24
     874:	7b 01       	movw	r14, r22
     876:	ea 01       	movw	r28, r20
     878:	ba 01       	movw	r22, r20
     87a:	0e 94 2d 04 	call	0x85a	; 0x85a <_ZNK9container13CallbackArrayILj3EE12isIndexValidEj>
     87e:	88 23       	and	r24, r24
     880:	21 f0       	breq	.+8      	; 0x88a <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x24>
     882:	e1 14       	cp	r14, r1
     884:	f1 04       	cpc	r15, r1
     886:	19 f4       	brne	.+6      	; 0x88e <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x28>
     888:	03 c0       	rjmp	.+6      	; 0x890 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x2a>
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	01 c0       	rjmp	.+2      	; 0x890 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x2a>
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	81 11       	cpse	r24, r1
     892:	08 c0       	rjmp	.+16     	; 0x8a4 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x3e>
     894:	cc 0f       	add	r28, r28
     896:	dd 1f       	adc	r29, r29
     898:	c0 0f       	add	r28, r16
     89a:	d1 1f       	adc	r29, r17
     89c:	f9 82       	std	Y+1, r15	; 0x01
     89e:	e8 82       	st	Y, r14
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x40>
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	1f 91       	pop	r17
     8ac:	0f 91       	pop	r16
     8ae:	ff 90       	pop	r15
     8b0:	ef 90       	pop	r14
     8b2:	08 95       	ret

000008b4 <_ZNK6driver10atmega328p4Gpio11setCallbackEPFvvE>:
     8b4:	dc 01       	movw	r26, r24
     8b6:	12 96       	adiw	r26, 0x02	; 2
     8b8:	ed 91       	ld	r30, X+
     8ba:	fc 91       	ld	r31, X
     8bc:	13 97       	sbiw	r26, 0x03	; 3
     8be:	02 80       	ldd	r0, Z+2	; 0x02
     8c0:	f3 81       	ldd	r31, Z+3	; 0x03
     8c2:	e0 2d       	mov	r30, r0
     8c4:	90 81       	ld	r25, Z
     8c6:	85 b1       	in	r24, 0x05	; 5
     8c8:	98 13       	cpse	r25, r24
     8ca:	07 c0       	rjmp	.+14     	; 0x8da <_ZNK6driver10atmega328p4Gpio11setCallbackEPFvvE+0x26>
     8cc:	40 e0       	ldi	r20, 0x00	; 0
     8ce:	50 e0       	ldi	r21, 0x00	; 0
     8d0:	8c e1       	ldi	r24, 0x1C	; 28
     8d2:	93 e0       	ldi	r25, 0x03	; 3
     8d4:	0e 94 33 04 	call	0x866	; 0x866 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj>
     8d8:	08 95       	ret
     8da:	90 81       	ld	r25, Z
     8dc:	88 b1       	in	r24, 0x08	; 8
     8de:	98 13       	cpse	r25, r24
     8e0:	07 c0       	rjmp	.+14     	; 0x8f0 <_ZNK6driver10atmega328p4Gpio11setCallbackEPFvvE+0x3c>
     8e2:	41 e0       	ldi	r20, 0x01	; 1
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	8c e1       	ldi	r24, 0x1C	; 28
     8e8:	93 e0       	ldi	r25, 0x03	; 3
     8ea:	0e 94 33 04 	call	0x866	; 0x866 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj>
     8ee:	08 95       	ret
     8f0:	90 81       	ld	r25, Z
     8f2:	8b b1       	in	r24, 0x0b	; 11
     8f4:	98 13       	cpse	r25, r24
     8f6:	06 c0       	rjmp	.+12     	; 0x904 <__stack+0x5>
     8f8:	42 e0       	ldi	r20, 0x02	; 2
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	8c e1       	ldi	r24, 0x1C	; 28
     8fe:	93 e0       	ldi	r25, 0x03	; 3
     900:	0e 94 33 04 	call	0x866	; 0x866 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj>
     904:	08 95       	ret

00000906 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE>:
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	8c 01       	movw	r16, r24
     914:	c6 2f       	mov	r28, r22
     916:	d4 2f       	mov	r29, r20
     918:	79 01       	movw	r14, r18
     91a:	8c e9       	ldi	r24, 0x9C	; 156
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	f8 01       	movw	r30, r16
     920:	91 83       	std	Z+1, r25	; 0x01
     922:	80 83       	st	Z, r24
     924:	64 2f       	mov	r22, r20
     926:	8c 2f       	mov	r24, r28
     928:	0e 94 85 03 	call	0x70a	; 0x70a <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE>
     92c:	9c 01       	movw	r18, r24
     92e:	f8 01       	movw	r30, r16
     930:	93 83       	std	Z+3, r25	; 0x03
     932:	82 83       	std	Z+2, r24	; 0x02
     934:	c8 30       	cpi	r28, 0x08	; 8
     936:	20 f0       	brcs	.+8      	; 0x940 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x3a>
     938:	ce 30       	cpi	r28, 0x0E	; 14
     93a:	20 f0       	brcs	.+8      	; 0x944 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x3e>
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	03 c0       	rjmp	.+6      	; 0x946 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x40>
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	01 c0       	rjmp	.+2      	; 0x946 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x40>
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	99 23       	and	r25, r25
     948:	11 f0       	breq	.+4      	; 0x94e <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x48>
     94a:	c8 50       	subi	r28, 0x08	; 8
     94c:	0f c0       	rjmp	.+30     	; 0x96c <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x66>
     94e:	ce 30       	cpi	r28, 0x0E	; 14
     950:	18 f0       	brcs	.+6      	; 0x958 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x52>
     952:	c4 31       	cpi	r28, 0x14	; 20
     954:	08 f4       	brcc	.+2      	; 0x958 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x52>
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	99 23       	and	r25, r25
     95a:	11 f0       	breq	.+4      	; 0x960 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x5a>
     95c:	ce 50       	subi	r28, 0x0E	; 14
     95e:	06 c0       	rjmp	.+12     	; 0x96c <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x66>
     960:	c6 30       	cpi	r28, 0x06	; 6
     962:	08 f4       	brcc	.+2      	; 0x966 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x60>
     964:	91 e0       	ldi	r25, 0x01	; 1
     966:	91 11       	cpse	r25, r1
     968:	01 c0       	rjmp	.+2      	; 0x96c <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x66>
     96a:	cf ef       	ldi	r28, 0xFF	; 255
     96c:	f8 01       	movw	r30, r16
     96e:	c4 83       	std	Z+4, r28	; 0x04
     970:	23 2b       	or	r18, r19
     972:	59 f0       	breq	.+22     	; 0x98a <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x84>
     974:	6d 2f       	mov	r22, r29
     976:	c8 01       	movw	r24, r16
     978:	0e 94 ef 03 	call	0x7de	; 0x7de <_ZN6driver10atmega328p4Gpio12setDirectionENS1_9DirectionE>
     97c:	e1 14       	cp	r14, r1
     97e:	f1 04       	cpc	r15, r1
     980:	21 f0       	breq	.+8      	; 0x98a <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE+0x84>
     982:	b7 01       	movw	r22, r14
     984:	c8 01       	movw	r24, r16
     986:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZNK6driver10atmega328p4Gpio11setCallbackEPFvvE>
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	08 95       	ret

00000998 <_ZNK9container13CallbackArrayILj3EE17isCallbackDefinedEj>:
     998:	66 0f       	add	r22, r22
     99a:	77 1f       	adc	r23, r23
     99c:	86 0f       	add	r24, r22
     99e:	97 1f       	adc	r25, r23
     9a0:	fc 01       	movw	r30, r24
     9a2:	20 81       	ld	r18, Z
     9a4:	31 81       	ldd	r19, Z+1	; 0x01
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	23 2b       	or	r18, r19
     9aa:	09 f4       	brne	.+2      	; 0x9ae <_ZNK9container13CallbackArrayILj3EE17isCallbackDefinedEj+0x16>
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	08 95       	ret

000009b0 <_ZN9container13CallbackArrayILj3EE6invokeEj>:
     9b0:	ef 92       	push	r14
     9b2:	ff 92       	push	r15
     9b4:	1f 93       	push	r17
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	7c 01       	movw	r14, r24
     9bc:	eb 01       	movw	r28, r22
     9be:	0e 94 2d 04 	call	0x85a	; 0x85a <_ZNK9container13CallbackArrayILj3EE12isIndexValidEj>
     9c2:	18 2f       	mov	r17, r24
     9c4:	88 23       	and	r24, r24
     9c6:	41 f0       	breq	.+16     	; 0x9d8 <_ZN9container13CallbackArrayILj3EE6invokeEj+0x28>
     9c8:	be 01       	movw	r22, r28
     9ca:	c7 01       	movw	r24, r14
     9cc:	0e 94 cc 04 	call	0x998	; 0x998 <_ZNK9container13CallbackArrayILj3EE17isCallbackDefinedEj>
     9d0:	88 23       	and	r24, r24
     9d2:	19 f0       	breq	.+6      	; 0x9da <_ZN9container13CallbackArrayILj3EE6invokeEj+0x2a>
     9d4:	10 e0       	ldi	r17, 0x00	; 0
     9d6:	01 c0       	rjmp	.+2      	; 0x9da <_ZN9container13CallbackArrayILj3EE6invokeEj+0x2a>
     9d8:	11 e0       	ldi	r17, 0x01	; 1
     9da:	11 11       	cpse	r17, r1
     9dc:	09 c0       	rjmp	.+18     	; 0x9f0 <_ZN9container13CallbackArrayILj3EE6invokeEj+0x40>
     9de:	cc 0f       	add	r28, r28
     9e0:	dd 1f       	adc	r29, r29
     9e2:	ce 0d       	add	r28, r14
     9e4:	df 1d       	adc	r29, r15
     9e6:	e8 81       	ld	r30, Y
     9e8:	f9 81       	ldd	r31, Y+1	; 0x01
     9ea:	09 95       	icall
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <_ZN9container13CallbackArrayILj3EE6invokeEj+0x42>
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	ff 90       	pop	r15
     9fa:	ef 90       	pop	r14
     9fc:	08 95       	ret

000009fe <__vector_3>:
     9fe:	1f 92       	push	r1
     a00:	0f 92       	push	r0
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	0f 92       	push	r0
     a06:	11 24       	eor	r1, r1
     a08:	2f 93       	push	r18
     a0a:	3f 93       	push	r19
     a0c:	4f 93       	push	r20
     a0e:	5f 93       	push	r21
     a10:	6f 93       	push	r22
     a12:	7f 93       	push	r23
     a14:	8f 93       	push	r24
     a16:	9f 93       	push	r25
     a18:	af 93       	push	r26
     a1a:	bf 93       	push	r27
     a1c:	ef 93       	push	r30
     a1e:	ff 93       	push	r31
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	8c e1       	ldi	r24, 0x1C	; 28
     a26:	93 e0       	ldi	r25, 0x03	; 3
     a28:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <_ZN9container13CallbackArrayILj3EE6invokeEj>
     a2c:	ff 91       	pop	r31
     a2e:	ef 91       	pop	r30
     a30:	bf 91       	pop	r27
     a32:	af 91       	pop	r26
     a34:	9f 91       	pop	r25
     a36:	8f 91       	pop	r24
     a38:	7f 91       	pop	r23
     a3a:	6f 91       	pop	r22
     a3c:	5f 91       	pop	r21
     a3e:	4f 91       	pop	r20
     a40:	3f 91       	pop	r19
     a42:	2f 91       	pop	r18
     a44:	0f 90       	pop	r0
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	0f 90       	pop	r0
     a4a:	1f 90       	pop	r1
     a4c:	18 95       	reti

00000a4e <__vector_4>:
     a4e:	1f 92       	push	r1
     a50:	0f 92       	push	r0
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	0f 92       	push	r0
     a56:	11 24       	eor	r1, r1
     a58:	2f 93       	push	r18
     a5a:	3f 93       	push	r19
     a5c:	4f 93       	push	r20
     a5e:	5f 93       	push	r21
     a60:	6f 93       	push	r22
     a62:	7f 93       	push	r23
     a64:	8f 93       	push	r24
     a66:	9f 93       	push	r25
     a68:	af 93       	push	r26
     a6a:	bf 93       	push	r27
     a6c:	ef 93       	push	r30
     a6e:	ff 93       	push	r31
     a70:	61 e0       	ldi	r22, 0x01	; 1
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	8c e1       	ldi	r24, 0x1C	; 28
     a76:	93 e0       	ldi	r25, 0x03	; 3
     a78:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <_ZN9container13CallbackArrayILj3EE6invokeEj>
     a7c:	ff 91       	pop	r31
     a7e:	ef 91       	pop	r30
     a80:	bf 91       	pop	r27
     a82:	af 91       	pop	r26
     a84:	9f 91       	pop	r25
     a86:	8f 91       	pop	r24
     a88:	7f 91       	pop	r23
     a8a:	6f 91       	pop	r22
     a8c:	5f 91       	pop	r21
     a8e:	4f 91       	pop	r20
     a90:	3f 91       	pop	r19
     a92:	2f 91       	pop	r18
     a94:	0f 90       	pop	r0
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	0f 90       	pop	r0
     a9a:	1f 90       	pop	r1
     a9c:	18 95       	reti

00000a9e <__vector_5>:
     a9e:	1f 92       	push	r1
     aa0:	0f 92       	push	r0
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	0f 92       	push	r0
     aa6:	11 24       	eor	r1, r1
     aa8:	2f 93       	push	r18
     aaa:	3f 93       	push	r19
     aac:	4f 93       	push	r20
     aae:	5f 93       	push	r21
     ab0:	6f 93       	push	r22
     ab2:	7f 93       	push	r23
     ab4:	8f 93       	push	r24
     ab6:	9f 93       	push	r25
     ab8:	af 93       	push	r26
     aba:	bf 93       	push	r27
     abc:	ef 93       	push	r30
     abe:	ff 93       	push	r31
     ac0:	62 e0       	ldi	r22, 0x02	; 2
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	8c e1       	ldi	r24, 0x1C	; 28
     ac6:	93 e0       	ldi	r25, 0x03	; 3
     ac8:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <_ZN9container13CallbackArrayILj3EE6invokeEj>
     acc:	ff 91       	pop	r31
     ace:	ef 91       	pop	r30
     ad0:	bf 91       	pop	r27
     ad2:	af 91       	pop	r26
     ad4:	9f 91       	pop	r25
     ad6:	8f 91       	pop	r24
     ad8:	7f 91       	pop	r23
     ada:	6f 91       	pop	r22
     adc:	5f 91       	pop	r21
     ade:	4f 91       	pop	r20
     ae0:	3f 91       	pop	r19
     ae2:	2f 91       	pop	r18
     ae4:	0f 90       	pop	r0
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	0f 90       	pop	r0
     aea:	1f 90       	pop	r1
     aec:	18 95       	reti

00000aee <_Z41__static_initialization_and_destruction_0ii>:

// -----------------------------------------------------------------------------
ISR (PCINT2_vect) { invokeCallback(CallbackIndex::PortD); }

} // namespace atmega328p
} // namespace driver
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	39 f4       	brne	.+14     	; 0xb00 <_Z41__static_initialization_and_destruction_0ii+0x12>
     af2:	6f 3f       	cpi	r22, 0xFF	; 255
     af4:	7f 4f       	sbci	r23, 0xFF	; 255
     af6:	21 f4       	brne	.+8      	; 0xb00 <_Z41__static_initialization_and_destruction_0ii+0x12>
    /** Pin registry (1 = reserved, 0 = free). */
    static uint32_t pinRegistry;
};

/** Pointers to callbacks. */
container::CallbackArray<GpioParam::IoPortCount> GpioParam::callbacks{};
     af8:	8c e1       	ldi	r24, 0x1C	; 28
     afa:	93 e0       	ldi	r25, 0x03	; 3
     afc:	0e 94 2a 04 	call	0x854	; 0x854 <_ZN9container13CallbackArrayILj3EEC1Ev>
     b00:	08 95       	ret

00000b02 <_GLOBAL__sub_I__ZN6driver10atmega328p4Gpio9myHwPortBE>:

// -----------------------------------------------------------------------------
ISR (PCINT2_vect) { invokeCallback(CallbackIndex::PortD); }

} // namespace atmega328p
} // namespace driver
     b02:	6f ef       	ldi	r22, 0xFF	; 255
     b04:	7f ef       	ldi	r23, 0xFF	; 255
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 77 05 	call	0xaee	; 0xaee <_Z41__static_initialization_and_destruction_0ii>
     b0e:	08 95       	ret

00000b10 <_GLOBAL__sub_D__ZN6driver10atmega328p4Gpio9myHwPortBE>:
     b10:	6f ef       	ldi	r22, 0xFF	; 255
     b12:	7f ef       	ldi	r23, 0xFF	; 255
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	0e 94 77 05 	call	0xaee	; 0xaee <_Z41__static_initialization_and_destruction_0ii>
     b1c:	08 95       	ret

00000b1e <_ZN6driver10atmega328p12_GLOBAL__N_112transmitCharEc>:
    static constexpr char NewLine{'\n'};
};

// -----------------------------------------------------------------------------
void transmitChar(const char character) noexcept
{
     b1e:	0f 93       	push	r16
     b20:	e8 2f       	mov	r30, r24
// -----------------------------------------------------------------------------
template <typename T>
constexpr bool read(const volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    return reg & (1ULL << bit);
     b22:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	40 e0       	ldi	r20, 0x00	; 0
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	05 e0       	ldi	r16, 0x05	; 5
     b36:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <__lshrdi3>
     b3a:	21 70       	andi	r18, 0x01	; 1
    // Wait until the previous character has been sent.
    while (!utils::read(UCSR0A, UDRE0));
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	40 e0       	ldi	r20, 0x00	; 0
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	60 e0       	ldi	r22, 0x00	; 0
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	a0 e0       	ldi	r26, 0x00	; 0
     b4c:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__cmpdi2_s8>
     b50:	41 f3       	breq	.-48     	; 0xb22 <_ZN6driver10atmega328p12_GLOBAL__N_112transmitCharEc+0x4>

    // Put the new character in the transmission register.
    UDR0 = character;
     b52:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
     b56:	0f 91       	pop	r16
     b58:	08 95       	ret

00000b5a <__tcf_0>:
{
public:
    /**
     * @brief Delete the serial device.
     */
    virtual ~SerialInterface() noexcept = default;
     b5a:	80 eb       	ldi	r24, 0xB0	; 176
     b5c:	91 e0       	ldi	r25, 0x01	; 1
     b5e:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <_ZZN6driver10atmega328p6Serial11getInstanceEvE10myInstance+0x1>
     b62:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <_ZZN6driver10atmega328p6Serial11getInstanceEvE10myInstance>
     b66:	08 95       	ret

00000b68 <_ZNK6driver10atmega328p6Serial12baudRate_bpsEv>:
    // Return a reference to the singleton serial instance, cast to the corresponding interface.
    return myInstance; 
}

// -----------------------------------------------------------------------------
uint32_t Serial::baudRate_bps() const { return Param::BaudRate_bps; }
     b68:	60 e8       	ldi	r22, 0x80	; 128
     b6a:	75 e2       	ldi	r23, 0x25	; 37
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	08 95       	ret

00000b72 <_ZNK6driver10atmega328p6Serial13isInitializedEv>:

// -----------------------------------------------------------------------------
bool Serial::isInitialized() const noexcept { return true; }
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	08 95       	ret

00000b76 <_ZNK6driver10atmega328p6Serial9isEnabledEv>:

// -----------------------------------------------------------------------------
bool Serial::isEnabled() const noexcept { return myEnabled; }
     b76:	fc 01       	movw	r30, r24
     b78:	82 81       	ldd	r24, Z+2	; 0x02
     b7a:	08 95       	ret

00000b7c <_ZN6driver10atmega328p6Serial10setEnabledEb>:

// -----------------------------------------------------------------------------
void Serial::setEnabled(const bool enable) noexcept { myEnabled = enable; }
     b7c:	fc 01       	movw	r30, r24
     b7e:	62 83       	std	Z+2, r22	; 0x02
     b80:	08 95       	ret

00000b82 <_ZNK6driver10atmega328p6Serial5printEPKc>:
    UDR0 = Param::CarriageReturn;
}

// -----------------------------------------------------------------------------
void Serial::print(const char* message) const noexcept
{
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	eb 01       	movw	r28, r22
    // Terminate the function if serial transmission isn't enabled.
    if (!myEnabled) { return; }
     b88:	fc 01       	movw	r30, r24
     b8a:	82 81       	ldd	r24, Z+2	; 0x02
     b8c:	88 23       	and	r24, r24
     b8e:	69 f0       	breq	.+26     	; 0xbaa <_ZNK6driver10atmega328p6Serial5printEPKc+0x28>

    // Transmit each character of the string one by one.
    for (const char* it{message}; *it; ++it)
     b90:	88 81       	ld	r24, Y
     b92:	88 23       	and	r24, r24
     b94:	51 f0       	breq	.+20     	; 0xbaa <_ZNK6driver10atmega328p6Serial5printEPKc+0x28>
    {
        transmitChar(*it);
     b96:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN6driver10atmega328p12_GLOBAL__N_112transmitCharEc>
        
        // Send new line characters instead of carriage returns.
        if (Param::CarriageReturn == *it) 
     b9a:	88 81       	ld	r24, Y
     b9c:	8d 30       	cpi	r24, 0x0D	; 13
     b9e:	19 f4       	brne	.+6      	; 0xba6 <_ZNK6driver10atmega328p6Serial5printEPKc+0x24>
        { 
            transmitChar(Param::NewLine); 
     ba0:	8a e0       	ldi	r24, 0x0A	; 10
     ba2:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN6driver10atmega328p12_GLOBAL__N_112transmitCharEc>
{
    // Terminate the function if serial transmission isn't enabled.
    if (!myEnabled) { return; }

    // Transmit each character of the string one by one.
    for (const char* it{message}; *it; ++it)
     ba6:	21 96       	adiw	r28, 0x01	; 1
     ba8:	f3 cf       	rjmp	.-26     	; 0xb90 <_ZNK6driver10atmega328p6Serial5printEPKc+0xe>
        if (Param::CarriageReturn == *it) 
        { 
            transmitChar(Param::NewLine); 
        }
    }
}
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	08 95       	ret

00000bb0 <_ZN6driver10atmega328p6SerialD1Ev>:
     bb0:	20 eb       	ldi	r18, 0xB0	; 176
     bb2:	31 e0       	ldi	r19, 0x01	; 1
     bb4:	fc 01       	movw	r30, r24
     bb6:	31 83       	std	Z+1, r19	; 0x01
     bb8:	20 83       	st	Z, r18
     bba:	08 95       	ret

00000bbc <_ZN6driver10atmega328p6SerialD0Ev>:
     bbc:	20 eb       	ldi	r18, 0xB0	; 176
     bbe:	31 e0       	ldi	r19, 0x01	; 1
     bc0:	fc 01       	movw	r30, r24
     bc2:	31 83       	std	Z+1, r19	; 0x01
     bc4:	20 83       	st	Z, r18
    Serial() noexcept;

    /**
     * @brief Delete the serial device.
     */
    ~Serial() noexcept override = default;
     bc6:	63 e0       	ldi	r22, 0x03	; 3
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <_ZdlPvj>
     bce:	08 95       	ret

00000bd0 <_ZN6driver10atmega328p6SerialC1Ev>:
// -----------------------------------------------------------------------------
void Serial::setEnabled(const bool enable) noexcept { myEnabled = enable; }

// -----------------------------------------------------------------------------
Serial::Serial() noexcept 
    : myEnabled{false}
     bd0:	22 ec       	ldi	r18, 0xC2	; 194
     bd2:	31 e0       	ldi	r19, 0x01	; 1
     bd4:	fc 01       	movw	r30, r24
     bd6:	31 83       	std	Z+1, r19	; 0x01
     bd8:	20 83       	st	Z, r18
     bda:	12 82       	std	Z+2, r1	; 0x02
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
     bdc:	e1 ec       	ldi	r30, 0xC1	; 193
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	88 60       	ori	r24, 0x08	; 8
     be4:	80 83       	st	Z, r24
     be6:	e2 ec       	ldi	r30, 0xC2	; 194
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	82 60       	ori	r24, 0x02	; 2
     bee:	80 83       	st	Z, r24
     bf0:	80 81       	ld	r24, Z
     bf2:	84 60       	ori	r24, 0x04	; 4
     bf4:	80 83       	st	Z, r24

    // Set the data size to eight bits per byte.
    utils::set(UCSR0C, UCSZ00, UCSZ01);

    // Set the baud rate to 9600 kbps.
    UBRR0 = baudRateValue;
     bf6:	87 e6       	ldi	r24, 0x67	; 103
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     bfe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

    // Send carriage return to align the first message left.
    UDR0 = Param::CarriageReturn;
     c02:	8d e0       	ldi	r24, 0x0D	; 13
     c04:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     c08:	08 95       	ret

00000c0a <_ZN6driver10atmega328p6Serial11getInstanceEv>:

// -----------------------------------------------------------------------------
SerialInterface& Serial::getInstance() noexcept
{ 
    // Create and initialize the singleton serial instance (once only).
    static Serial myInstance{};
     c0a:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <_ZGVZN6driver10atmega328p6Serial11getInstanceEvE10myInstance>
     c0e:	81 11       	cpse	r24, r1
     c10:	12 c0       	rjmp	.+36     	; 0xc36 <_ZN6driver10atmega328p6Serial11getInstanceEv+0x2c>
     c12:	85 e2       	ldi	r24, 0x25	; 37
     c14:	93 e0       	ldi	r25, 0x03	; 3
     c16:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__cxa_guard_acquire>
     c1a:	89 2b       	or	r24, r25
     c1c:	61 f0       	breq	.+24     	; 0xc36 <_ZN6driver10atmega328p6Serial11getInstanceEv+0x2c>
     c1e:	82 e2       	ldi	r24, 0x22	; 34
     c20:	93 e0       	ldi	r25, 0x03	; 3
     c22:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZN6driver10atmega328p6SerialC1Ev>
     c26:	85 e2       	ldi	r24, 0x25	; 37
     c28:	93 e0       	ldi	r25, 0x03	; 3
     c2a:	0e 94 ef 14 	call	0x29de	; 0x29de <__cxa_guard_release>
     c2e:	8d ea       	ldi	r24, 0xAD	; 173
     c30:	95 e0       	ldi	r25, 0x05	; 5
     c32:	0e 94 77 00 	call	0xee	; 0xee <atexit>

    // Return a reference to the singleton serial instance, cast to the corresponding interface.
    return myInstance; 
}
     c36:	82 e2       	ldi	r24, 0x22	; 34
     c38:	93 e0       	ldi	r25, 0x03	; 3
     c3a:	08 95       	ret

00000c3c <_ZNK6driver10atmega328p5Timer13isInitializedEv>:
     c3c:	21 e0       	ldi	r18, 0x01	; 1
     c3e:	fc 01       	movw	r30, r24
     c40:	82 81       	ldd	r24, Z+2	; 0x02
     c42:	93 81       	ldd	r25, Z+3	; 0x03
     c44:	89 2b       	or	r24, r25
     c46:	09 f4       	brne	.+2      	; 0xc4a <_ZNK6driver10atmega328p5Timer13isInitializedEv+0xe>
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	82 2f       	mov	r24, r18
     c4c:	08 95       	ret

00000c4e <_ZNK6driver10atmega328p5Timer9isEnabledEv>:
     c4e:	fc 01       	movw	r30, r24
     c50:	80 85       	ldd	r24, Z+8	; 0x08
     c52:	08 95       	ret

00000c54 <_ZN6driver10atmega328p5Timer11hasTimedOutEv>:
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	fc 01       	movw	r30, r24
     c5a:	90 85       	ldd	r25, Z+8	; 0x08
     c5c:	99 23       	and	r25, r25
     c5e:	81 f0       	breq	.+32     	; 0xc80 <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x2c>
     c60:	a2 81       	ldd	r26, Z+2	; 0x02
     c62:	b3 81       	ldd	r27, Z+3	; 0x03
     c64:	0d 91       	ld	r16, X+
     c66:	1d 91       	ld	r17, X+
     c68:	2d 91       	ld	r18, X+
     c6a:	3c 91       	ld	r19, X
     c6c:	44 81       	ldd	r20, Z+4	; 0x04
     c6e:	55 81       	ldd	r21, Z+5	; 0x05
     c70:	66 81       	ldd	r22, Z+6	; 0x06
     c72:	77 81       	ldd	r23, Z+7	; 0x07
     c74:	04 17       	cp	r16, r20
     c76:	15 07       	cpc	r17, r21
     c78:	26 07       	cpc	r18, r22
     c7a:	37 07       	cpc	r19, r23
     c7c:	18 f4       	brcc	.+6      	; 0xc84 <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x30>
     c7e:	03 c0       	rjmp	.+6      	; 0xc86 <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x32>
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	01 c0       	rjmp	.+2      	; 0xc86 <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x32>
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	91 11       	cpse	r25, r1
     c88:	09 c0       	rjmp	.+18     	; 0xc9c <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x48>
     c8a:	02 80       	ldd	r0, Z+2	; 0x02
     c8c:	f3 81       	ldd	r31, Z+3	; 0x03
     c8e:	e0 2d       	mov	r30, r0
     c90:	10 82       	st	Z, r1
     c92:	11 82       	std	Z+1, r1	; 0x01
     c94:	12 82       	std	Z+2, r1	; 0x02
     c96:	13 82       	std	Z+3, r1	; 0x03
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	01 c0       	rjmp	.+2      	; 0xc9e <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x4a>
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	08 95       	ret

00000ca4 <_ZNK6driver10atmega328p5Timer10timeout_msEv>:
     ca4:	fc 01       	movw	r30, r24
     ca6:	64 81       	ldd	r22, Z+4	; 0x04
     ca8:	75 81       	ldd	r23, Z+5	; 0x05
     caa:	86 81       	ldd	r24, Z+6	; 0x06
     cac:	97 81       	ldd	r25, Z+7	; 0x07
     cae:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__floatunsisf>
     cb2:	2f e6       	ldi	r18, 0x6F	; 111
     cb4:	32 e1       	ldi	r19, 0x12	; 18
     cb6:	43 e0       	ldi	r20, 0x03	; 3
     cb8:	5e e3       	ldi	r21, 0x3E	; 62
     cba:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	5f e3       	ldi	r21, 0x3F	; 63
     cc6:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__addsf3>
     cca:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__fixunssfsi>
     cce:	08 95       	ret

00000cd0 <_ZN6driver10atmega328p5Timer4stopEv>:
     cd0:	dc 01       	movw	r26, r24
     cd2:	12 96       	adiw	r26, 0x02	; 2
     cd4:	ed 91       	ld	r30, X+
     cd6:	fc 91       	ld	r31, X
     cd8:	13 97       	sbiw	r26, 0x03	; 3
     cda:	04 80       	ldd	r0, Z+4	; 0x04
     cdc:	f5 81       	ldd	r31, Z+5	; 0x05
     cde:	e0 2d       	mov	r30, r0
     ce0:	10 82       	st	Z, r1
     ce2:	18 96       	adiw	r26, 0x08	; 8
     ce4:	1c 92       	st	X, r1
     ce6:	08 95       	ret

00000ce8 <_ZN6driver10atmega328p5Timer13setTimeout_msEm>:
     ce8:	cf 92       	push	r12
     cea:	df 92       	push	r13
     cec:	ef 92       	push	r14
     cee:	ff 92       	push	r15
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	ec 01       	movw	r28, r24
     cf6:	6a 01       	movw	r12, r20
     cf8:	7b 01       	movw	r14, r22
     cfa:	45 2b       	or	r20, r21
     cfc:	46 2b       	or	r20, r22
     cfe:	47 2b       	or	r20, r23
     d00:	11 f4       	brne	.+4      	; 0xd06 <_ZN6driver10atmega328p5Timer13setTimeout_msEm+0x1e>
     d02:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_ZN6driver10atmega328p5Timer4stopEv>
     d06:	c1 14       	cp	r12, r1
     d08:	d1 04       	cpc	r13, r1
     d0a:	e1 04       	cpc	r14, r1
     d0c:	f1 04       	cpc	r15, r1
     d0e:	99 f0       	breq	.+38     	; 0xd36 <_ZN6driver10atmega328p5Timer13setTimeout_msEm+0x4e>
     d10:	c7 01       	movw	r24, r14
     d12:	b6 01       	movw	r22, r12
     d14:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__floatunsisf>
     d18:	2f e6       	ldi	r18, 0x6F	; 111
     d1a:	32 e1       	ldi	r19, 0x12	; 18
     d1c:	43 e0       	ldi	r20, 0x03	; 3
     d1e:	5e e3       	ldi	r21, 0x3E	; 62
     d20:	0e 94 65 15 	call	0x2aca	; 0x2aca <__divsf3>
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	5f e3       	ldi	r21, 0x3F	; 63
     d2c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__addsf3>
     d30:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__fixunssfsi>
     d34:	03 c0       	rjmp	.+6      	; 0xd3c <_ZN6driver10atmega328p5Timer13setTimeout_msEm+0x54>
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	cb 01       	movw	r24, r22
     d3c:	6c 83       	std	Y+4, r22	; 0x04
     d3e:	7d 83       	std	Y+5, r23	; 0x05
     d40:	8e 83       	std	Y+6, r24	; 0x06
     d42:	9f 83       	std	Y+7, r25	; 0x07
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	ff 90       	pop	r15
     d4a:	ef 90       	pop	r14
     d4c:	df 90       	pop	r13
     d4e:	cf 90       	pop	r12
     d50:	08 95       	ret

00000d52 <_ZN6driver10atmega328p5Timer5startEv>:
     d52:	0f 93       	push	r16
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	fc 01       	movw	r30, r24
     d5a:	44 81       	ldd	r20, Z+4	; 0x04
     d5c:	55 81       	ldd	r21, Z+5	; 0x05
     d5e:	66 81       	ldd	r22, Z+6	; 0x06
     d60:	77 81       	ldd	r23, Z+7	; 0x07
     d62:	45 2b       	or	r20, r21
     d64:	46 2b       	or	r20, r22
     d66:	47 2b       	or	r20, r23
     d68:	c1 f0       	breq	.+48     	; 0xd9a <_ZN6driver10atmega328p5Timer5startEv+0x48>
     d6a:	ec 01       	movw	r28, r24
     d6c:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <_ZN5utils21globalInterruptEnableEv>
     d70:	ea 81       	ldd	r30, Y+2	; 0x02
     d72:	fb 81       	ldd	r31, Y+3	; 0x03
     d74:	06 81       	ldd	r16, Z+6	; 0x06
     d76:	04 80       	ldd	r0, Z+4	; 0x04
     d78:	f5 81       	ldd	r31, Z+5	; 0x05
     d7a:	e0 2d       	mov	r30, r0
     d7c:	a0 81       	ld	r26, Z
     d7e:	21 e0       	ldi	r18, 0x01	; 1
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e0       	ldi	r20, 0x00	; 0
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__ashldi3>
     d92:	2a 2b       	or	r18, r26
     d94:	20 83       	st	Z, r18
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	88 87       	std	Y+8, r24	; 0x08
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	0f 91       	pop	r16
     da0:	08 95       	ret

00000da2 <_ZN6driver10atmega328p5Timer6toggleEv>:
     da2:	fc 01       	movw	r30, r24
     da4:	20 85       	ldd	r18, Z+8	; 0x08
     da6:	22 23       	and	r18, r18
     da8:	19 f0       	breq	.+6      	; 0xdb0 <_ZN6driver10atmega328p5Timer6toggleEv+0xe>
     daa:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_ZN6driver10atmega328p5Timer4stopEv>
     dae:	08 95       	ret
     db0:	0e 94 a9 06 	call	0xd52	; 0xd52 <_ZN6driver10atmega328p5Timer5startEv>
     db4:	08 95       	ret

00000db6 <_ZN6driver10atmega328p5Timer7restartEv>:
     db6:	dc 01       	movw	r26, r24
     db8:	12 96       	adiw	r26, 0x02	; 2
     dba:	ed 91       	ld	r30, X+
     dbc:	fc 91       	ld	r31, X
     dbe:	13 97       	sbiw	r26, 0x03	; 3
     dc0:	10 82       	st	Z, r1
     dc2:	11 82       	std	Z+1, r1	; 0x01
     dc4:	12 82       	std	Z+2, r1	; 0x02
     dc6:	13 82       	std	Z+3, r1	; 0x03
     dc8:	0e 94 a9 06 	call	0xd52	; 0xd52 <_ZN6driver10atmega328p5Timer5startEv>
     dcc:	08 95       	ret

00000dce <_ZN6driver10atmega328p5Timer9incrementEv>:
     dce:	fc 01       	movw	r30, r24
     dd0:	80 85       	ldd	r24, Z+8	; 0x08
     dd2:	88 23       	and	r24, r24
     dd4:	79 f0       	breq	.+30     	; 0xdf4 <_ZN6driver10atmega328p5Timer9incrementEv+0x26>
     dd6:	02 80       	ldd	r0, Z+2	; 0x02
     dd8:	f3 81       	ldd	r31, Z+3	; 0x03
     dda:	e0 2d       	mov	r30, r0
     ddc:	40 81       	ld	r20, Z
     dde:	51 81       	ldd	r21, Z+1	; 0x01
     de0:	62 81       	ldd	r22, Z+2	; 0x02
     de2:	73 81       	ldd	r23, Z+3	; 0x03
     de4:	4f 5f       	subi	r20, 0xFF	; 255
     de6:	5f 4f       	sbci	r21, 0xFF	; 255
     de8:	6f 4f       	sbci	r22, 0xFF	; 255
     dea:	7f 4f       	sbci	r23, 0xFF	; 255
     dec:	40 83       	st	Z, r20
     dee:	51 83       	std	Z+1, r21	; 0x01
     df0:	62 83       	std	Z+2, r22	; 0x02
     df2:	73 83       	std	Z+3, r23	; 0x03
     df4:	08 95       	ret

00000df6 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_>:
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	d9 f0       	breq	.+54     	; 0xe30 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x3a>
     dfa:	dc 01       	movw	r26, r24
     dfc:	14 96       	adiw	r26, 0x04	; 4
     dfe:	ed 91       	ld	r30, X+
     e00:	fc 91       	ld	r31, X
     e02:	15 97       	sbiw	r26, 0x05	; 5
     e04:	10 82       	st	Z, r1
     e06:	17 96       	adiw	r26, 0x07	; 7
     e08:	2c 91       	ld	r18, X
     e0a:	21 30       	cpi	r18, 0x01	; 1
     e0c:	31 f0       	breq	.+12     	; 0xe1a <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x24>
     e0e:	18 f0       	brcs	.+6      	; 0xe16 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x20>
     e10:	22 30       	cpi	r18, 0x02	; 2
     e12:	51 f0       	breq	.+20     	; 0xe28 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x32>
     e14:	0b c0       	rjmp	.+22     	; 0xe2c <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x36>
     e16:	15 bc       	out	0x25, r1	; 37
     e18:	09 c0       	rjmp	.+18     	; 0xe2c <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x36>
     e1a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     e1e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     e22:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x36>
     e28:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     e2c:	0e 94 26 18 	call	0x304c	; 0x304c <free>
     e30:	08 95       	ret

00000e32 <_ZN6driver10atmega328p5Timer8Hardware4initEh>:
     e32:	cf 93       	push	r28
     e34:	c8 2f       	mov	r28, r24
     e36:	88 e0       	ldi	r24, 0x08	; 8
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <malloc>
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	a9 f1       	breq	.+106    	; 0xeac <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x7a>
     e42:	c1 30       	cpi	r28, 0x01	; 1
     e44:	69 f0       	breq	.+26     	; 0xe60 <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x2e>
     e46:	18 f0       	brcs	.+6      	; 0xe4e <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x1c>
     e48:	c2 30       	cpi	r28, 0x02	; 2
     e4a:	d9 f0       	breq	.+54     	; 0xe82 <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x50>
     e4c:	24 c0       	rjmp	.+72     	; 0xe96 <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x64>
     e4e:	2e e6       	ldi	r18, 0x6E	; 110
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	fc 01       	movw	r30, r24
     e54:	35 83       	std	Z+5, r19	; 0x05
     e56:	24 83       	std	Z+4, r18	; 0x04
     e58:	16 82       	std	Z+6, r1	; 0x06
     e5a:	22 e0       	ldi	r18, 0x02	; 2
     e5c:	25 bd       	out	0x25, r18	; 37
     e5e:	20 c0       	rjmp	.+64     	; 0xea0 <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x6e>
     e60:	2f e6       	ldi	r18, 0x6F	; 111
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	fc 01       	movw	r30, r24
     e66:	35 83       	std	Z+5, r19	; 0x05
     e68:	24 83       	std	Z+4, r18	; 0x04
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	26 83       	std	Z+6, r18	; 0x06
     e6e:	2a e0       	ldi	r18, 0x0A	; 10
     e70:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	31 e0       	ldi	r19, 0x01	; 1
     e78:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     e7c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     e80:	0f c0       	rjmp	.+30     	; 0xea0 <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x6e>
     e82:	20 e7       	ldi	r18, 0x70	; 112
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	fc 01       	movw	r30, r24
     e88:	35 83       	std	Z+5, r19	; 0x05
     e8a:	24 83       	std	Z+4, r18	; 0x04
     e8c:	16 82       	std	Z+6, r1	; 0x06
     e8e:	22 e0       	ldi	r18, 0x02	; 2
     e90:	20 93 b1 00 	sts	0x00B1, r18	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     e94:	05 c0       	rjmp	.+10     	; 0xea0 <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x6e>
     e96:	0e 94 26 18 	call	0x304c	; 0x304c <free>
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	06 c0       	rjmp	.+12     	; 0xeac <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x7a>
     ea0:	fc 01       	movw	r30, r24
     ea2:	10 82       	st	Z, r1
     ea4:	11 82       	std	Z+1, r1	; 0x01
     ea6:	12 82       	std	Z+2, r1	; 0x02
     ea8:	13 82       	std	Z+3, r1	; 0x03
     eaa:	c7 83       	std	Z+7, r28	; 0x07
     eac:	cf 91       	pop	r28
     eae:	08 95       	ret

00000eb0 <_ZN6driver10atmega328p5Timer8Hardware7reserveEv>:
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	83 30       	cpi	r24, 0x03	; 3
     eb4:	78 f4       	brcc	.+30     	; 0xed4 <_ZN6driver10atmega328p5Timer8Hardware7reserveEv+0x24>
     eb6:	e8 2f       	mov	r30, r24
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	ee 0f       	add	r30, r30
     ebc:	ff 1f       	adc	r31, r31
     ebe:	ed 5c       	subi	r30, 0xCD	; 205
     ec0:	fc 4f       	sbci	r31, 0xFC	; 252
     ec2:	20 81       	ld	r18, Z
     ec4:	31 81       	ldd	r19, Z+1	; 0x01
     ec6:	23 2b       	or	r18, r19
     ec8:	19 f4       	brne	.+6      	; 0xed0 <_ZN6driver10atmega328p5Timer8Hardware7reserveEv+0x20>
     eca:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN6driver10atmega328p5Timer8Hardware4initEh>
     ece:	08 95       	ret
     ed0:	8f 5f       	subi	r24, 0xFF	; 255
     ed2:	ef cf       	rjmp	.-34     	; 0xeb2 <_ZN6driver10atmega328p5Timer8Hardware7reserveEv+0x2>
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	08 95       	ret

00000eda <_ZNK6driver10atmega328p5Timer11addCallbackEPFvvE>:
     eda:	dc 01       	movw	r26, r24
     edc:	12 96       	adiw	r26, 0x02	; 2
     ede:	ed 91       	ld	r30, X+
     ee0:	fc 91       	ld	r31, X
     ee2:	13 97       	sbiw	r26, 0x03	; 3
     ee4:	47 81       	ldd	r20, Z+7	; 0x07
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	8d e2       	ldi	r24, 0x2D	; 45
     eea:	93 e0       	ldi	r25, 0x03	; 3
     eec:	0e 94 33 04 	call	0x866	; 0x866 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj>
     ef0:	08 95       	ret

00000ef2 <_ZN6driver10atmega328p5TimerC1EmPFvvEb>:
     ef2:	8f 92       	push	r8
     ef4:	9f 92       	push	r9
     ef6:	af 92       	push	r10
     ef8:	bf 92       	push	r11
     efa:	cf 92       	push	r12
     efc:	df 92       	push	r13
     efe:	ef 92       	push	r14
     f00:	ff 92       	push	r15
     f02:	0f 93       	push	r16
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	ec 01       	movw	r28, r24
     f0a:	4a 01       	movw	r8, r20
     f0c:	5b 01       	movw	r10, r22
     f0e:	79 01       	movw	r14, r18
     f10:	8e ee       	ldi	r24, 0xEE	; 238
     f12:	91 e0       	ldi	r25, 0x01	; 1
     f14:	99 83       	std	Y+1, r25	; 0x01
     f16:	88 83       	st	Y, r24
     f18:	0e 94 58 07 	call	0xeb0	; 0xeb0 <_ZN6driver10atmega328p5Timer8Hardware7reserveEv>
     f1c:	6c 01       	movw	r12, r24
     f1e:	9b 83       	std	Y+3, r25	; 0x03
     f20:	8a 83       	std	Y+2, r24	; 0x02
     f22:	81 14       	cp	r8, r1
     f24:	91 04       	cpc	r9, r1
     f26:	a1 04       	cpc	r10, r1
     f28:	b1 04       	cpc	r11, r1
     f2a:	99 f0       	breq	.+38     	; 0xf52 <_ZN6driver10atmega328p5TimerC1EmPFvvEb+0x60>
     f2c:	c5 01       	movw	r24, r10
     f2e:	b4 01       	movw	r22, r8
     f30:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__floatunsisf>
     f34:	2f e6       	ldi	r18, 0x6F	; 111
     f36:	32 e1       	ldi	r19, 0x12	; 18
     f38:	43 e0       	ldi	r20, 0x03	; 3
     f3a:	5e e3       	ldi	r21, 0x3E	; 62
     f3c:	0e 94 65 15 	call	0x2aca	; 0x2aca <__divsf3>
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	5f e3       	ldi	r21, 0x3F	; 63
     f48:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__addsf3>
     f4c:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__fixunssfsi>
     f50:	03 c0       	rjmp	.+6      	; 0xf58 <_ZN6driver10atmega328p5TimerC1EmPFvvEb+0x66>
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	cb 01       	movw	r24, r22
     f58:	6c 83       	std	Y+4, r22	; 0x04
     f5a:	7d 83       	std	Y+5, r23	; 0x05
     f5c:	8e 83       	std	Y+6, r24	; 0x06
     f5e:	9f 83       	std	Y+7, r25	; 0x07
     f60:	18 86       	std	Y+8, r1	; 0x08
     f62:	c1 14       	cp	r12, r1
     f64:	d1 04       	cpc	r13, r1
     f66:	99 f0       	breq	.+38     	; 0xf8e <_ZN6driver10atmega328p5TimerC1EmPFvvEb+0x9c>
     f68:	d6 01       	movw	r26, r12
     f6a:	17 96       	adiw	r26, 0x07	; 7
     f6c:	ec 91       	ld	r30, X
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	ee 0f       	add	r30, r30
     f72:	ff 1f       	adc	r31, r31
     f74:	ed 5c       	subi	r30, 0xCD	; 205
     f76:	fc 4f       	sbci	r31, 0xFC	; 252
     f78:	d1 83       	std	Z+1, r29	; 0x01
     f7a:	c0 83       	st	Z, r28
     f7c:	b7 01       	movw	r22, r14
     f7e:	ce 01       	movw	r24, r28
     f80:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZNK6driver10atmega328p5Timer11addCallbackEPFvvE>
     f84:	00 23       	and	r16, r16
     f86:	19 f0       	breq	.+6      	; 0xf8e <_ZN6driver10atmega328p5TimerC1EmPFvvEb+0x9c>
     f88:	ce 01       	movw	r24, r28
     f8a:	0e 94 a9 06 	call	0xd52	; 0xd52 <_ZN6driver10atmega328p5Timer5startEv>
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	ef 90       	pop	r14
     f98:	df 90       	pop	r13
     f9a:	cf 90       	pop	r12
     f9c:	bf 90       	pop	r11
     f9e:	af 90       	pop	r10
     fa0:	9f 90       	pop	r9
     fa2:	8f 90       	pop	r8
     fa4:	08 95       	ret

00000fa6 <_ZN9container13CallbackArrayILj3EE6removeEj>:
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	8c 01       	movw	r16, r24
     fb0:	eb 01       	movw	r28, r22
     fb2:	0e 94 2d 04 	call	0x85a	; 0x85a <_ZNK9container13CallbackArrayILj3EE12isIndexValidEj>
     fb6:	88 23       	and	r24, r24
     fb8:	31 f0       	breq	.+12     	; 0xfc6 <_ZN9container13CallbackArrayILj3EE6removeEj+0x20>
     fba:	cc 0f       	add	r28, r28
     fbc:	dd 1f       	adc	r29, r29
     fbe:	c0 0f       	add	r28, r16
     fc0:	d1 1f       	adc	r29, r17
     fc2:	19 82       	std	Y+1, r1	; 0x01
     fc4:	18 82       	st	Y, r1
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	08 95       	ret

00000fd0 <_ZNK6driver10atmega328p5Timer14removeCallbackEv>:
     fd0:	dc 01       	movw	r26, r24
     fd2:	12 96       	adiw	r26, 0x02	; 2
     fd4:	ed 91       	ld	r30, X+
     fd6:	fc 91       	ld	r31, X
     fd8:	13 97       	sbiw	r26, 0x03	; 3
     fda:	67 81       	ldd	r22, Z+7	; 0x07
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	8d e2       	ldi	r24, 0x2D	; 45
     fe0:	93 e0       	ldi	r25, 0x03	; 3
     fe2:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <_ZN9container13CallbackArrayILj3EE6removeEj>
     fe6:	08 95       	ret

00000fe8 <_ZN6driver10atmega328p5TimerD1Ev>:
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	ec 01       	movw	r28, r24
     fee:	8e ee       	ldi	r24, 0xEE	; 238
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	99 83       	std	Y+1, r25	; 0x01
     ff4:	88 83       	st	Y, r24
     ff6:	ce 01       	movw	r24, r28
     ff8:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <_ZNK6driver10atmega328p5Timer14removeCallbackEv>
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    1000:	dc 01       	movw	r26, r24
    1002:	17 96       	adiw	r26, 0x07	; 7
    1004:	ec 91       	ld	r30, X
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	ee 0f       	add	r30, r30
    100a:	ff 1f       	adc	r31, r31
    100c:	ed 5c       	subi	r30, 0xCD	; 205
    100e:	fc 4f       	sbci	r31, 0xFC	; 252
    1010:	11 82       	std	Z+1, r1	; 0x01
    1012:	10 82       	st	Z, r1
    1014:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_>
    1018:	84 ed       	ldi	r24, 0xD4	; 212
    101a:	91 e0       	ldi	r25, 0x01	; 1
    101c:	99 83       	std	Y+1, r25	; 0x01
    101e:	88 83       	st	Y, r24
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <_ZN6driver10atmega328p5TimerD0Ev>:
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	ec 01       	movw	r28, r24
    102c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN6driver10atmega328p5TimerD1Ev>
    1030:	69 e0       	ldi	r22, 0x09	; 9
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	ce 01       	movw	r24, r28
    1036:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <_ZdlPvj>
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	08 95       	ret

00001040 <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh>:
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
    1044:	cf 93       	push	r28
    1046:	83 30       	cpi	r24, 0x03	; 3
    1048:	d0 f4       	brcc	.+52     	; 0x107e <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh+0x3e>
    104a:	e8 2f       	mov	r30, r24
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	ee 0f       	add	r30, r30
    1050:	ff 1f       	adc	r31, r31
    1052:	ed 5c       	subi	r30, 0xCD	; 205
    1054:	fc 4f       	sbci	r31, 0xFC	; 252
    1056:	00 81       	ld	r16, Z
    1058:	11 81       	ldd	r17, Z+1	; 0x01
    105a:	01 15       	cp	r16, r1
    105c:	11 05       	cpc	r17, r1
    105e:	79 f0       	breq	.+30     	; 0x107e <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh+0x3e>
    1060:	c8 2f       	mov	r28, r24
    1062:	c8 01       	movw	r24, r16
    1064:	0e 94 e7 06 	call	0xdce	; 0xdce <_ZN6driver10atmega328p5Timer9incrementEv>
    1068:	c8 01       	movw	r24, r16
    106a:	0e 94 2a 06 	call	0xc54	; 0xc54 <_ZN6driver10atmega328p5Timer11hasTimedOutEv>
    106e:	88 23       	and	r24, r24
    1070:	31 f0       	breq	.+12     	; 0x107e <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh+0x3e>
    1072:	6c 2f       	mov	r22, r28
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	8d e2       	ldi	r24, 0x2D	; 45
    1078:	93 e0       	ldi	r25, 0x03	; 3
    107a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <_ZN9container13CallbackArrayILj3EE6invokeEj>
    107e:	cf 91       	pop	r28
    1080:	1f 91       	pop	r17
    1082:	0f 91       	pop	r16
    1084:	08 95       	ret

00001086 <__vector_16>:
    1086:	1f 92       	push	r1
    1088:	0f 92       	push	r0
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	0f 92       	push	r0
    108e:	11 24       	eor	r1, r1
    1090:	2f 93       	push	r18
    1092:	3f 93       	push	r19
    1094:	4f 93       	push	r20
    1096:	5f 93       	push	r21
    1098:	6f 93       	push	r22
    109a:	7f 93       	push	r23
    109c:	8f 93       	push	r24
    109e:	9f 93       	push	r25
    10a0:	af 93       	push	r26
    10a2:	bf 93       	push	r27
    10a4:	ef 93       	push	r30
    10a6:	ff 93       	push	r31
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	0e 94 20 08 	call	0x1040	; 0x1040 <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh>
    10ae:	ff 91       	pop	r31
    10b0:	ef 91       	pop	r30
    10b2:	bf 91       	pop	r27
    10b4:	af 91       	pop	r26
    10b6:	9f 91       	pop	r25
    10b8:	8f 91       	pop	r24
    10ba:	7f 91       	pop	r23
    10bc:	6f 91       	pop	r22
    10be:	5f 91       	pop	r21
    10c0:	4f 91       	pop	r20
    10c2:	3f 91       	pop	r19
    10c4:	2f 91       	pop	r18
    10c6:	0f 90       	pop	r0
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	0f 90       	pop	r0
    10cc:	1f 90       	pop	r1
    10ce:	18 95       	reti

000010d0 <__vector_11>:
    10d0:	1f 92       	push	r1
    10d2:	0f 92       	push	r0
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	0f 92       	push	r0
    10d8:	11 24       	eor	r1, r1
    10da:	2f 93       	push	r18
    10dc:	3f 93       	push	r19
    10de:	4f 93       	push	r20
    10e0:	5f 93       	push	r21
    10e2:	6f 93       	push	r22
    10e4:	7f 93       	push	r23
    10e6:	8f 93       	push	r24
    10e8:	9f 93       	push	r25
    10ea:	af 93       	push	r26
    10ec:	bf 93       	push	r27
    10ee:	ef 93       	push	r30
    10f0:	ff 93       	push	r31
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	0e 94 20 08 	call	0x1040	; 0x1040 <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh>
    10f8:	ff 91       	pop	r31
    10fa:	ef 91       	pop	r30
    10fc:	bf 91       	pop	r27
    10fe:	af 91       	pop	r26
    1100:	9f 91       	pop	r25
    1102:	8f 91       	pop	r24
    1104:	7f 91       	pop	r23
    1106:	6f 91       	pop	r22
    1108:	5f 91       	pop	r21
    110a:	4f 91       	pop	r20
    110c:	3f 91       	pop	r19
    110e:	2f 91       	pop	r18
    1110:	0f 90       	pop	r0
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	0f 90       	pop	r0
    1116:	1f 90       	pop	r1
    1118:	18 95       	reti

0000111a <__vector_9>:
    111a:	1f 92       	push	r1
    111c:	0f 92       	push	r0
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	0f 92       	push	r0
    1122:	11 24       	eor	r1, r1
    1124:	2f 93       	push	r18
    1126:	3f 93       	push	r19
    1128:	4f 93       	push	r20
    112a:	5f 93       	push	r21
    112c:	6f 93       	push	r22
    112e:	7f 93       	push	r23
    1130:	8f 93       	push	r24
    1132:	9f 93       	push	r25
    1134:	af 93       	push	r26
    1136:	bf 93       	push	r27
    1138:	ef 93       	push	r30
    113a:	ff 93       	push	r31
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	0e 94 20 08 	call	0x1040	; 0x1040 <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh>
    1142:	ff 91       	pop	r31
    1144:	ef 91       	pop	r30
    1146:	bf 91       	pop	r27
    1148:	af 91       	pop	r26
    114a:	9f 91       	pop	r25
    114c:	8f 91       	pop	r24
    114e:	7f 91       	pop	r23
    1150:	6f 91       	pop	r22
    1152:	5f 91       	pop	r21
    1154:	4f 91       	pop	r20
    1156:	3f 91       	pop	r19
    1158:	2f 91       	pop	r18
    115a:	0f 90       	pop	r0
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	0f 90       	pop	r0
    1160:	1f 90       	pop	r1
    1162:	18 95       	reti

00001164 <_Z41__static_initialization_and_destruction_0ii>:

// -----------------------------------------------------------------------------
ISR (TIMER2_OVF_vect) { invokeCallback(TimerIndex::timer2); }

} // namespace atmega328p
} // namespace driver
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	39 f4       	brne	.+14     	; 0x1176 <_Z41__static_initialization_and_destruction_0ii+0x12>
    1168:	6f 3f       	cpi	r22, 0xFF	; 255
    116a:	7f 4f       	sbci	r23, 0xFF	; 255
    116c:	21 f4       	brne	.+8      	; 0x1176 <_Z41__static_initialization_and_destruction_0ii+0x12>

/** Array holding pointers to TimerParam::timers. */
Timer* TimerParam::TimerParam::timers[TimerParam::circuitCount]{};  

/** Array holding pointers to callbacks. */
CallbackArray<TimerParam::circuitCount> TimerParam::callbacks{};
    116e:	8d e2       	ldi	r24, 0x2D	; 45
    1170:	93 e0       	ldi	r25, 0x03	; 3
    1172:	0e 94 2a 04 	call	0x854	; 0x854 <_ZN9container13CallbackArrayILj3EEC1Ev>
    1176:	08 95       	ret

00001178 <_GLOBAL__sub_I__ZN6driver10atmega328p5TimerC2EmPFvvEb>:

// -----------------------------------------------------------------------------
ISR (TIMER2_OVF_vect) { invokeCallback(TimerIndex::timer2); }

} // namespace atmega328p
} // namespace driver
    1178:	6f ef       	ldi	r22, 0xFF	; 255
    117a:	7f ef       	ldi	r23, 0xFF	; 255
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0e 94 b2 08 	call	0x1164	; 0x1164 <_Z41__static_initialization_and_destruction_0ii>
    1184:	08 95       	ret

00001186 <_GLOBAL__sub_D__ZN6driver10atmega328p5TimerC2EmPFvvEb>:
    1186:	6f ef       	ldi	r22, 0xFF	; 255
    1188:	7f ef       	ldi	r23, 0xFF	; 255
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 b2 08 	call	0x1164	; 0x1164 <_Z41__static_initialization_and_destruction_0ii>
    1192:	08 95       	ret

00001194 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE>:
}
    
// -----------------------------------------------------------------------------
uint8_t timeoutValue(const Watchdog::Timeout timeout) noexcept
{
    switch (timeout)
    1194:	81 15       	cp	r24, r1
    1196:	21 e0       	ldi	r18, 0x01	; 1
    1198:	92 07       	cpc	r25, r18
    119a:	51 f1       	breq	.+84     	; 0x11f0 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x5c>
    119c:	70 f4       	brcc	.+28     	; 0x11ba <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x26>
    119e:	80 32       	cpi	r24, 0x20	; 32
    11a0:	91 05       	cpc	r25, r1
    11a2:	a1 f1       	breq	.+104    	; 0x120c <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x78>
    11a4:	18 f4       	brcc	.+6      	; 0x11ac <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x18>
    11a6:	40 97       	sbiw	r24, 0x10	; 16
    11a8:	e9 f0       	breq	.+58     	; 0x11e4 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x50>
    11aa:	2e c0       	rjmp	.+92     	; 0x1208 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x74>
    11ac:	80 34       	cpi	r24, 0x40	; 64
    11ae:	91 05       	cpc	r25, r1
    11b0:	d9 f0       	breq	.+54     	; 0x11e8 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x54>
    11b2:	80 38       	cpi	r24, 0x80	; 128
    11b4:	91 05       	cpc	r25, r1
    11b6:	d1 f0       	breq	.+52     	; 0x11ec <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x58>
    11b8:	27 c0       	rjmp	.+78     	; 0x1208 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x74>
    11ba:	81 15       	cp	r24, r1
    11bc:	28 e0       	ldi	r18, 0x08	; 8
    11be:	92 07       	cpc	r25, r18
    11c0:	e9 f0       	breq	.+58     	; 0x11fc <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x68>
    11c2:	40 f4       	brcc	.+16     	; 0x11d4 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x40>
    11c4:	81 15       	cp	r24, r1
    11c6:	22 e0       	ldi	r18, 0x02	; 2
    11c8:	92 07       	cpc	r25, r18
    11ca:	a1 f0       	breq	.+40     	; 0x11f4 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x60>
    11cc:	81 15       	cp	r24, r1
    11ce:	94 40       	sbci	r25, 0x04	; 4
    11d0:	99 f0       	breq	.+38     	; 0x11f8 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x64>
    11d2:	1a c0       	rjmp	.+52     	; 0x1208 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x74>
    11d4:	81 15       	cp	r24, r1
    11d6:	20 e1       	ldi	r18, 0x10	; 16
    11d8:	92 07       	cpc	r25, r18
    11da:	91 f0       	breq	.+36     	; 0x1200 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x6c>
    11dc:	81 15       	cp	r24, r1
    11de:	90 42       	sbci	r25, 0x20	; 32
    11e0:	89 f0       	breq	.+34     	; 0x1204 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x70>
    11e2:	12 c0       	rjmp	.+36     	; 0x1208 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x74>
    {
        case Watchdog::Timeout::Duration16ms:
            return 0U;
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	08 95       	ret
        case Watchdog::Timeout::Duration32ms:
            return (1U << WDP0);
        case Watchdog::Timeout::Duration64ms:
            return (1U << WDP1);
    11e8:	82 e0       	ldi	r24, 0x02	; 2
    11ea:	08 95       	ret
        case Watchdog::Timeout::Duration128ms:
            return (1U << WDP1) | (1U << WDP0);
    11ec:	83 e0       	ldi	r24, 0x03	; 3
    11ee:	08 95       	ret
        case Watchdog::Timeout::Duration256ms:
            return (1U << WDP2);
    11f0:	84 e0       	ldi	r24, 0x04	; 4
    11f2:	08 95       	ret
        case Watchdog::Timeout::Duration512ms:
            return (1U << WDP2) | (1U << WDP0);
    11f4:	85 e0       	ldi	r24, 0x05	; 5
    11f6:	08 95       	ret
        case Watchdog::Timeout::Duration1024ms:
            return (1U << WDP2) | (1U << WDP1);
    11f8:	86 e0       	ldi	r24, 0x06	; 6
    11fa:	08 95       	ret
        case Watchdog::Timeout::Duration2048ms:
            return (1U << WDP2) | (1U << WDP1) | (1U << WDP0);
    11fc:	87 e0       	ldi	r24, 0x07	; 7
    11fe:	08 95       	ret
        case Watchdog::Timeout::Duration4096ms:
            return (1U << WDP3);
    1200:	80 e2       	ldi	r24, 0x20	; 32
    1202:	08 95       	ret
        case Watchdog::Timeout::Duration8192ms:
            return (1U << WDP3) | (1U << WDP0);
    1204:	81 e2       	ldi	r24, 0x21	; 33
    1206:	08 95       	ret
        default:
            return 0xFFU;
    1208:	8f ef       	ldi	r24, 0xFF	; 255
    120a:	08 95       	ret
    switch (timeout)
    {
        case Watchdog::Timeout::Duration16ms:
            return 0U;
        case Watchdog::Timeout::Duration32ms:
            return (1U << WDP0);
    120c:	81 e0       	ldi	r24, 0x01	; 1
        case Watchdog::Timeout::Duration8192ms:
            return (1U << WDP3) | (1U << WDP0);
        default:
            return 0xFFU;
    }
}
    120e:	08 95       	ret

00001210 <__tcf_0>:
{
public:
    /**
     * @brief Delete the watchdog timer.
     */
    virtual ~WatchdogInterface() noexcept = default;
    1210:	88 e0       	ldi	r24, 0x08	; 8
    1212:	92 e0       	ldi	r25, 0x02	; 2
    1214:	90 93 3a 03 	sts	0x033A, r25	; 0x80033a <_ZZN6driver10atmega328p8Watchdog11getInstanceEvE10myInstance+0x1>
    1218:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <_ZZN6driver10atmega328p8Watchdog11getInstanceEvE10myInstance>
    121c:	08 95       	ret

0000121e <_ZNK6driver10atmega328p8Watchdog13isInitializedEv>:
    // Return a reference to the singleton watchdog instance, cast to the corresponding interface.
    return myInstance; 
}

// -----------------------------------------------------------------------------
bool Watchdog::isInitialized() const noexcept { return true; }
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	08 95       	ret

00001222 <_ZNK6driver10atmega328p8Watchdog9isEnabledEv>:

// -----------------------------------------------------------------------------
bool Watchdog::isEnabled() const noexcept { return myEnabled; }
    1222:	fc 01       	movw	r30, r24
    1224:	84 81       	ldd	r24, Z+4	; 0x04
    1226:	08 95       	ret

00001228 <_ZNK6driver10atmega328p8Watchdog9timeoutMsEv>:
    // Re-enable interrupts once the write sequence is complete.
    utils::globalInterruptEnable();
}

// -----------------------------------------------------------------------------
uint16_t Watchdog::timeoutMs() const noexcept { return static_cast<uint16_t>(myTimeout); }
    1228:	fc 01       	movw	r30, r24
    122a:	82 81       	ldd	r24, Z+2	; 0x02
    122c:	93 81       	ldd	r25, Z+3	; 0x03
    122e:	08 95       	ret

00001230 <_ZN6driver10atmega328p8WatchdogD1Ev>:
    1230:	28 e0       	ldi	r18, 0x08	; 8
    1232:	32 e0       	ldi	r19, 0x02	; 2
    1234:	fc 01       	movw	r30, r24
    1236:	31 83       	std	Z+1, r19	; 0x01
    1238:	20 83       	st	Z, r18
    123a:	08 95       	ret

0000123c <_ZN6driver10atmega328p8WatchdogD0Ev>:
    123c:	28 e0       	ldi	r18, 0x08	; 8
    123e:	32 e0       	ldi	r19, 0x02	; 2
    1240:	fc 01       	movw	r30, r24
    1242:	31 83       	std	Z+1, r19	; 0x01
    1244:	20 83       	st	Z, r18
    Watchdog& operator=(const Watchdog&) = delete; // No copy assignment.
    Watchdog& operator=(Watchdog&&)      = delete; // No move assignment.

private:
    Watchdog() noexcept;
    ~Watchdog() noexcept override = default;
    1246:	65 e0       	ldi	r22, 0x05	; 5
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <_ZdlPvj>
    124e:	08 95       	ret

00001250 <_ZN6driver10atmega328p8Watchdog5resetEv>:

// -----------------------------------------------------------------------------
void Watchdog::reset() noexcept 
{ 
    // Disable interrupts during the reset process.
    utils::globalInterruptDisable();
    1250:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <_ZN5utils22globalInterruptDisableEv>

    // Reset the watchdog and clear the corresponding reset flag.
    asm("WDR");
    1254:	a8 95       	wdr
// -----------------------------------------------------------------------------
template <typename T>
constexpr void clear(volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg &= ~(1ULL << bit);
    1256:	84 b7       	in	r24, 0x34	; 52
    1258:	87 7f       	andi	r24, 0xF7	; 247
    125a:	84 bf       	out	0x34, r24	; 52
    utils::clear(MCUSR, WDRF);

    // Re-enable interrupts once the reset process is complete.
    utils::globalInterruptEnable();
    125c:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <_ZN5utils21globalInterruptEnableEv>
    1260:	08 95       	ret

00001262 <_ZN6driver10atmega328p8Watchdog10setEnabledEb>:
// -----------------------------------------------------------------------------
bool Watchdog::isEnabled() const noexcept { return myEnabled; }

// -----------------------------------------------------------------------------
void Watchdog::setEnabled(const bool enable) noexcept
{
    1262:	cf 93       	push	r28
    1264:	c6 2f       	mov	r28, r22
    // Reset the watchdog to prevent a timeout during the enablement update.
    reset();
    1266:	0e 94 28 09 	call	0x1250	; 0x1250 <_ZN6driver10atmega328p8Watchdog5resetEv>

    // Update the enablement status, disable interrupts during the write sequence.
    utils::globalInterruptDisable();
    126a:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <_ZN5utils22globalInterruptDisableEv>
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
    126e:	e0 e6       	ldi	r30, 0x60	; 96
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	80 61       	ori	r24, 0x10	; 16
    1276:	80 83       	st	Z, r24
    1278:	80 81       	ld	r24, Z
    127a:	88 60       	ori	r24, 0x08	; 8
    127c:	80 83       	st	Z, r24
    utils::set(WDTCSR, WDCE, WDE);
    if (enable) { utils::set(WDTCSR, WDE); }
    127e:	cc 23       	and	r28, r28
    1280:	21 f0       	breq	.+8      	; 0x128a <_ZN6driver10atmega328p8Watchdog10setEnabledEb+0x28>
    1282:	80 81       	ld	r24, Z
    1284:	88 60       	ori	r24, 0x08	; 8
    1286:	80 83       	st	Z, r24
    1288:	05 c0       	rjmp	.+10     	; 0x1294 <_ZN6driver10atmega328p8Watchdog10setEnabledEb+0x32>
// -----------------------------------------------------------------------------
template <typename T>
constexpr void clear(volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg &= ~(1ULL << bit);
    128a:	e0 e6       	ldi	r30, 0x60	; 96
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	87 7f       	andi	r24, 0xF7	; 247
    1292:	80 83       	st	Z, r24
    else { utils::clear(WDTCSR, WDE); }

    // Re-enable interrupts once the write sequence is complete.
    utils::globalInterruptEnable();
    1294:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <_ZN5utils21globalInterruptEnableEv>
}
    1298:	cf 91       	pop	r28
    129a:	08 95       	ret

0000129c <_ZN6driver10atmega328p8Watchdog10setTimeoutENS1_7TimeoutE>:
    utils::globalInterruptEnable();
}

// -----------------------------------------------------------------------------
bool Watchdog::setTimeout(const Timeout timeout) noexcept
{
    129c:	ff 92       	push	r15
    129e:	0f 93       	push	r16
    12a0:	1f 93       	push	r17
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    // Return false if the timeout is invalid.
    if (!isTimeoutValid(timeout)) { return false; }
    12a6:	61 30       	cpi	r22, 0x01	; 1
    12a8:	20 e2       	ldi	r18, 0x20	; 32
    12aa:	72 07       	cpc	r23, r18
    12ac:	b8 f4       	brcc	.+46     	; 0x12dc <_ZN6driver10atmega328p8Watchdog10setTimeoutENS1_7TimeoutE+0x40>
    12ae:	eb 01       	movw	r28, r22
    12b0:	8c 01       	movw	r16, r24

    // Calculate the timeout value before the timed write sequence.
    const auto value{timeoutValue(timeout)};
    12b2:	cb 01       	movw	r24, r22
    12b4:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE>
    12b8:	f8 2e       	mov	r15, r24

    // Update the watchdog timeout, disable interrupts during the write sequence.
    utils::globalInterruptDisable();
    12ba:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <_ZN5utils22globalInterruptDisableEv>
    WDTCSR |= (1UL << WDCE) | (1UL << WDE);
    12be:	e0 e6       	ldi	r30, 0x60	; 96
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	88 61       	ori	r24, 0x18	; 24
    12c6:	80 83       	st	Z, r24
    WDTCSR = value;
    12c8:	f0 82       	st	Z, r15
    utils::globalInterruptEnable();
    12ca:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <_ZN5utils21globalInterruptEnableEv>

    // Re-enable interrupts once the write sequence is complete.
    utils::globalInterruptEnable();
    12ce:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <_ZN5utils21globalInterruptEnableEv>

    // Store the new timeout and return true to indicate success.
    myTimeout = timeout;
    12d2:	f8 01       	movw	r30, r16
    12d4:	d3 83       	std	Z+3, r29	; 0x03
    12d6:	c2 83       	std	Z+2, r28	; 0x02
    return true;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	01 c0       	rjmp	.+2      	; 0x12de <_ZN6driver10atmega328p8Watchdog10setTimeoutENS1_7TimeoutE+0x42>

// -----------------------------------------------------------------------------
bool Watchdog::setTimeout(const Timeout timeout) noexcept
{
    // Return false if the timeout is invalid.
    if (!isTimeoutValid(timeout)) { return false; }
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    utils::globalInterruptEnable();

    // Store the new timeout and return true to indicate success.
    myTimeout = timeout;
    return true;
} 
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	1f 91       	pop	r17
    12e4:	0f 91       	pop	r16
    12e6:	ff 90       	pop	r15
    12e8:	08 95       	ret

000012ea <_ZN6driver10atmega328p8WatchdogC1Ev>:

// -----------------------------------------------------------------------------
Watchdog::Watchdog() noexcept
    : myTimeout{}
    , myEnabled{false}
    12ea:	2a e1       	ldi	r18, 0x1A	; 26
    12ec:	32 e0       	ldi	r19, 0x02	; 2
    12ee:	fc 01       	movw	r30, r24
    12f0:	31 83       	std	Z+1, r19	; 0x01
    12f2:	20 83       	st	Z, r18
    12f4:	13 82       	std	Z+3, r1	; 0x03
    12f6:	12 82       	std	Z+2, r1	; 0x02
    12f8:	14 82       	std	Z+4, r1	; 0x04
{
    // Set the default timeout.
    setTimeout(WatchdogParam::DefaultTimeout);
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	74 e0       	ldi	r23, 0x04	; 4
    12fe:	0e 94 4e 09 	call	0x129c	; 0x129c <_ZN6driver10atmega328p8Watchdog10setTimeoutENS1_7TimeoutE>
    1302:	08 95       	ret

00001304 <_ZN6driver10atmega328p8Watchdog11getInstanceEv>:

// -----------------------------------------------------------------------------
WatchdogInterface& Watchdog::getInstance() noexcept
{
    // Create and initialize the singleton watchdog timer instance (once only).
    static Watchdog myInstance{};
    1304:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <_ZGVZN6driver10atmega328p8Watchdog11getInstanceEvE10myInstance>
    1308:	81 11       	cpse	r24, r1
    130a:	12 c0       	rjmp	.+36     	; 0x1330 <_ZN6driver10atmega328p8Watchdog11getInstanceEv+0x2c>
    130c:	8e e3       	ldi	r24, 0x3E	; 62
    130e:	93 e0       	ldi	r25, 0x03	; 3
    1310:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__cxa_guard_acquire>
    1314:	89 2b       	or	r24, r25
    1316:	61 f0       	breq	.+24     	; 0x1330 <_ZN6driver10atmega328p8Watchdog11getInstanceEv+0x2c>
    1318:	89 e3       	ldi	r24, 0x39	; 57
    131a:	93 e0       	ldi	r25, 0x03	; 3
    131c:	0e 94 75 09 	call	0x12ea	; 0x12ea <_ZN6driver10atmega328p8WatchdogC1Ev>
    1320:	8e e3       	ldi	r24, 0x3E	; 62
    1322:	93 e0       	ldi	r25, 0x03	; 3
    1324:	0e 94 ef 14 	call	0x29de	; 0x29de <__cxa_guard_release>
    1328:	88 e0       	ldi	r24, 0x08	; 8
    132a:	99 e0       	ldi	r25, 0x09	; 9
    132c:	0e 94 77 00 	call	0xee	; 0xee <atexit>

    // Return a reference to the singleton watchdog instance, cast to the corresponding interface.
    return myInstance; 
}
    1330:	89 e3       	ldi	r24, 0x39	; 57
    1332:	93 e0       	ldi	r25, 0x03	; 3
    1334:	08 95       	ret

00001336 <_ZN12_GLOBAL__N_120predictTimerCallbackEv>:
/**
 * @brief Callback for the toggle timer.
 * 
 *        This callback is invoked whenever the toggle timer elapses.
 */
void predictTimerCallback() noexcept { mySys->handlepredictTimerInterrupt(); }
    1336:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <_ZN12_GLOBAL__N_15mySysE>
    133a:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <_ZN12_GLOBAL__N_15mySysE+0x1>
    133e:	0e 94 76 12 	call	0x24ec	; 0x24ec <_ZN6target6System27handlepredictTimerInterruptEv>
    1342:	08 95       	ret

00001344 <_ZN12_GLOBAL__N_121debounceTimerCallbackEv>:
/**
 * @brief Callback for the debounce timer.
 * 
 *        This callback is invoked whenever the debounce timer elapses.
 */
void debounceTimerCallback() noexcept { mySys->handleDebounceTimerInterrupt(); }
    1344:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <_ZN12_GLOBAL__N_15mySysE>
    1348:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <_ZN12_GLOBAL__N_15mySysE+0x1>
    134c:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN6target6System28handleDebounceTimerInterruptEv>
    1350:	08 95       	ret

00001352 <_ZN12_GLOBAL__N_114buttonCallbackEv>:
target::System* mySys{nullptr};

/**
 * @brief Callback for the button.
 */
void buttonCallback() noexcept { mySys->handleButtonInterrupt(); }
    1352:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <_ZN12_GLOBAL__N_15mySysE>
    1356:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <_ZN12_GLOBAL__N_15mySysE+0x1>
    135a:	0e 94 be 13 	call	0x277c	; 0x277c <_ZN6target6System21handleButtonInterruptEv>
    135e:	08 95       	ret

00001360 <_ZNK9container6VectorIdE5beginEv>:

// -----------------------------------------------------------------------------
template <typename T>
typename Vector<T>::ConstIterator Vector<T>::begin() const noexcept 
{ 
    return ConstIterator{myData};
    1360:	fb 01       	movw	r30, r22
    1362:	20 81       	ld	r18, Z
    1364:	31 81       	ldd	r19, Z+1	; 0x01
     * @brief Create iterator pointing at given data.
     *
     * @param[in] data Pointer to data the iterator is set to point at.
     */
    ConstIterator(const T* data) noexcept
        : myData{data} {}
    1366:	fc 01       	movw	r30, r24
    1368:	31 83       	std	Z+1, r19	; 0x01
    136a:	20 83       	st	Z, r18
}
    136c:	08 95       	ret

0000136e <_ZNK9container6VectorIdE3endEv>:

// -----------------------------------------------------------------------------
template <typename T>
typename Vector<T>::ConstIterator Vector<T>::end() const noexcept  
{ 
    return ConstIterator{myData + mySize};
    136e:	fb 01       	movw	r30, r22
    1370:	40 81       	ld	r20, Z
    1372:	51 81       	ldd	r21, Z+1	; 0x01
    1374:	22 81       	ldd	r18, Z+2	; 0x02
    1376:	33 81       	ldd	r19, Z+3	; 0x03
    1378:	22 0f       	add	r18, r18
    137a:	33 1f       	adc	r19, r19
    137c:	22 0f       	add	r18, r18
    137e:	33 1f       	adc	r19, r19
    1380:	24 0f       	add	r18, r20
    1382:	35 1f       	adc	r19, r21
    1384:	fc 01       	movw	r30, r24
    1386:	31 83       	std	Z+1, r19	; 0x01
    1388:	20 83       	st	Z, r18
}
    138a:	08 95       	ret

0000138c <_ZNK6driver15SerialInterface6printfIIiiEEEbPKcDpRKT_>:
    virtual void print(const char* str) const = 0;
};

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
    138c:	cf 92       	push	r12
    138e:	df 92       	push	r13
    1390:	ef 92       	push	r14
    1392:	ff 92       	push	r15
    1394:	0f 93       	push	r16
    1396:	1f 93       	push	r17
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	c5 56       	subi	r28, 0x65	; 101
    13a2:	d1 09       	sbc	r29, r1
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
{
    if (nullptr == format) { return false; }
    13ae:	61 15       	cp	r22, r1
    13b0:	71 05       	cpc	r23, r1
    13b2:	81 f1       	breq	.+96     	; 0x1414 <_ZNK6driver15SerialInterface6printfIIiiEEEbPKcDpRKT_+0x88>
    13b4:	d9 01       	movw	r26, r18
    13b6:	6a 01       	movw	r12, r20
    13b8:	8c 01       	movw	r16, r24

    // Format and insert given additional arguments (if any).
    if (0U < sizeof...(args))
    {
        constexpr size_t length{101U};
        char buffer[length]{'\0'};
    13ba:	85 e6       	ldi	r24, 0x65	; 101
    13bc:	9e 01       	movw	r18, r28
    13be:	2f 5f       	subi	r18, 0xFF	; 255
    13c0:	3f 4f       	sbci	r19, 0xFF	; 255
    13c2:	79 01       	movw	r14, r18
    13c4:	f9 01       	movw	r30, r18
    13c6:	28 2f       	mov	r18, r24
    13c8:	11 92       	st	Z+, r1
    13ca:	2a 95       	dec	r18
    13cc:	e9 f7       	brne	.-6      	; 0x13c8 <_ZNK6driver15SerialInterface6printfIIiiEEEbPKcDpRKT_+0x3c>
        (void) snprintf(buffer, length, format, args...);
    13ce:	3c 91       	ld	r19, X
    13d0:	11 96       	adiw	r26, 0x01	; 1
    13d2:	4c 91       	ld	r20, X
    13d4:	d6 01       	movw	r26, r12
    13d6:	9c 91       	ld	r25, X
    13d8:	11 96       	adiw	r26, 0x01	; 1
    13da:	2c 91       	ld	r18, X
    13dc:	4f 93       	push	r20
    13de:	3f 93       	push	r19
    13e0:	2f 93       	push	r18
    13e2:	9f 93       	push	r25
    13e4:	7f 93       	push	r23
    13e6:	6f 93       	push	r22
    13e8:	1f 92       	push	r1
    13ea:	8f 93       	push	r24
    13ec:	ff 92       	push	r15
    13ee:	ef 92       	push	r14
    13f0:	0e 94 da 19 	call	0x33b4	; 0x33b4 <snprintf>
        print(buffer);
    13f4:	d8 01       	movw	r26, r16
    13f6:	ed 91       	ld	r30, X+
    13f8:	fc 91       	ld	r31, X
    13fa:	04 84       	ldd	r0, Z+12	; 0x0c
    13fc:	f5 85       	ldd	r31, Z+13	; 0x0d
    13fe:	e0 2d       	mov	r30, r0
    1400:	b7 01       	movw	r22, r14
    1402:	c8 01       	movw	r24, r16
    1404:	09 95       	icall
    }
    // Print the string.
    else { print(format); }
    return true;
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <_ZNK6driver15SerialInterface6printfIIiiEEEbPKcDpRKT_+0x8a>

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
{
    if (nullptr == format) { return false; }
    1414:	80 e0       	ldi	r24, 0x00	; 0
        print(buffer);
    }
    // Print the string.
    else { print(format); }
    return true;
}
    1416:	cb 59       	subi	r28, 0x9B	; 155
    1418:	df 4f       	sbci	r29, 0xFF	; 255
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	ff 90       	pop	r15
    142e:	ef 90       	pop	r14
    1430:	df 90       	pop	r13
    1432:	cf 90       	pop	r12
    1434:	08 95       	ret

00001436 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>:

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
{
    if (nullptr == format) { return false; }
    1436:	61 15       	cp	r22, r1
    1438:	71 05       	cpc	r23, r1
    143a:	49 f0       	breq	.+18     	; 0x144e <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_+0x18>
        char buffer[length]{'\0'};
        (void) snprintf(buffer, length, format, args...);
        print(buffer);
    }
    // Print the string.
    else { print(format); }
    143c:	dc 01       	movw	r26, r24
    143e:	ed 91       	ld	r30, X+
    1440:	fc 91       	ld	r31, X
    1442:	04 84       	ldd	r0, Z+12	; 0x0c
    1444:	f5 85       	ldd	r31, Z+13	; 0x0d
    1446:	e0 2d       	mov	r30, r0
    1448:	09 95       	icall
    return true;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	08 95       	ret

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
{
    if (nullptr == format) { return false; }
    144e:	80 e0       	ldi	r24, 0x00	; 0
        print(buffer);
    }
    // Print the string.
    else { print(format); }
    return true;
}
    1450:	08 95       	ret

00001452 <_ZN9container6VectorIdEC1Ev>:
{
// -----------------------------------------------------------------------------
template <typename T>
Vector<T>::Vector() noexcept
    : myData{nullptr}
    , mySize{} {}
    1452:	fc 01       	movw	r30, r24
    1454:	11 82       	std	Z+1, r1	; 0x01
    1456:	10 82       	st	Z, r1
    1458:	13 82       	std	Z+3, r1	; 0x03
    145a:	12 82       	std	Z+2, r1	; 0x02
    145c:	08 95       	ret

0000145e <_ZN9container6VectorIdE5clearEv>:
template <typename T>
const T* Vector<T>::last() const noexcept { return mySize > 0U ? end() - 1U : nullptr; }

// -----------------------------------------------------------------------------
template <typename T>
void Vector<T>::clear() noexcept 
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	ec 01       	movw	r28, r24

// -----------------------------------------------------------------------------
template <typename T>
inline void deleteMemory(T* &block) noexcept
{
    free(block);
    1464:	88 81       	ld	r24, Y
    1466:	99 81       	ldd	r25, Y+1	; 0x01
    1468:	0e 94 26 18 	call	0x304c	; 0x304c <free>
    block = nullptr;
    146c:	19 82       	std	Y+1, r1	; 0x01
    146e:	18 82       	st	Y, r1
{
    utils::deleteMemory<T>(myData);
    myData = nullptr;
    mySize = 0U;
    1470:	1b 82       	std	Y+3, r1	; 0x03
    1472:	1a 82       	std	Y+2, r1	; 0x02
}
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	08 95       	ret

0000147a <_ZN9container6VectorIdED1Ev>:

// -----------------------------------------------------------------------------
template <typename T>
Vector<T>::~Vector() noexcept 
{ 
    clear(); 
    147a:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN9container6VectorIdE5clearEv>
    147e:	08 95       	ret

00001480 <_ZN9container6VectorIdE6resizeEj>:
    mySize = 0U;
}

// -----------------------------------------------------------------------------
template <typename T>
bool Vector<T>::resize(const size_t newSize) noexcept 
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	ec 01       	movw	r28, r24
    148a:	8b 01       	movw	r16, r22

// -----------------------------------------------------------------------------
template <typename T>
inline T* reallocMemory(T* block, const size_t newSize) noexcept
{
    return static_cast<T*>(realloc(block, sizeof(T) * newSize));
    148c:	66 0f       	add	r22, r22
    148e:	77 1f       	adc	r23, r23
    1490:	66 0f       	add	r22, r22
    1492:	77 1f       	adc	r23, r23
    1494:	88 81       	ld	r24, Y
    1496:	99 81       	ldd	r25, Y+1	; 0x01
    1498:	0e 94 0b 19 	call	0x3216	; 0x3216 <realloc>
{
    auto copy{utils::reallocMemory<T>(myData, newSize)};
    if (copy == nullptr) { return false; }
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	31 f0       	breq	.+12     	; 0x14ac <_ZN9container6VectorIdE6resizeEj+0x2c>
    myData = copy;
    14a0:	99 83       	std	Y+1, r25	; 0x01
    14a2:	88 83       	st	Y, r24
    mySize = newSize;
    14a4:	1b 83       	std	Y+3, r17	; 0x03
    14a6:	0a 83       	std	Y+2, r16	; 0x02
    return true;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	01 c0       	rjmp	.+2      	; 0x14ae <_ZN9container6VectorIdE6resizeEj+0x2e>
// -----------------------------------------------------------------------------
template <typename T>
bool Vector<T>::resize(const size_t newSize) noexcept 
{
    auto copy{utils::reallocMemory<T>(myData, newSize)};
    if (copy == nullptr) { return false; }
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    myData = copy;
    mySize = newSize;
    return true;
}
    14ae:	df 91       	pop	r29
    14b0:	cf 91       	pop	r28
    14b2:	1f 91       	pop	r17
    14b4:	0f 91       	pop	r16
    14b6:	08 95       	ret

000014b8 <_ZN9container6VectorIdE6assignILj14EEEvRAT__Kdj>:
}

// -----------------------------------------------------------------------------
template <typename T>
template <size_t ValueCount>
void Vector<T>::assign(const T (&values)[ValueCount], const size_t offset) noexcept 
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
{
    for (size_t i{}; i < ValueCount && offset + i < mySize; ++i) 
    14c0:	a0 e0       	ldi	r26, 0x00	; 0
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	ae 30       	cpi	r26, 0x0E	; 14
    14c6:	b1 05       	cpc	r27, r1
    14c8:	10 f5       	brcc	.+68     	; 0x150e <_ZN9container6VectorIdE6assignILj14EEEvRAT__Kdj+0x56>
    14ca:	9d 01       	movw	r18, r26
    14cc:	24 0f       	add	r18, r20
    14ce:	35 1f       	adc	r19, r21
    14d0:	ec 01       	movw	r28, r24
    14d2:	ea 81       	ldd	r30, Y+2	; 0x02
    14d4:	fb 81       	ldd	r31, Y+3	; 0x03
    14d6:	2e 17       	cp	r18, r30
    14d8:	3f 07       	cpc	r19, r31
    14da:	c8 f4       	brcc	.+50     	; 0x150e <_ZN9container6VectorIdE6assignILj14EEEvRAT__Kdj+0x56>
    {
        myData[offset + i] = values[i];
    14dc:	22 0f       	add	r18, r18
    14de:	33 1f       	adc	r19, r19
    14e0:	22 0f       	add	r18, r18
    14e2:	33 1f       	adc	r19, r19
    14e4:	e8 81       	ld	r30, Y
    14e6:	f9 81       	ldd	r31, Y+1	; 0x01
    14e8:	e2 0f       	add	r30, r18
    14ea:	f3 1f       	adc	r31, r19
    14ec:	ed 01       	movw	r28, r26
    14ee:	cc 0f       	add	r28, r28
    14f0:	dd 1f       	adc	r29, r29
    14f2:	cc 0f       	add	r28, r28
    14f4:	dd 1f       	adc	r29, r29
    14f6:	c6 0f       	add	r28, r22
    14f8:	d7 1f       	adc	r29, r23
    14fa:	08 81       	ld	r16, Y
    14fc:	19 81       	ldd	r17, Y+1	; 0x01
    14fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1500:	3b 81       	ldd	r19, Y+3	; 0x03
    1502:	00 83       	st	Z, r16
    1504:	11 83       	std	Z+1, r17	; 0x01
    1506:	22 83       	std	Z+2, r18	; 0x02
    1508:	33 83       	std	Z+3, r19	; 0x03
// -----------------------------------------------------------------------------
template <typename T>
template <size_t ValueCount>
void Vector<T>::assign(const T (&values)[ValueCount], const size_t offset) noexcept 
{
    for (size_t i{}; i < ValueCount && offset + i < mySize; ++i) 
    150a:	11 96       	adiw	r26, 0x01	; 1
    150c:	db cf       	rjmp	.-74     	; 0x14c4 <_ZN9container6VectorIdE6assignILj14EEEvRAT__Kdj+0xc>
    {
        myData[offset + i] = values[i];
    }
}
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	08 95       	ret

00001518 <_ZN9container6VectorIdE9addValuesILj14EEEbRAT__Kd>:
}

// -----------------------------------------------------------------------------
template <typename T>
template <size_t ValueCount>
bool Vector<T>::addValues(const T (&values)[ValueCount]) noexcept 
    1518:	cf 92       	push	r12
    151a:	df 92       	push	r13
    151c:	ef 92       	push	r14
    151e:	ff 92       	push	r15
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	ec 01       	movw	r28, r24
    1528:	6b 01       	movw	r12, r22
{
    const auto offset{mySize};
    152a:	ea 80       	ldd	r14, Y+2	; 0x02
    152c:	fb 80       	ldd	r15, Y+3	; 0x03
    if (!resize(mySize + ValueCount)) { return false; }
    152e:	b7 01       	movw	r22, r14
    1530:	62 5f       	subi	r22, 0xF2	; 242
    1532:	7f 4f       	sbci	r23, 0xFF	; 255
    1534:	0e 94 40 0a 	call	0x1480	; 0x1480 <_ZN9container6VectorIdE6resizeEj>
    1538:	18 2f       	mov	r17, r24
    153a:	88 23       	and	r24, r24
    153c:	29 f0       	breq	.+10     	; 0x1548 <_ZN9container6VectorIdE9addValuesILj14EEEbRAT__Kd+0x30>
    assign(values, offset);
    153e:	a7 01       	movw	r20, r14
    1540:	b6 01       	movw	r22, r12
    1542:	ce 01       	movw	r24, r28
    1544:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <_ZN9container6VectorIdE6assignILj14EEEvRAT__Kdj>
    return true;
}
    1548:	81 2f       	mov	r24, r17
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	1f 91       	pop	r17
    1550:	ff 90       	pop	r15
    1552:	ef 90       	pop	r14
    1554:	df 90       	pop	r13
    1556:	cf 90       	pop	r12
    1558:	08 95       	ret

0000155a <_ZN9container6VectorIdEC1IIddddddddddddddEEEDpOKT_>:
}

// -----------------------------------------------------------------------------
template <typename T>
template <typename... Values>
Vector<T>::Vector(const Values&&... values) noexcept
    155a:	2f 92       	push	r2
    155c:	3f 92       	push	r3
    155e:	4f 92       	push	r4
    1560:	5f 92       	push	r5
    1562:	6f 92       	push	r6
    1564:	7f 92       	push	r7
    1566:	8f 92       	push	r8
    1568:	9f 92       	push	r9
    156a:	af 92       	push	r10
    156c:	bf 92       	push	r11
    156e:	cf 92       	push	r12
    1570:	df 92       	push	r13
    1572:	ef 92       	push	r14
    1574:	ff 92       	push	r15
    1576:	0f 93       	push	r16
    1578:	1f 93       	push	r17
    157a:	cf 93       	push	r28
    157c:	df 93       	push	r29
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	ea 97       	sbiw	r28, 0x3a	; 58
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	de bf       	out	0x3e, r29	; 62
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	cd bf       	out	0x3d, r28	; 61
    158e:	3c 01       	movw	r6, r24
    1590:	2b 01       	movw	r4, r22
    1592:	1a 01       	movw	r2, r20
    1594:	3a af       	std	Y+58, r19	; 0x3a
    1596:	29 af       	std	Y+57, r18	; 0x39
    : Vector()
    1598:	0e 94 29 0a 	call	0x1452	; 0x1452 <_ZN9container6VectorIdEC1Ev>
{
    const T array[sizeof...(values)]{(values)...};
    159c:	f2 01       	movw	r30, r4
    159e:	80 81       	ld	r24, Z
    15a0:	91 81       	ldd	r25, Z+1	; 0x01
    15a2:	a2 81       	ldd	r26, Z+2	; 0x02
    15a4:	b3 81       	ldd	r27, Z+3	; 0x03
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	9a 83       	std	Y+2, r25	; 0x02
    15aa:	ab 83       	std	Y+3, r26	; 0x03
    15ac:	bc 83       	std	Y+4, r27	; 0x04
    15ae:	f1 01       	movw	r30, r2
    15b0:	80 81       	ld	r24, Z
    15b2:	91 81       	ldd	r25, Z+1	; 0x01
    15b4:	a2 81       	ldd	r26, Z+2	; 0x02
    15b6:	b3 81       	ldd	r27, Z+3	; 0x03
    15b8:	8d 83       	std	Y+5, r24	; 0x05
    15ba:	9e 83       	std	Y+6, r25	; 0x06
    15bc:	af 83       	std	Y+7, r26	; 0x07
    15be:	b8 87       	std	Y+8, r27	; 0x08
    15c0:	e9 ad       	ldd	r30, Y+57	; 0x39
    15c2:	fa ad       	ldd	r31, Y+58	; 0x3a
    15c4:	80 81       	ld	r24, Z
    15c6:	91 81       	ldd	r25, Z+1	; 0x01
    15c8:	a2 81       	ldd	r26, Z+2	; 0x02
    15ca:	b3 81       	ldd	r27, Z+3	; 0x03
    15cc:	89 87       	std	Y+9, r24	; 0x09
    15ce:	9a 87       	std	Y+10, r25	; 0x0a
    15d0:	ab 87       	std	Y+11, r26	; 0x0b
    15d2:	bc 87       	std	Y+12, r27	; 0x0c
    15d4:	f8 01       	movw	r30, r16
    15d6:	80 81       	ld	r24, Z
    15d8:	91 81       	ldd	r25, Z+1	; 0x01
    15da:	a2 81       	ldd	r26, Z+2	; 0x02
    15dc:	b3 81       	ldd	r27, Z+3	; 0x03
    15de:	8d 87       	std	Y+13, r24	; 0x0d
    15e0:	9e 87       	std	Y+14, r25	; 0x0e
    15e2:	af 87       	std	Y+15, r26	; 0x0f
    15e4:	b8 8b       	std	Y+16, r27	; 0x10
    15e6:	f7 01       	movw	r30, r14
    15e8:	80 81       	ld	r24, Z
    15ea:	91 81       	ldd	r25, Z+1	; 0x01
    15ec:	a2 81       	ldd	r26, Z+2	; 0x02
    15ee:	b3 81       	ldd	r27, Z+3	; 0x03
    15f0:	89 8b       	std	Y+17, r24	; 0x11
    15f2:	9a 8b       	std	Y+18, r25	; 0x12
    15f4:	ab 8b       	std	Y+19, r26	; 0x13
    15f6:	bc 8b       	std	Y+20, r27	; 0x14
    15f8:	f6 01       	movw	r30, r12
    15fa:	80 81       	ld	r24, Z
    15fc:	91 81       	ldd	r25, Z+1	; 0x01
    15fe:	a2 81       	ldd	r26, Z+2	; 0x02
    1600:	b3 81       	ldd	r27, Z+3	; 0x03
    1602:	8d 8b       	std	Y+21, r24	; 0x15
    1604:	9e 8b       	std	Y+22, r25	; 0x16
    1606:	af 8b       	std	Y+23, r26	; 0x17
    1608:	b8 8f       	std	Y+24, r27	; 0x18
    160a:	f5 01       	movw	r30, r10
    160c:	80 81       	ld	r24, Z
    160e:	91 81       	ldd	r25, Z+1	; 0x01
    1610:	a2 81       	ldd	r26, Z+2	; 0x02
    1612:	b3 81       	ldd	r27, Z+3	; 0x03
    1614:	89 8f       	std	Y+25, r24	; 0x19
    1616:	9a 8f       	std	Y+26, r25	; 0x1a
    1618:	ab 8f       	std	Y+27, r26	; 0x1b
    161a:	bc 8f       	std	Y+28, r27	; 0x1c
    161c:	f4 01       	movw	r30, r8
    161e:	80 81       	ld	r24, Z
    1620:	91 81       	ldd	r25, Z+1	; 0x01
    1622:	a2 81       	ldd	r26, Z+2	; 0x02
    1624:	b3 81       	ldd	r27, Z+3	; 0x03
    1626:	8d 8f       	std	Y+29, r24	; 0x1d
    1628:	9e 8f       	std	Y+30, r25	; 0x1e
    162a:	af 8f       	std	Y+31, r26	; 0x1f
    162c:	b8 a3       	std	Y+32, r27	; 0x20
    162e:	61 96       	adiw	r28, 0x11	; 17
    1630:	ee ad       	ldd	r30, Y+62	; 0x3e
    1632:	ff ad       	ldd	r31, Y+63	; 0x3f
    1634:	61 97       	sbiw	r28, 0x11	; 17
    1636:	80 81       	ld	r24, Z
    1638:	91 81       	ldd	r25, Z+1	; 0x01
    163a:	a2 81       	ldd	r26, Z+2	; 0x02
    163c:	b3 81       	ldd	r27, Z+3	; 0x03
    163e:	89 a3       	std	Y+33, r24	; 0x21
    1640:	9a a3       	std	Y+34, r25	; 0x22
    1642:	ab a3       	std	Y+35, r26	; 0x23
    1644:	bc a3       	std	Y+36, r27	; 0x24
    1646:	63 96       	adiw	r28, 0x13	; 19
    1648:	ee ad       	ldd	r30, Y+62	; 0x3e
    164a:	ff ad       	ldd	r31, Y+63	; 0x3f
    164c:	63 97       	sbiw	r28, 0x13	; 19
    164e:	80 81       	ld	r24, Z
    1650:	91 81       	ldd	r25, Z+1	; 0x01
    1652:	a2 81       	ldd	r26, Z+2	; 0x02
    1654:	b3 81       	ldd	r27, Z+3	; 0x03
    1656:	8d a3       	std	Y+37, r24	; 0x25
    1658:	9e a3       	std	Y+38, r25	; 0x26
    165a:	af a3       	std	Y+39, r26	; 0x27
    165c:	b8 a7       	std	Y+40, r27	; 0x28
    165e:	65 96       	adiw	r28, 0x15	; 21
    1660:	ee ad       	ldd	r30, Y+62	; 0x3e
    1662:	ff ad       	ldd	r31, Y+63	; 0x3f
    1664:	65 97       	sbiw	r28, 0x15	; 21
    1666:	80 81       	ld	r24, Z
    1668:	91 81       	ldd	r25, Z+1	; 0x01
    166a:	a2 81       	ldd	r26, Z+2	; 0x02
    166c:	b3 81       	ldd	r27, Z+3	; 0x03
    166e:	89 a7       	std	Y+41, r24	; 0x29
    1670:	9a a7       	std	Y+42, r25	; 0x2a
    1672:	ab a7       	std	Y+43, r26	; 0x2b
    1674:	bc a7       	std	Y+44, r27	; 0x2c
    1676:	67 96       	adiw	r28, 0x17	; 23
    1678:	ee ad       	ldd	r30, Y+62	; 0x3e
    167a:	ff ad       	ldd	r31, Y+63	; 0x3f
    167c:	67 97       	sbiw	r28, 0x17	; 23
    167e:	80 81       	ld	r24, Z
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	a2 81       	ldd	r26, Z+2	; 0x02
    1684:	b3 81       	ldd	r27, Z+3	; 0x03
    1686:	8d a7       	std	Y+45, r24	; 0x2d
    1688:	9e a7       	std	Y+46, r25	; 0x2e
    168a:	af a7       	std	Y+47, r26	; 0x2f
    168c:	b8 ab       	std	Y+48, r27	; 0x30
    168e:	69 96       	adiw	r28, 0x19	; 25
    1690:	ee ad       	ldd	r30, Y+62	; 0x3e
    1692:	ff ad       	ldd	r31, Y+63	; 0x3f
    1694:	69 97       	sbiw	r28, 0x19	; 25
    1696:	80 81       	ld	r24, Z
    1698:	91 81       	ldd	r25, Z+1	; 0x01
    169a:	a2 81       	ldd	r26, Z+2	; 0x02
    169c:	b3 81       	ldd	r27, Z+3	; 0x03
    169e:	89 ab       	std	Y+49, r24	; 0x31
    16a0:	9a ab       	std	Y+50, r25	; 0x32
    16a2:	ab ab       	std	Y+51, r26	; 0x33
    16a4:	bc ab       	std	Y+52, r27	; 0x34
    16a6:	6b 96       	adiw	r28, 0x1b	; 27
    16a8:	ee ad       	ldd	r30, Y+62	; 0x3e
    16aa:	ff ad       	ldd	r31, Y+63	; 0x3f
    16ac:	6b 97       	sbiw	r28, 0x1b	; 27
    16ae:	80 81       	ld	r24, Z
    16b0:	91 81       	ldd	r25, Z+1	; 0x01
    16b2:	a2 81       	ldd	r26, Z+2	; 0x02
    16b4:	b3 81       	ldd	r27, Z+3	; 0x03
    16b6:	8d ab       	std	Y+53, r24	; 0x35
    16b8:	9e ab       	std	Y+54, r25	; 0x36
    16ba:	af ab       	std	Y+55, r26	; 0x37
    16bc:	b8 af       	std	Y+56, r27	; 0x38
    addValues(array);
    16be:	be 01       	movw	r22, r28
    16c0:	6f 5f       	subi	r22, 0xFF	; 255
    16c2:	7f 4f       	sbci	r23, 0xFF	; 255
    16c4:	c3 01       	movw	r24, r6
    16c6:	0e 94 8c 0a 	call	0x1518	; 0x1518 <_ZN9container6VectorIdE9addValuesILj14EEEbRAT__Kd>
}
    16ca:	ea 96       	adiw	r28, 0x3a	; 58
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	ff 90       	pop	r15
    16e0:	ef 90       	pop	r14
    16e2:	df 90       	pop	r13
    16e4:	cf 90       	pop	r12
    16e6:	bf 90       	pop	r11
    16e8:	af 90       	pop	r10
    16ea:	9f 90       	pop	r9
    16ec:	8f 90       	pop	r8
    16ee:	7f 90       	pop	r7
    16f0:	6f 90       	pop	r6
    16f2:	5f 90       	pop	r5
    16f4:	4f 90       	pop	r4
    16f6:	3f 90       	pop	r3
    16f8:	2f 90       	pop	r2
    16fa:	08 95       	ret

000016fc <_ZN9container6VectorIdE6assignILj13EEEvRAT__Kdj>:
}

// -----------------------------------------------------------------------------
template <typename T>
template <size_t ValueCount>
void Vector<T>::assign(const T (&values)[ValueCount], const size_t offset) noexcept 
    16fc:	0f 93       	push	r16
    16fe:	1f 93       	push	r17
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
{
    for (size_t i{}; i < ValueCount && offset + i < mySize; ++i) 
    1704:	a0 e0       	ldi	r26, 0x00	; 0
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	ad 30       	cpi	r26, 0x0D	; 13
    170a:	b1 05       	cpc	r27, r1
    170c:	10 f5       	brcc	.+68     	; 0x1752 <_ZN9container6VectorIdE6assignILj13EEEvRAT__Kdj+0x56>
    170e:	9d 01       	movw	r18, r26
    1710:	24 0f       	add	r18, r20
    1712:	35 1f       	adc	r19, r21
    1714:	ec 01       	movw	r28, r24
    1716:	ea 81       	ldd	r30, Y+2	; 0x02
    1718:	fb 81       	ldd	r31, Y+3	; 0x03
    171a:	2e 17       	cp	r18, r30
    171c:	3f 07       	cpc	r19, r31
    171e:	c8 f4       	brcc	.+50     	; 0x1752 <_ZN9container6VectorIdE6assignILj13EEEvRAT__Kdj+0x56>
    {
        myData[offset + i] = values[i];
    1720:	22 0f       	add	r18, r18
    1722:	33 1f       	adc	r19, r19
    1724:	22 0f       	add	r18, r18
    1726:	33 1f       	adc	r19, r19
    1728:	e8 81       	ld	r30, Y
    172a:	f9 81       	ldd	r31, Y+1	; 0x01
    172c:	e2 0f       	add	r30, r18
    172e:	f3 1f       	adc	r31, r19
    1730:	ed 01       	movw	r28, r26
    1732:	cc 0f       	add	r28, r28
    1734:	dd 1f       	adc	r29, r29
    1736:	cc 0f       	add	r28, r28
    1738:	dd 1f       	adc	r29, r29
    173a:	c6 0f       	add	r28, r22
    173c:	d7 1f       	adc	r29, r23
    173e:	08 81       	ld	r16, Y
    1740:	19 81       	ldd	r17, Y+1	; 0x01
    1742:	2a 81       	ldd	r18, Y+2	; 0x02
    1744:	3b 81       	ldd	r19, Y+3	; 0x03
    1746:	00 83       	st	Z, r16
    1748:	11 83       	std	Z+1, r17	; 0x01
    174a:	22 83       	std	Z+2, r18	; 0x02
    174c:	33 83       	std	Z+3, r19	; 0x03
// -----------------------------------------------------------------------------
template <typename T>
template <size_t ValueCount>
void Vector<T>::assign(const T (&values)[ValueCount], const size_t offset) noexcept 
{
    for (size_t i{}; i < ValueCount && offset + i < mySize; ++i) 
    174e:	11 96       	adiw	r26, 0x01	; 1
    1750:	db cf       	rjmp	.-74     	; 0x1708 <_ZN9container6VectorIdE6assignILj13EEEvRAT__Kdj+0xc>
    {
        myData[offset + i] = values[i];
    }
}
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	1f 91       	pop	r17
    1758:	0f 91       	pop	r16
    175a:	08 95       	ret

0000175c <_ZN9container6VectorIdE9addValuesILj13EEEbRAT__Kd>:
}

// -----------------------------------------------------------------------------
template <typename T>
template <size_t ValueCount>
bool Vector<T>::addValues(const T (&values)[ValueCount]) noexcept 
    175c:	cf 92       	push	r12
    175e:	df 92       	push	r13
    1760:	ef 92       	push	r14
    1762:	ff 92       	push	r15
    1764:	1f 93       	push	r17
    1766:	cf 93       	push	r28
    1768:	df 93       	push	r29
    176a:	ec 01       	movw	r28, r24
    176c:	6b 01       	movw	r12, r22
{
    const auto offset{mySize};
    176e:	ea 80       	ldd	r14, Y+2	; 0x02
    1770:	fb 80       	ldd	r15, Y+3	; 0x03
    if (!resize(mySize + ValueCount)) { return false; }
    1772:	b7 01       	movw	r22, r14
    1774:	63 5f       	subi	r22, 0xF3	; 243
    1776:	7f 4f       	sbci	r23, 0xFF	; 255
    1778:	0e 94 40 0a 	call	0x1480	; 0x1480 <_ZN9container6VectorIdE6resizeEj>
    177c:	18 2f       	mov	r17, r24
    177e:	88 23       	and	r24, r24
    1780:	29 f0       	breq	.+10     	; 0x178c <_ZN9container6VectorIdE9addValuesILj13EEEbRAT__Kd+0x30>
    assign(values, offset);
    1782:	a7 01       	movw	r20, r14
    1784:	b6 01       	movw	r22, r12
    1786:	ce 01       	movw	r24, r28
    1788:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <_ZN9container6VectorIdE6assignILj13EEEvRAT__Kdj>
    return true;
}
    178c:	81 2f       	mov	r24, r17
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
    1794:	ff 90       	pop	r15
    1796:	ef 90       	pop	r14
    1798:	df 90       	pop	r13
    179a:	cf 90       	pop	r12
    179c:	08 95       	ret

0000179e <_ZN9container6VectorIdEC1IIdddddddddddddEEEDpOKT_>:
}

// -----------------------------------------------------------------------------
template <typename T>
template <typename... Values>
Vector<T>::Vector(const Values&&... values) noexcept
    179e:	2f 92       	push	r2
    17a0:	3f 92       	push	r3
    17a2:	4f 92       	push	r4
    17a4:	5f 92       	push	r5
    17a6:	6f 92       	push	r6
    17a8:	7f 92       	push	r7
    17aa:	8f 92       	push	r8
    17ac:	9f 92       	push	r9
    17ae:	af 92       	push	r10
    17b0:	bf 92       	push	r11
    17b2:	cf 92       	push	r12
    17b4:	df 92       	push	r13
    17b6:	ef 92       	push	r14
    17b8:	ff 92       	push	r15
    17ba:	0f 93       	push	r16
    17bc:	1f 93       	push	r17
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	e6 97       	sbiw	r28, 0x36	; 54
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	3c 01       	movw	r6, r24
    17d4:	2b 01       	movw	r4, r22
    17d6:	1a 01       	movw	r2, r20
    17d8:	3e ab       	std	Y+54, r19	; 0x36
    17da:	2d ab       	std	Y+53, r18	; 0x35
    : Vector()
    17dc:	0e 94 29 0a 	call	0x1452	; 0x1452 <_ZN9container6VectorIdEC1Ev>
{
    const T array[sizeof...(values)]{(values)...};
    17e0:	f2 01       	movw	r30, r4
    17e2:	80 81       	ld	r24, Z
    17e4:	91 81       	ldd	r25, Z+1	; 0x01
    17e6:	a2 81       	ldd	r26, Z+2	; 0x02
    17e8:	b3 81       	ldd	r27, Z+3	; 0x03
    17ea:	89 83       	std	Y+1, r24	; 0x01
    17ec:	9a 83       	std	Y+2, r25	; 0x02
    17ee:	ab 83       	std	Y+3, r26	; 0x03
    17f0:	bc 83       	std	Y+4, r27	; 0x04
    17f2:	f1 01       	movw	r30, r2
    17f4:	80 81       	ld	r24, Z
    17f6:	91 81       	ldd	r25, Z+1	; 0x01
    17f8:	a2 81       	ldd	r26, Z+2	; 0x02
    17fa:	b3 81       	ldd	r27, Z+3	; 0x03
    17fc:	8d 83       	std	Y+5, r24	; 0x05
    17fe:	9e 83       	std	Y+6, r25	; 0x06
    1800:	af 83       	std	Y+7, r26	; 0x07
    1802:	b8 87       	std	Y+8, r27	; 0x08
    1804:	ed a9       	ldd	r30, Y+53	; 0x35
    1806:	fe a9       	ldd	r31, Y+54	; 0x36
    1808:	80 81       	ld	r24, Z
    180a:	91 81       	ldd	r25, Z+1	; 0x01
    180c:	a2 81       	ldd	r26, Z+2	; 0x02
    180e:	b3 81       	ldd	r27, Z+3	; 0x03
    1810:	89 87       	std	Y+9, r24	; 0x09
    1812:	9a 87       	std	Y+10, r25	; 0x0a
    1814:	ab 87       	std	Y+11, r26	; 0x0b
    1816:	bc 87       	std	Y+12, r27	; 0x0c
    1818:	f8 01       	movw	r30, r16
    181a:	80 81       	ld	r24, Z
    181c:	91 81       	ldd	r25, Z+1	; 0x01
    181e:	a2 81       	ldd	r26, Z+2	; 0x02
    1820:	b3 81       	ldd	r27, Z+3	; 0x03
    1822:	8d 87       	std	Y+13, r24	; 0x0d
    1824:	9e 87       	std	Y+14, r25	; 0x0e
    1826:	af 87       	std	Y+15, r26	; 0x0f
    1828:	b8 8b       	std	Y+16, r27	; 0x10
    182a:	f7 01       	movw	r30, r14
    182c:	80 81       	ld	r24, Z
    182e:	91 81       	ldd	r25, Z+1	; 0x01
    1830:	a2 81       	ldd	r26, Z+2	; 0x02
    1832:	b3 81       	ldd	r27, Z+3	; 0x03
    1834:	89 8b       	std	Y+17, r24	; 0x11
    1836:	9a 8b       	std	Y+18, r25	; 0x12
    1838:	ab 8b       	std	Y+19, r26	; 0x13
    183a:	bc 8b       	std	Y+20, r27	; 0x14
    183c:	f6 01       	movw	r30, r12
    183e:	80 81       	ld	r24, Z
    1840:	91 81       	ldd	r25, Z+1	; 0x01
    1842:	a2 81       	ldd	r26, Z+2	; 0x02
    1844:	b3 81       	ldd	r27, Z+3	; 0x03
    1846:	8d 8b       	std	Y+21, r24	; 0x15
    1848:	9e 8b       	std	Y+22, r25	; 0x16
    184a:	af 8b       	std	Y+23, r26	; 0x17
    184c:	b8 8f       	std	Y+24, r27	; 0x18
    184e:	f5 01       	movw	r30, r10
    1850:	80 81       	ld	r24, Z
    1852:	91 81       	ldd	r25, Z+1	; 0x01
    1854:	a2 81       	ldd	r26, Z+2	; 0x02
    1856:	b3 81       	ldd	r27, Z+3	; 0x03
    1858:	89 8f       	std	Y+25, r24	; 0x19
    185a:	9a 8f       	std	Y+26, r25	; 0x1a
    185c:	ab 8f       	std	Y+27, r26	; 0x1b
    185e:	bc 8f       	std	Y+28, r27	; 0x1c
    1860:	f4 01       	movw	r30, r8
    1862:	80 81       	ld	r24, Z
    1864:	91 81       	ldd	r25, Z+1	; 0x01
    1866:	a2 81       	ldd	r26, Z+2	; 0x02
    1868:	b3 81       	ldd	r27, Z+3	; 0x03
    186a:	8d 8f       	std	Y+29, r24	; 0x1d
    186c:	9e 8f       	std	Y+30, r25	; 0x1e
    186e:	af 8f       	std	Y+31, r26	; 0x1f
    1870:	b8 a3       	std	Y+32, r27	; 0x20
    1872:	2d 96       	adiw	r28, 0x0d	; 13
    1874:	ee ad       	ldd	r30, Y+62	; 0x3e
    1876:	ff ad       	ldd	r31, Y+63	; 0x3f
    1878:	2d 97       	sbiw	r28, 0x0d	; 13
    187a:	80 81       	ld	r24, Z
    187c:	91 81       	ldd	r25, Z+1	; 0x01
    187e:	a2 81       	ldd	r26, Z+2	; 0x02
    1880:	b3 81       	ldd	r27, Z+3	; 0x03
    1882:	89 a3       	std	Y+33, r24	; 0x21
    1884:	9a a3       	std	Y+34, r25	; 0x22
    1886:	ab a3       	std	Y+35, r26	; 0x23
    1888:	bc a3       	std	Y+36, r27	; 0x24
    188a:	2f 96       	adiw	r28, 0x0f	; 15
    188c:	ee ad       	ldd	r30, Y+62	; 0x3e
    188e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1890:	2f 97       	sbiw	r28, 0x0f	; 15
    1892:	80 81       	ld	r24, Z
    1894:	91 81       	ldd	r25, Z+1	; 0x01
    1896:	a2 81       	ldd	r26, Z+2	; 0x02
    1898:	b3 81       	ldd	r27, Z+3	; 0x03
    189a:	8d a3       	std	Y+37, r24	; 0x25
    189c:	9e a3       	std	Y+38, r25	; 0x26
    189e:	af a3       	std	Y+39, r26	; 0x27
    18a0:	b8 a7       	std	Y+40, r27	; 0x28
    18a2:	61 96       	adiw	r28, 0x11	; 17
    18a4:	ee ad       	ldd	r30, Y+62	; 0x3e
    18a6:	ff ad       	ldd	r31, Y+63	; 0x3f
    18a8:	61 97       	sbiw	r28, 0x11	; 17
    18aa:	80 81       	ld	r24, Z
    18ac:	91 81       	ldd	r25, Z+1	; 0x01
    18ae:	a2 81       	ldd	r26, Z+2	; 0x02
    18b0:	b3 81       	ldd	r27, Z+3	; 0x03
    18b2:	89 a7       	std	Y+41, r24	; 0x29
    18b4:	9a a7       	std	Y+42, r25	; 0x2a
    18b6:	ab a7       	std	Y+43, r26	; 0x2b
    18b8:	bc a7       	std	Y+44, r27	; 0x2c
    18ba:	63 96       	adiw	r28, 0x13	; 19
    18bc:	ee ad       	ldd	r30, Y+62	; 0x3e
    18be:	ff ad       	ldd	r31, Y+63	; 0x3f
    18c0:	63 97       	sbiw	r28, 0x13	; 19
    18c2:	80 81       	ld	r24, Z
    18c4:	91 81       	ldd	r25, Z+1	; 0x01
    18c6:	a2 81       	ldd	r26, Z+2	; 0x02
    18c8:	b3 81       	ldd	r27, Z+3	; 0x03
    18ca:	8d a7       	std	Y+45, r24	; 0x2d
    18cc:	9e a7       	std	Y+46, r25	; 0x2e
    18ce:	af a7       	std	Y+47, r26	; 0x2f
    18d0:	b8 ab       	std	Y+48, r27	; 0x30
    18d2:	65 96       	adiw	r28, 0x15	; 21
    18d4:	ee ad       	ldd	r30, Y+62	; 0x3e
    18d6:	ff ad       	ldd	r31, Y+63	; 0x3f
    18d8:	65 97       	sbiw	r28, 0x15	; 21
    18da:	80 81       	ld	r24, Z
    18dc:	91 81       	ldd	r25, Z+1	; 0x01
    18de:	a2 81       	ldd	r26, Z+2	; 0x02
    18e0:	b3 81       	ldd	r27, Z+3	; 0x03
    18e2:	89 ab       	std	Y+49, r24	; 0x31
    18e4:	9a ab       	std	Y+50, r25	; 0x32
    18e6:	ab ab       	std	Y+51, r26	; 0x33
    18e8:	bc ab       	std	Y+52, r27	; 0x34
    addValues(array);
    18ea:	be 01       	movw	r22, r28
    18ec:	6f 5f       	subi	r22, 0xFF	; 255
    18ee:	7f 4f       	sbci	r23, 0xFF	; 255
    18f0:	c3 01       	movw	r24, r6
    18f2:	0e 94 ae 0b 	call	0x175c	; 0x175c <_ZN9container6VectorIdE9addValuesILj13EEEbRAT__Kd>
}
    18f6:	e6 96       	adiw	r28, 0x36	; 54
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	f8 94       	cli
    18fc:	de bf       	out	0x3e, r29	; 62
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	cd bf       	out	0x3d, r28	; 61
    1902:	df 91       	pop	r29
    1904:	cf 91       	pop	r28
    1906:	1f 91       	pop	r17
    1908:	0f 91       	pop	r16
    190a:	ff 90       	pop	r15
    190c:	ef 90       	pop	r14
    190e:	df 90       	pop	r13
    1910:	cf 90       	pop	r12
    1912:	bf 90       	pop	r11
    1914:	af 90       	pop	r10
    1916:	9f 90       	pop	r9
    1918:	8f 90       	pop	r8
    191a:	7f 90       	pop	r7
    191c:	6f 90       	pop	r6
    191e:	5f 90       	pop	r5
    1920:	4f 90       	pop	r4
    1922:	3f 90       	pop	r3
    1924:	2f 90       	pop	r2
    1926:	08 95       	ret

00001928 <main>:
 * @brief Initialize and run the system on the target MCU.
 * 
 * @return 0 on termination of the program (should never occur).
 */
int main()
{
    1928:	4f 92       	push	r4
    192a:	5f 92       	push	r5
    192c:	6f 92       	push	r6
    192e:	7f 92       	push	r7
    1930:	8f 92       	push	r8
    1932:	9f 92       	push	r9
    1934:	af 92       	push	r10
    1936:	bf 92       	push	r11
    1938:	cf 92       	push	r12
    193a:	df 92       	push	r13
    193c:	ef 92       	push	r14
    193e:	ff 92       	push	r15
    1940:	0f 93       	push	r16
    1942:	1f 93       	push	r17
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	ca 5b       	subi	r28, 0xBA	; 186
    194e:	d1 09       	sbc	r29, r1
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    // Obtain a reference to the singleton serial device instance.
    auto& serial{Serial::getInstance()};
    195a:	0e 94 05 06 	call	0xc0a	; 0xc0a <_ZN6driver10atmega328p6Serial11getInstanceEv>
    195e:	3c 01       	movw	r6, r24
    serial.setEnabled(true);
    1960:	dc 01       	movw	r26, r24
    1962:	ed 91       	ld	r30, X+
    1964:	fc 91       	ld	r31, X
    1966:	02 84       	ldd	r0, Z+10	; 0x0a
    1968:	f3 85       	ldd	r31, Z+11	; 0x0b
    196a:	e0 2d       	mov	r30, r0
    196c:	61 e0       	ldi	r22, 0x01	; 1
    196e:	09 95       	icall
     *       T = 100 * Uin - 50.    
     *       T = yref, Uin = x. 
     */

    const container::Vector<double> trainInput{0.0, 0.3, 0.6, 0.9, 1.2, 1.5, 1.8, 
                                               2.1, 2.4, 2.7, 3.0, 3.3, 3.6, 3.9};
    1970:	e1 96       	adiw	r28, 0x31	; 49
    1972:	1c ae       	std	Y+60, r1	; 0x3c
    1974:	1d ae       	std	Y+61, r1	; 0x3d
    1976:	1e ae       	std	Y+62, r1	; 0x3e
    1978:	1f ae       	std	Y+63, r1	; 0x3f
    197a:	e1 97       	sbiw	r28, 0x31	; 49
    197c:	8a e9       	ldi	r24, 0x9A	; 154
    197e:	99 e9       	ldi	r25, 0x99	; 153
    1980:	a9 e9       	ldi	r26, 0x99	; 153
    1982:	be e3       	ldi	r27, 0x3E	; 62
    1984:	ad 96       	adiw	r28, 0x2d	; 45
    1986:	8c af       	std	Y+60, r24	; 0x3c
    1988:	9d af       	std	Y+61, r25	; 0x3d
    198a:	ae af       	std	Y+62, r26	; 0x3e
    198c:	bf af       	std	Y+63, r27	; 0x3f
    198e:	ad 97       	sbiw	r28, 0x2d	; 45
    1990:	8a e9       	ldi	r24, 0x9A	; 154
    1992:	99 e9       	ldi	r25, 0x99	; 153
    1994:	a9 e1       	ldi	r26, 0x19	; 25
    1996:	bf e3       	ldi	r27, 0x3F	; 63
    1998:	a9 96       	adiw	r28, 0x29	; 41
    199a:	8c af       	std	Y+60, r24	; 0x3c
    199c:	9d af       	std	Y+61, r25	; 0x3d
    199e:	ae af       	std	Y+62, r26	; 0x3e
    19a0:	bf af       	std	Y+63, r27	; 0x3f
    19a2:	a9 97       	sbiw	r28, 0x29	; 41
    19a4:	86 e6       	ldi	r24, 0x66	; 102
    19a6:	96 e6       	ldi	r25, 0x66	; 102
    19a8:	a6 e6       	ldi	r26, 0x66	; 102
    19aa:	bf e3       	ldi	r27, 0x3F	; 63
    19ac:	a5 96       	adiw	r28, 0x25	; 37
    19ae:	8c af       	std	Y+60, r24	; 0x3c
    19b0:	9d af       	std	Y+61, r25	; 0x3d
    19b2:	ae af       	std	Y+62, r26	; 0x3e
    19b4:	bf af       	std	Y+63, r27	; 0x3f
    19b6:	a5 97       	sbiw	r28, 0x25	; 37
    19b8:	8a e9       	ldi	r24, 0x9A	; 154
    19ba:	99 e9       	ldi	r25, 0x99	; 153
    19bc:	a9 e9       	ldi	r26, 0x99	; 153
    19be:	bf e3       	ldi	r27, 0x3F	; 63
    19c0:	a1 96       	adiw	r28, 0x21	; 33
    19c2:	8c af       	std	Y+60, r24	; 0x3c
    19c4:	9d af       	std	Y+61, r25	; 0x3d
    19c6:	ae af       	std	Y+62, r26	; 0x3e
    19c8:	bf af       	std	Y+63, r27	; 0x3f
    19ca:	a1 97       	sbiw	r28, 0x21	; 33
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	a0 ec       	ldi	r26, 0xC0	; 192
    19d2:	bf e3       	ldi	r27, 0x3F	; 63
    19d4:	6d 96       	adiw	r28, 0x1d	; 29
    19d6:	8c af       	std	Y+60, r24	; 0x3c
    19d8:	9d af       	std	Y+61, r25	; 0x3d
    19da:	ae af       	std	Y+62, r26	; 0x3e
    19dc:	bf af       	std	Y+63, r27	; 0x3f
    19de:	6d 97       	sbiw	r28, 0x1d	; 29
    19e0:	86 e6       	ldi	r24, 0x66	; 102
    19e2:	96 e6       	ldi	r25, 0x66	; 102
    19e4:	a6 ee       	ldi	r26, 0xE6	; 230
    19e6:	bf e3       	ldi	r27, 0x3F	; 63
    19e8:	69 96       	adiw	r28, 0x19	; 25
    19ea:	8c af       	std	Y+60, r24	; 0x3c
    19ec:	9d af       	std	Y+61, r25	; 0x3d
    19ee:	ae af       	std	Y+62, r26	; 0x3e
    19f0:	bf af       	std	Y+63, r27	; 0x3f
    19f2:	69 97       	sbiw	r28, 0x19	; 25
    19f4:	86 e6       	ldi	r24, 0x66	; 102
    19f6:	96 e6       	ldi	r25, 0x66	; 102
    19f8:	a6 e0       	ldi	r26, 0x06	; 6
    19fa:	b0 e4       	ldi	r27, 0x40	; 64
    19fc:	65 96       	adiw	r28, 0x15	; 21
    19fe:	8c af       	std	Y+60, r24	; 0x3c
    1a00:	9d af       	std	Y+61, r25	; 0x3d
    1a02:	ae af       	std	Y+62, r26	; 0x3e
    1a04:	bf af       	std	Y+63, r27	; 0x3f
    1a06:	65 97       	sbiw	r28, 0x15	; 21
    1a08:	5e 01       	movw	r10, r28
    1a0a:	bd e4       	ldi	r27, 0x4D	; 77
    1a0c:	ab 0e       	add	r10, r27
    1a0e:	b1 1c       	adc	r11, r1
    1a10:	8a e9       	ldi	r24, 0x9A	; 154
    1a12:	99 e9       	ldi	r25, 0x99	; 153
    1a14:	a9 e1       	ldi	r26, 0x19	; 25
    1a16:	b0 e4       	ldi	r27, 0x40	; 64
    1a18:	f5 01       	movw	r30, r10
    1a1a:	80 83       	st	Z, r24
    1a1c:	91 83       	std	Z+1, r25	; 0x01
    1a1e:	a2 83       	std	Z+2, r26	; 0x02
    1a20:	b3 83       	std	Z+3, r27	; 0x03
    1a22:	de 01       	movw	r26, r28
    1a24:	a7 5b       	subi	r26, 0xB7	; 183
    1a26:	bf 4f       	sbci	r27, 0xFF	; 255
    1a28:	4d ec       	ldi	r20, 0xCD	; 205
    1a2a:	5c ec       	ldi	r21, 0xCC	; 204
    1a2c:	6c e2       	ldi	r22, 0x2C	; 44
    1a2e:	70 e4       	ldi	r23, 0x40	; 64
    1a30:	4d 93       	st	X+, r20
    1a32:	5d 93       	st	X+, r21
    1a34:	6d 93       	st	X+, r22
    1a36:	7c 93       	st	X, r23
    1a38:	13 97       	sbiw	r26, 0x03	; 3
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	8b 5b       	subi	r24, 0xBB	; 187
    1a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a40:	40 e0       	ldi	r20, 0x00	; 0
    1a42:	50 e0       	ldi	r21, 0x00	; 0
    1a44:	60 e4       	ldi	r22, 0x40	; 64
    1a46:	70 e4       	ldi	r23, 0x40	; 64
    1a48:	fc 01       	movw	r30, r24
    1a4a:	40 83       	st	Z, r20
    1a4c:	51 83       	std	Z+1, r21	; 0x01
    1a4e:	62 83       	std	Z+2, r22	; 0x02
    1a50:	73 83       	std	Z+3, r23	; 0x03
    1a52:	9e 01       	movw	r18, r28
    1a54:	2f 5b       	subi	r18, 0xBF	; 191
    1a56:	3f 4f       	sbci	r19, 0xFF	; 255
    1a58:	43 e3       	ldi	r20, 0x33	; 51
    1a5a:	53 e3       	ldi	r21, 0x33	; 51
    1a5c:	63 e5       	ldi	r22, 0x53	; 83
    1a5e:	70 e4       	ldi	r23, 0x40	; 64
    1a60:	f9 01       	movw	r30, r18
    1a62:	40 83       	st	Z, r20
    1a64:	51 83       	std	Z+1, r21	; 0x01
    1a66:	62 83       	std	Z+2, r22	; 0x02
    1a68:	73 83       	std	Z+3, r23	; 0x03
    1a6a:	ae 01       	movw	r20, r28
    1a6c:	43 5c       	subi	r20, 0xC3	; 195
    1a6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a70:	0f 2e       	mov	r0, r31
    1a72:	f6 e6       	ldi	r31, 0x66	; 102
    1a74:	cf 2e       	mov	r12, r31
    1a76:	dc 2c       	mov	r13, r12
    1a78:	ec 2c       	mov	r14, r12
    1a7a:	f0 e4       	ldi	r31, 0x40	; 64
    1a7c:	ff 2e       	mov	r15, r31
    1a7e:	f0 2d       	mov	r31, r0
    1a80:	fa 01       	movw	r30, r20
    1a82:	c0 82       	st	Z, r12
    1a84:	d1 82       	std	Z+1, r13	; 0x01
    1a86:	e2 82       	std	Z+2, r14	; 0x02
    1a88:	f3 82       	std	Z+3, r15	; 0x03
    1a8a:	0f 2e       	mov	r0, r31
    1a8c:	fa e9       	ldi	r31, 0x9A	; 154
    1a8e:	cf 2e       	mov	r12, r31
    1a90:	f9 e9       	ldi	r31, 0x99	; 153
    1a92:	df 2e       	mov	r13, r31
    1a94:	f9 e7       	ldi	r31, 0x79	; 121
    1a96:	ef 2e       	mov	r14, r31
    1a98:	f0 e4       	ldi	r31, 0x40	; 64
    1a9a:	ff 2e       	mov	r15, r31
    1a9c:	f0 2d       	mov	r31, r0
    1a9e:	c9 ae       	std	Y+57, r12	; 0x39
    1aa0:	da ae       	std	Y+58, r13	; 0x3a
    1aa2:	eb ae       	std	Y+59, r14	; 0x3b
    1aa4:	fc ae       	std	Y+60, r15	; 0x3c
    1aa6:	be 01       	movw	r22, r28
    1aa8:	67 5c       	subi	r22, 0xC7	; 199
    1aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1aac:	7f 93       	push	r23
    1aae:	6f 93       	push	r22
    1ab0:	5f 93       	push	r21
    1ab2:	4f 93       	push	r20
    1ab4:	3f 93       	push	r19
    1ab6:	2f 93       	push	r18
    1ab8:	9f 93       	push	r25
    1aba:	8f 93       	push	r24
    1abc:	bf 93       	push	r27
    1abe:	af 93       	push	r26
    1ac0:	bf 92       	push	r11
    1ac2:	af 92       	push	r10
    1ac4:	20 5f       	subi	r18, 0xF0	; 240
    1ac6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac8:	49 01       	movw	r8, r18
    1aca:	40 96       	adiw	r24, 0x10	; 16
    1acc:	5c 01       	movw	r10, r24
    1ace:	50 96       	adiw	r26, 0x10	; 16
    1ad0:	6d 01       	movw	r12, r26
    1ad2:	b0 96       	adiw	r30, 0x20	; 32
    1ad4:	7f 01       	movw	r14, r30
    1ad6:	8e 01       	movw	r16, r28
    1ad8:	0f 59       	subi	r16, 0x9F	; 159
    1ada:	1f 4f       	sbci	r17, 0xFF	; 255
    1adc:	2c 5e       	subi	r18, 0xEC	; 236
    1ade:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae0:	44 5d       	subi	r20, 0xD4	; 212
    1ae2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae4:	6c 5c       	subi	r22, 0xCC	; 204
    1ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae8:	4c 96       	adiw	r24, 0x1c	; 28
    1aea:	0e 94 ad 0a 	call	0x155a	; 0x155a <_ZN9container6VectorIdEC1IIddddddddddddddEEEDpOKT_>
    const container::Vector<double> trainOutput{-50.0, -20.0, 10.0, 40.0, 70.0, 100.0, 130.0, 
                                                160.0, 190.0, 220.0, 250.0, 280.0, 310.0,};
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	a8 e4       	ldi	r26, 0x48	; 72
    1af4:	b2 ec       	ldi	r27, 0xC2	; 194
    1af6:	8d ab       	std	Y+53, r24	; 0x35
    1af8:	9e ab       	std	Y+54, r25	; 0x36
    1afa:	af ab       	std	Y+55, r26	; 0x37
    1afc:	b8 af       	std	Y+56, r27	; 0x38
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	a0 ea       	ldi	r26, 0xA0	; 160
    1b04:	b1 ec       	ldi	r27, 0xC1	; 193
    1b06:	89 ab       	std	Y+49, r24	; 0x31
    1b08:	9a ab       	std	Y+50, r25	; 0x32
    1b0a:	ab ab       	std	Y+51, r26	; 0x33
    1b0c:	bc ab       	std	Y+52, r27	; 0x34
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	a0 e2       	ldi	r26, 0x20	; 32
    1b14:	b1 e4       	ldi	r27, 0x41	; 65
    1b16:	8d a7       	std	Y+45, r24	; 0x2d
    1b18:	9e a7       	std	Y+46, r25	; 0x2e
    1b1a:	af a7       	std	Y+47, r26	; 0x2f
    1b1c:	b8 ab       	std	Y+48, r27	; 0x30
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	a0 e2       	ldi	r26, 0x20	; 32
    1b24:	b2 e4       	ldi	r27, 0x42	; 66
    1b26:	89 a7       	std	Y+41, r24	; 0x29
    1b28:	9a a7       	std	Y+42, r25	; 0x2a
    1b2a:	ab a7       	std	Y+43, r26	; 0x2b
    1b2c:	bc a7       	std	Y+44, r27	; 0x2c
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	ac e8       	ldi	r26, 0x8C	; 140
    1b34:	b2 e4       	ldi	r27, 0x42	; 66
    1b36:	8d a3       	std	Y+37, r24	; 0x25
    1b38:	9e a3       	std	Y+38, r25	; 0x26
    1b3a:	af a3       	std	Y+39, r26	; 0x27
    1b3c:	b8 a7       	std	Y+40, r27	; 0x28
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	a8 ec       	ldi	r26, 0xC8	; 200
    1b44:	b2 e4       	ldi	r27, 0x42	; 66
    1b46:	89 a3       	std	Y+33, r24	; 0x21
    1b48:	9a a3       	std	Y+34, r25	; 0x22
    1b4a:	ab a3       	std	Y+35, r26	; 0x23
    1b4c:	bc a3       	std	Y+36, r27	; 0x24
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	a2 e0       	ldi	r26, 0x02	; 2
    1b54:	b3 e4       	ldi	r27, 0x43	; 67
    1b56:	8d 8f       	std	Y+29, r24	; 0x1d
    1b58:	9e 8f       	std	Y+30, r25	; 0x1e
    1b5a:	af 8f       	std	Y+31, r26	; 0x1f
    1b5c:	b8 a3       	std	Y+32, r27	; 0x20
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	a0 e2       	ldi	r26, 0x20	; 32
    1b64:	b3 e4       	ldi	r27, 0x43	; 67
    1b66:	89 8f       	std	Y+25, r24	; 0x19
    1b68:	9a 8f       	std	Y+26, r25	; 0x1a
    1b6a:	ab 8f       	std	Y+27, r26	; 0x1b
    1b6c:	bc 8f       	std	Y+28, r27	; 0x1c
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	ae e3       	ldi	r26, 0x3E	; 62
    1b74:	b3 e4       	ldi	r27, 0x43	; 67
    1b76:	8d 8b       	std	Y+21, r24	; 0x15
    1b78:	9e 8b       	std	Y+22, r25	; 0x16
    1b7a:	af 8b       	std	Y+23, r26	; 0x17
    1b7c:	b8 8f       	std	Y+24, r27	; 0x18
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	ac e5       	ldi	r26, 0x5C	; 92
    1b84:	b3 e4       	ldi	r27, 0x43	; 67
    1b86:	89 8b       	std	Y+17, r24	; 0x11
    1b88:	9a 8b       	std	Y+18, r25	; 0x12
    1b8a:	ab 8b       	std	Y+19, r26	; 0x13
    1b8c:	bc 8b       	std	Y+20, r27	; 0x14
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	aa e7       	ldi	r26, 0x7A	; 122
    1b94:	b3 e4       	ldi	r27, 0x43	; 67
    1b96:	8d 87       	std	Y+13, r24	; 0x0d
    1b98:	9e 87       	std	Y+14, r25	; 0x0e
    1b9a:	af 87       	std	Y+15, r26	; 0x0f
    1b9c:	b8 8b       	std	Y+16, r27	; 0x10
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	ac e8       	ldi	r26, 0x8C	; 140
    1ba4:	b3 e4       	ldi	r27, 0x43	; 67
    1ba6:	89 87       	std	Y+9, r24	; 0x09
    1ba8:	9a 87       	std	Y+10, r25	; 0x0a
    1baa:	ab 87       	std	Y+11, r26	; 0x0b
    1bac:	bc 87       	std	Y+12, r27	; 0x0c
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	ab e9       	ldi	r26, 0x9B	; 155
    1bb4:	b3 e4       	ldi	r27, 0x43	; 67
    1bb6:	8d 83       	std	Y+5, r24	; 0x05
    1bb8:	9e 83       	std	Y+6, r25	; 0x06
    1bba:	af 83       	std	Y+7, r26	; 0x07
    1bbc:	b8 87       	std	Y+8, r27	; 0x08
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	05 96       	adiw	r24, 0x05	; 5
    1bc2:	9f 93       	push	r25
    1bc4:	8f 93       	push	r24
    1bc6:	04 96       	adiw	r24, 0x04	; 4
    1bc8:	9f 93       	push	r25
    1bca:	8f 93       	push	r24
    1bcc:	04 96       	adiw	r24, 0x04	; 4
    1bce:	9f 93       	push	r25
    1bd0:	8f 93       	push	r24
    1bd2:	04 96       	adiw	r24, 0x04	; 4
    1bd4:	9f 93       	push	r25
    1bd6:	8f 93       	push	r24
    1bd8:	04 96       	adiw	r24, 0x04	; 4
    1bda:	9f 93       	push	r25
    1bdc:	8f 93       	push	r24
    1bde:	9e 01       	movw	r18, r28
    1be0:	27 5e       	subi	r18, 0xE7	; 231
    1be2:	3f 4f       	sbci	r19, 0xFF	; 255
    1be4:	49 01       	movw	r8, r18
    1be6:	08 96       	adiw	r24, 0x08	; 8
    1be8:	5c 01       	movw	r10, r24
    1bea:	de 01       	movw	r26, r28
    1bec:	91 96       	adiw	r26, 0x21	; 33
    1bee:	6d 01       	movw	r12, r26
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	b5 96       	adiw	r30, 0x25	; 37
    1bf4:	7f 01       	movw	r14, r30
    1bf6:	08 53       	subi	r16, 0x38	; 56
    1bf8:	11 09       	sbc	r17, r1
    1bfa:	2c 5e       	subi	r18, 0xEC	; 236
    1bfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bfe:	ae 01       	movw	r20, r28
    1c00:	4f 5c       	subi	r20, 0xCF	; 207
    1c02:	5f 4f       	sbci	r21, 0xFF	; 255
    1c04:	be 01       	movw	r22, r28
    1c06:	6b 5c       	subi	r22, 0xCB	; 203
    1c08:	7f 4f       	sbci	r23, 0xFF	; 255
    1c0a:	88 5a       	subi	r24, 0xA8	; 168
    1c0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c0e:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN9container6VectorIdEC1IIdddddddddddddEEEDpOKT_>

    ml::lin_reg::LinReg linRegModel{trainInput, trainOutput};
    1c12:	ae 01       	movw	r20, r28
    1c14:	4b 58       	subi	r20, 0x8B	; 139
    1c16:	5f 4f       	sbci	r21, 0xFF	; 255
    1c18:	be 01       	movw	r22, r28
    1c1a:	6f 58       	subi	r22, 0x8F	; 143
    1c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1e:	ce 01       	movw	r24, r28
    1c20:	87 58       	subi	r24, 0x87	; 135
    1c22:	9f 4f       	sbci	r25, 0xFF	; 255
    1c24:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <_ZN2ml7lin_reg6LinRegC1ERKN9container6VectorIdEES6_>

    if (linRegModel.train(1000, 0.1))
    1c28:	2d ec       	ldi	r18, 0xCD	; 205
    1c2a:	3c ec       	ldi	r19, 0xCC	; 204
    1c2c:	4c ec       	ldi	r20, 0xCC	; 204
    1c2e:	5d e3       	ldi	r21, 0x3D	; 61
    1c30:	68 ee       	ldi	r22, 0xE8	; 232
    1c32:	73 e0       	ldi	r23, 0x03	; 3
    1c34:	ce 01       	movw	r24, r28
    1c36:	87 58       	subi	r24, 0x87	; 135
    1c38:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3a:	0e 94 df 10 	call	0x21be	; 0x21be <_ZN2ml7lin_reg6LinReg5trainEjd>
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	88 23       	and	r24, r24
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <main+0x326>
    1c4c:	06 c1       	rjmp	.+524    	; 0x1e5a <main+0x532>
    {
        for (const auto& x : trainInput)
    1c4e:	be 01       	movw	r22, r28
    1c50:	6f 58       	subi	r22, 0x8F	; 143
    1c52:	7f 4f       	sbci	r23, 0xFF	; 255
    1c54:	ce 01       	movw	r24, r28
    1c56:	87 54       	subi	r24, 0x47	; 71
    1c58:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5a:	0e 94 b0 09 	call	0x1360	; 0x1360 <_ZNK9container6VectorIdE5beginEv>
    1c5e:	be 01       	movw	r22, r28
    1c60:	6f 58       	subi	r22, 0x8F	; 143
    1c62:	7f 4f       	sbci	r23, 0xFF	; 255
    1c64:	ce 01       	movw	r24, r28
    1c66:	89 54       	subi	r24, 0x49	; 73
    1c68:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6a:	0e 94 b7 09 	call	0x136e	; 0x136e <_ZNK9container6VectorIdE3endEv>
     *
     * @param[in] other Reference to other iterator.
     * 
     * @return True if the iterators point at the different addresses, false otherwise.
     */
    bool operator!=(const ConstIterator& other) const noexcept { return myData != other.myData; }
    1c6e:	c7 54       	subi	r28, 0x47	; 71
    1c70:	df 4f       	sbci	r29, 0xFF	; 255
    1c72:	e8 81       	ld	r30, Y
    1c74:	f9 81       	ldd	r31, Y+1	; 0x01
    1c76:	c9 5b       	subi	r28, 0xB9	; 185
    1c78:	d0 40       	sbci	r29, 0x00	; 0
    1c7a:	c9 54       	subi	r28, 0x49	; 73
    1c7c:	df 4f       	sbci	r29, 0xFF	; 255
    1c7e:	88 81       	ld	r24, Y
    1c80:	99 81       	ldd	r25, Y+1	; 0x01
    1c82:	c7 5b       	subi	r28, 0xB7	; 183
    1c84:	d0 40       	sbci	r29, 0x00	; 0
    1c86:	8e 17       	cp	r24, r30
    1c88:	9f 07       	cpc	r25, r31
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <main+0x366>
    1c8c:	6e c0       	rjmp	.+220    	; 0x1d6a <main+0x442>
        {
            const auto voltage_mV{x * 1000.0};
    1c8e:	80 80       	ld	r8, Z
    1c90:	91 80       	ldd	r9, Z+1	; 0x01
    1c92:	a2 80       	ldd	r10, Z+2	; 0x02
    1c94:	b3 80       	ldd	r11, Z+3	; 0x03
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	4a e7       	ldi	r20, 0x7A	; 122
    1c9c:	54 e4       	ldi	r21, 0x44	; 68
    1c9e:	c5 01       	movw	r24, r10
    1ca0:	b4 01       	movw	r22, r8
    1ca2:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    1ca6:	6b 01       	movw	r12, r22
    1ca8:	7c 01       	movw	r14, r24
            serial.printf("x = %d mV, yref = %d C\n", round(voltage_mV), round(linRegModel.predict(x)));
    1caa:	b5 01       	movw	r22, r10
    1cac:	a4 01       	movw	r20, r8
    1cae:	ce 01       	movw	r24, r28
    1cb0:	87 58       	subi	r24, 0x87	; 135
    1cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb4:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <_ZNK2ml7lin_reg6LinReg7predictEd>
    1cb8:	4b 01       	movw	r8, r22
    1cba:	5c 01       	movw	r10, r24
 */
void predictTimerCallback() noexcept { mySys->handlepredictTimerInterrupt(); }

constexpr int round(const double number) noexcept
{
    return 0.0 <= number ? static_cast<int>(number + 0.5) : static_cast<int>(number - 0.5);
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	a9 01       	movw	r20, r18
    1cc2:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__gesf2>
    1cc6:	88 23       	and	r24, r24
    1cc8:	5c f0       	brlt	.+22     	; 0x1ce0 <main+0x3b8>
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e0       	ldi	r20, 0x00	; 0
    1cd0:	5f e3       	ldi	r21, 0x3F	; 63
    1cd2:	c5 01       	movw	r24, r10
    1cd4:	b4 01       	movw	r22, r8
    1cd6:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__addsf3>
    1cda:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__fixsfsi>
    1cde:	0a c0       	rjmp	.+20     	; 0x1cf4 <main+0x3cc>
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e0       	ldi	r20, 0x00	; 0
    1ce6:	5f e3       	ldi	r21, 0x3F	; 63
    1ce8:	c5 01       	movw	r24, r10
    1cea:	b4 01       	movw	r22, r8
    1cec:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__subsf3>
    1cf0:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__fixsfsi>
    if (linRegModel.train(1000, 0.1))
    {
        for (const auto& x : trainInput)
        {
            const auto voltage_mV{x * 1000.0};
            serial.printf("x = %d mV, yref = %d C\n", round(voltage_mV), round(linRegModel.predict(x)));
    1cf4:	7c 83       	std	Y+4, r23	; 0x04
    1cf6:	6b 83       	std	Y+3, r22	; 0x03
 */
void predictTimerCallback() noexcept { mySys->handlepredictTimerInterrupt(); }

constexpr int round(const double number) noexcept
{
    return 0.0 <= number ? static_cast<int>(number + 0.5) : static_cast<int>(number - 0.5);
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	a9 01       	movw	r20, r18
    1cfe:	c7 01       	movw	r24, r14
    1d00:	b6 01       	movw	r22, r12
    1d02:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__gesf2>
    1d06:	88 23       	and	r24, r24
    1d08:	5c f0       	brlt	.+22     	; 0x1d20 <main+0x3f8>
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	40 e0       	ldi	r20, 0x00	; 0
    1d10:	5f e3       	ldi	r21, 0x3F	; 63
    1d12:	c7 01       	movw	r24, r14
    1d14:	b6 01       	movw	r22, r12
    1d16:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__addsf3>
    1d1a:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__fixsfsi>
    1d1e:	0a c0       	rjmp	.+20     	; 0x1d34 <main+0x40c>
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e0       	ldi	r20, 0x00	; 0
    1d26:	5f e3       	ldi	r21, 0x3F	; 63
    1d28:	c7 01       	movw	r24, r14
    1d2a:	b6 01       	movw	r22, r12
    1d2c:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__subsf3>
    1d30:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__fixsfsi>
    if (linRegModel.train(1000, 0.1))
    {
        for (const auto& x : trainInput)
        {
            const auto voltage_mV{x * 1000.0};
            serial.printf("x = %d mV, yref = %d C\n", round(voltage_mV), round(linRegModel.predict(x)));
    1d34:	7a 83       	std	Y+2, r23	; 0x02
    1d36:	69 83       	std	Y+1, r22	; 0x01
    1d38:	9e 01       	movw	r18, r28
    1d3a:	2d 5f       	subi	r18, 0xFD	; 253
    1d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3e:	ae 01       	movw	r20, r28
    1d40:	4f 5f       	subi	r20, 0xFF	; 255
    1d42:	5f 4f       	sbci	r21, 0xFF	; 255
    1d44:	68 e2       	ldi	r22, 0x28	; 40
    1d46:	72 e0       	ldi	r23, 0x02	; 2
    1d48:	c3 01       	movw	r24, r6
    1d4a:	0e 94 c6 09 	call	0x138c	; 0x138c <_ZNK6driver15SerialInterface6printfIIiiEEEbPKcDpRKT_>
     * 
     * @return Reference to this iterator.
     */
    ConstIterator& operator++() noexcept
    {
        ++myData;
    1d4e:	c7 54       	subi	r28, 0x47	; 71
    1d50:	df 4f       	sbci	r29, 0xFF	; 255
    1d52:	88 81       	ld	r24, Y
    1d54:	99 81       	ldd	r25, Y+1	; 0x01
    1d56:	c9 5b       	subi	r28, 0xB9	; 185
    1d58:	d0 40       	sbci	r29, 0x00	; 0
    1d5a:	04 96       	adiw	r24, 0x04	; 4
    1d5c:	c7 54       	subi	r28, 0x47	; 71
    1d5e:	df 4f       	sbci	r29, 0xFF	; 255
    1d60:	99 83       	std	Y+1, r25	; 0x01
    1d62:	88 83       	st	Y, r24
    1d64:	c9 5b       	subi	r28, 0xB9	; 185
    1d66:	d0 40       	sbci	r29, 0x00	; 0
    1d68:	82 cf       	rjmp	.-252    	; 0x1c6e <main+0x346>
        serial.printf("Training failed.");
        return -1;
    }

    // Obtain a reference to the singleton ADC instance.
    auto& adc{Adc::getInstance()};
    1d6a:	0e 94 46 01 	call	0x28c	; 0x28c <_ZN6driver10atmega328p3Adc11getInstanceEv>
    1d6e:	4c 01       	movw	r8, r24
    adc.setEnabled(true);
    1d70:	dc 01       	movw	r26, r24
    1d72:	ed 91       	ld	r30, X+
    1d74:	fc 91       	ld	r31, X
    1d76:	04 88       	ldd	r0, Z+20	; 0x14
    1d78:	f5 89       	ldd	r31, Z+21	; 0x15
    1d7a:	e0 2d       	mov	r30, r0
    1d7c:	61 e0       	ldi	r22, 0x01	; 1
    1d7e:	09 95       	icall
    const auto temp{linRegModel.predict(inputVoltage)};

    serial.printf("Real input voltage: %d mV, predicted temperature: %d C!\n", round(mV), round(temp)); */

    // Initialize the GPIO devices.
    Gpio led{8U, Gpio::Direction::Output};
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	42 e0       	ldi	r20, 0x02	; 2
    1d86:	68 e0       	ldi	r22, 0x08	; 8
    1d88:	ce 01       	movw	r24, r28
    1d8a:	87 57       	subi	r24, 0x77	; 119
    1d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8e:	0e 94 83 04 	call	0x906	; 0x906 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE>
    Gpio button{13U, Gpio::Direction::InputPullup, buttonCallback};
    1d92:	29 ea       	ldi	r18, 0xA9	; 169
    1d94:	39 e0       	ldi	r19, 0x09	; 9
    1d96:	41 e0       	ldi	r20, 0x01	; 1
    1d98:	6d e0       	ldi	r22, 0x0D	; 13
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	82 57       	subi	r24, 0x72	; 114
    1d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1da0:	0e 94 83 04 	call	0x906	; 0x906 <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE>

    // Initialize the timers.
    Timer debounceTimer{300U, debounceTimerCallback};
    1da4:	00 e0       	ldi	r16, 0x00	; 0
    1da6:	22 ea       	ldi	r18, 0xA2	; 162
    1da8:	39 e0       	ldi	r19, 0x09	; 9
    1daa:	4c e2       	ldi	r20, 0x2C	; 44
    1dac:	51 e0       	ldi	r21, 0x01	; 1
    1dae:	60 e0       	ldi	r22, 0x00	; 0
    1db0:	70 e0       	ldi	r23, 0x00	; 0
    1db2:	ce 01       	movw	r24, r28
    1db4:	8d 56       	subi	r24, 0x6D	; 109
    1db6:	9f 4f       	sbci	r25, 0xFF	; 255
    1db8:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN6driver10atmega328p5TimerC1EmPFvvEb>
    Timer predictTimer{3000UL, predictTimerCallback};
    1dbc:	2b e9       	ldi	r18, 0x9B	; 155
    1dbe:	39 e0       	ldi	r19, 0x09	; 9
    1dc0:	48 eb       	ldi	r20, 0xB8	; 184
    1dc2:	5b e0       	ldi	r21, 0x0B	; 11
    1dc4:	60 e0       	ldi	r22, 0x00	; 0
    1dc6:	70 e0       	ldi	r23, 0x00	; 0
    1dc8:	ce 01       	movw	r24, r28
    1dca:	84 56       	subi	r24, 0x64	; 100
    1dcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dce:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN6driver10atmega328p5TimerC1EmPFvvEb>
    predictTimer.start();
    1dd2:	ce 01       	movw	r24, r28
    1dd4:	84 56       	subi	r24, 0x64	; 100
    1dd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd8:	0e 94 a9 06 	call	0xd52	; 0xd52 <_ZN6driver10atmega328p5Timer5startEv>

    // Obtain a reference to the singleton watchdog timer instance.
    auto& watchdog{Watchdog::getInstance()};
    1ddc:	0e 94 82 09 	call	0x1304	; 0x1304 <_ZN6driver10atmega328p8Watchdog11getInstanceEv>
    1de0:	6c 01       	movw	r12, r24

    // Obtain a reference to the singleton EEPROM instance.
    auto& eeprom{Eeprom::getInstance()};
    1de2:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_ZN6driver10atmega328p6Eeprom11getInstanceEv>

    // Initialize the system with the given hardware.
    target::System system{led, button, debounceTimer, predictTimer, serial, watchdog, eeprom, adc, linRegModel};
    1de6:	2e 01       	movw	r4, r28
    1de8:	b5 ea       	ldi	r27, 0xA5	; 165
    1dea:	4b 0e       	add	r4, r27
    1dec:	51 1c       	adc	r5, r1
    1dee:	9e 01       	movw	r18, r28
    1df0:	27 58       	subi	r18, 0x87	; 135
    1df2:	3f 4f       	sbci	r19, 0xFF	; 255
    1df4:	3f 93       	push	r19
    1df6:	2f 93       	push	r18
    1df8:	5c 01       	movw	r10, r24
    1dfa:	73 01       	movw	r14, r6
    1dfc:	8e 01       	movw	r16, r28
    1dfe:	04 56       	subi	r16, 0x64	; 100
    1e00:	1f 4f       	sbci	r17, 0xFF	; 255
    1e02:	26 5e       	subi	r18, 0xE6	; 230
    1e04:	3f 4f       	sbci	r19, 0xFF	; 255
    1e06:	ae 01       	movw	r20, r28
    1e08:	42 57       	subi	r20, 0x72	; 114
    1e0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e0c:	be 01       	movw	r22, r28
    1e0e:	67 57       	subi	r22, 0x77	; 119
    1e10:	7f 4f       	sbci	r23, 0xFF	; 255
    1e12:	c2 01       	movw	r24, r4
    1e14:	0e 94 6d 14 	call	0x28da	; 0x28da <_ZN6target6SystemC1ERN6driver13GpioInterfaceES3_RNS1_14TimerInterfaceES5_RNS1_15SerialInterfaceERNS1_17WatchdogInterfaceERNS1_15EepromInterfaceERNS1_12AdcInterfaceERN2ml7lin_reg9InterfaceE>
    mySys = &system;
    1e18:	50 92 47 03 	sts	0x0347, r5	; 0x800347 <_ZN12_GLOBAL__N_15mySysE+0x1>
    1e1c:	40 92 46 03 	sts	0x0346, r4	; 0x800346 <_ZN12_GLOBAL__N_15mySysE>

    // Run the system perpetually on the target MCU.
    mySys->run();
    1e20:	c2 01       	movw	r24, r4
    1e22:	0e 94 08 13 	call	0x2610	; 0x2610 <_ZN6target6System3runEv>

    // Obtain a reference to the singleton EEPROM instance.
    auto& eeprom{Eeprom::getInstance()};

    // Initialize the system with the given hardware.
    target::System system{led, button, debounceTimer, predictTimer, serial, watchdog, eeprom, adc, linRegModel};
    1e26:	c2 01       	movw	r24, r4
    1e28:	0e 94 27 12 	call	0x244e	; 0x244e <_ZN6target6SystemD1Ev>
    Gpio led{8U, Gpio::Direction::Output};
    Gpio button{13U, Gpio::Direction::InputPullup, buttonCallback};

    // Initialize the timers.
    Timer debounceTimer{300U, debounceTimerCallback};
    Timer predictTimer{3000UL, predictTimerCallback};
    1e2c:	c8 01       	movw	r24, r16
    1e2e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN6driver10atmega328p5TimerD1Ev>
    // Initialize the GPIO devices.
    Gpio led{8U, Gpio::Direction::Output};
    Gpio button{13U, Gpio::Direction::InputPullup, buttonCallback};

    // Initialize the timers.
    Timer debounceTimer{300U, debounceTimerCallback};
    1e32:	ce 01       	movw	r24, r28
    1e34:	8d 56       	subi	r24, 0x6D	; 109
    1e36:	9f 4f       	sbci	r25, 0xFF	; 255
    1e38:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN6driver10atmega328p5TimerD1Ev>

    serial.printf("Real input voltage: %d mV, predicted temperature: %d C!\n", round(mV), round(temp)); */

    // Initialize the GPIO devices.
    Gpio led{8U, Gpio::Direction::Output};
    Gpio button{13U, Gpio::Direction::InputPullup, buttonCallback};
    1e3c:	ce 01       	movw	r24, r28
    1e3e:	82 57       	subi	r24, 0x72	; 114
    1e40:	9f 4f       	sbci	r25, 0xFF	; 255
    1e42:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6driver10atmega328p4GpioD1Ev>
    const auto temp{linRegModel.predict(inputVoltage)};

    serial.printf("Real input voltage: %d mV, predicted temperature: %d C!\n", round(mV), round(temp)); */

    // Initialize the GPIO devices.
    Gpio led{8U, Gpio::Direction::Output};
    1e46:	ce 01       	movw	r24, r28
    1e48:	87 57       	subi	r24, 0x77	; 119
    1e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6driver10atmega328p4GpioD1Ev>
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0

    // Run the system perpetually on the target MCU.
    mySys->run();

    // This point should never be reached; the system is intended to run indefinitely on the target MCU.
    return 0;
    1e54:	00 e0       	ldi	r16, 0x00	; 0
    1e56:	10 e0       	ldi	r17, 0x00	; 0
    1e58:	07 c0       	rjmp	.+14     	; 0x1e68 <main+0x540>
            serial.printf("x = %d mV, yref = %d C\n", round(voltage_mV), round(linRegModel.predict(x)));
        }
    }
    else 
    {
        serial.printf("Training failed.");
    1e5a:	60 e4       	ldi	r22, 0x40	; 64
    1e5c:	72 e0       	ldi	r23, 0x02	; 2
    1e5e:	c3 01       	movw	r24, r6
    1e60:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
        return -1;
    1e64:	0f ef       	ldi	r16, 0xFF	; 255
    1e66:	1f ef       	ldi	r17, 0xFF	; 255
{
public:
    /**
     * @brief Delete the default destructor.
     */
    virtual ~Interface() noexcept = default;
    1e68:	85 e5       	ldi	r24, 0x55	; 85
    1e6a:	92 e0       	ldi	r25, 0x02	; 2
    1e6c:	eb 96       	adiw	r28, 0x3b	; 59
    1e6e:	9f af       	std	Y+63, r25	; 0x3f
    1e70:	8e af       	std	Y+62, r24	; 0x3e
    1e72:	eb 97       	sbiw	r28, 0x3b	; 59
     */

    const container::Vector<double> trainInput{0.0, 0.3, 0.6, 0.9, 1.2, 1.5, 1.8, 
                                               2.1, 2.4, 2.7, 3.0, 3.3, 3.6, 3.9};
    const container::Vector<double> trainOutput{-50.0, -20.0, 10.0, 40.0, 70.0, 100.0, 130.0, 
                                                160.0, 190.0, 220.0, 250.0, 280.0, 310.0,};
    1e74:	ce 01       	movw	r24, r28
    1e76:	8b 58       	subi	r24, 0x8B	; 139
    1e78:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7a:	0e 94 3d 0a 	call	0x147a	; 0x147a <_ZN9container6VectorIdED1Ev>
     *       T = 100 * Uin - 50.    
     *       T = yref, Uin = x. 
     */

    const container::Vector<double> trainInput{0.0, 0.3, 0.6, 0.9, 1.2, 1.5, 1.8, 
                                               2.1, 2.4, 2.7, 3.0, 3.3, 3.6, 3.9};
    1e7e:	ce 01       	movw	r24, r28
    1e80:	8f 58       	subi	r24, 0x8F	; 143
    1e82:	9f 4f       	sbci	r25, 0xFF	; 255
    1e84:	0e 94 3d 0a 	call	0x147a	; 0x147a <_ZN9container6VectorIdED1Ev>
    // Run the system perpetually on the target MCU.
    mySys->run();

    // This point should never be reached; the system is intended to run indefinitely on the target MCU.
    return 0;
}
    1e88:	c8 01       	movw	r24, r16
    1e8a:	c6 54       	subi	r28, 0x46	; 70
    1e8c:	df 4f       	sbci	r29, 0xFF	; 255
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28
    1e9c:	1f 91       	pop	r17
    1e9e:	0f 91       	pop	r16
    1ea0:	ff 90       	pop	r15
    1ea2:	ef 90       	pop	r14
    1ea4:	df 90       	pop	r13
    1ea6:	cf 90       	pop	r12
    1ea8:	bf 90       	pop	r11
    1eaa:	af 90       	pop	r10
    1eac:	9f 90       	pop	r9
    1eae:	8f 90       	pop	r8
    1eb0:	7f 90       	pop	r7
    1eb2:	6f 90       	pop	r6
    1eb4:	5f 90       	pop	r5
    1eb6:	4f 90       	pop	r4
    1eb8:	08 95       	ret

00001eba <_ZNK2ml7lin_reg6LinReg7predictEd>:
    , myWeight{randomStartVal()}
{} 

//--------------------------------------------------------------------------------
double LinReg::LinReg::predict(const double input) const noexcept
{
    1eba:	cf 93       	push	r28
    1ebc:	df 93       	push	r29
    1ebe:	ec 01       	movw	r28, r24
    1ec0:	9a 01       	movw	r18, r20
    1ec2:	ab 01       	movw	r20, r22
    return myWeight * input + myBias;
    1ec4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ec6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ec8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1eca:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ecc:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    1ed0:	28 85       	ldd	r18, Y+8	; 0x08
    1ed2:	39 85       	ldd	r19, Y+9	; 0x09
    1ed4:	4a 85       	ldd	r20, Y+10	; 0x0a
    1ed6:	5b 85       	ldd	r21, Y+11	; 0x0b
    1ed8:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__addsf3>
}
    1edc:	df 91       	pop	r29
    1ede:	cf 91       	pop	r28
    1ee0:	08 95       	ret

00001ee2 <_ZN2ml7lin_reg6LinRegD1Ev>:
    1ee2:	25 e5       	ldi	r18, 0x55	; 85
    1ee4:	32 e0       	ldi	r19, 0x02	; 2
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	31 83       	std	Z+1, r19	; 0x01
    1eea:	20 83       	st	Z, r18
    1eec:	08 95       	ret

00001eee <_ZN2ml7lin_reg12_GLOBAL__N_110initRandomEv>:
    // Create a static local variable, which indicates whether the generator has been initialized.
    // This line (with the initialization) is only run once.
    static auto initialized{false};

    // Terminate the function if the generator already has been initialized.
    if (initialized) { return; }
    1eee:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <_ZZN2ml7lin_reg12_GLOBAL__N_110initRandomEvE11initialized>
    1ef2:	81 11       	cpse	r24, r1
    1ef4:	0a c0       	rjmp	.+20     	; 0x1f0a <_ZN2ml7lin_reg12_GLOBAL__N_110initRandomEv+0x1c>

    // Initialize the generator, use the current time as seed (start of the random sequence).
    // time(nullptr) provides the current time.
    srand(time(nullptr));
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	0e 94 95 00 	call	0x12a	; 0x12a <time>
    1efe:	cb 01       	movw	r24, r22
    1f00:	0e 94 00 19 	call	0x3200	; 0x3200 <srand>

    // Mark the random generator as initialized.
    initialized = true;
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <_ZZN2ml7lin_reg12_GLOBAL__N_110initRandomEvE11initialized>
    1f0a:	08 95       	ret

00001f0c <_ZN2ml7lin_reg12_GLOBAL__N_114randomStartValEv>:
 * 
 * @return Random number between 0.0 - 1.0
 */
double randomStartVal() noexcept
{
    initRandom();
    1f0c:	0e 94 77 0f 	call	0x1eee	; 0x1eee <_ZN2ml7lin_reg12_GLOBAL__N_110initRandomEv>
    // Divide rand() / RAND_MAX, beware integer division.
    return rand() / static_cast<double>(RAND_MAX);
    1f10:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <rand>
    1f14:	bc 01       	movw	r22, r24
    1f16:	99 0f       	add	r25, r25
    1f18:	88 0b       	sbc	r24, r24
    1f1a:	99 0b       	sbc	r25, r25
    1f1c:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <__floatsisf>
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	3e ef       	ldi	r19, 0xFE	; 254
    1f24:	4f ef       	ldi	r20, 0xFF	; 255
    1f26:	56 e4       	ldi	r21, 0x46	; 70
    1f28:	0e 94 65 15 	call	0x2aca	; 0x2aca <__divsf3>
}
    1f2c:	08 95       	ret

00001f2e <_ZN2ml7lin_reg6LinRegD0Ev>:
    1f2e:	25 e5       	ldi	r18, 0x55	; 85
    1f30:	32 e0       	ldi	r19, 0x02	; 2
    1f32:	fc 01       	movw	r30, r24
    1f34:	31 83       	std	Z+1, r19	; 0x01
    1f36:	20 83       	st	Z, r18
    explicit LinReg(const container::Vector<double>& trainInput, const container::Vector<double>& trainOutput) noexcept;
    
    /**
     * @brief Delete the default constructor.
     */
    ~LinReg() noexcept override = default;
    1f38:	60 e1       	ldi	r22, 0x10	; 16
    1f3a:	70 e0       	ldi	r23, 0x00	; 0
    1f3c:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <_ZdlPvj>
    1f40:	08 95       	ret

00001f42 <_Z41__static_initialization_and_destruction_0ii>:
    }

    return true;
}
} // namespace lin_reg
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	49 f4       	brne	.+18     	; 0x1f58 <_Z41__static_initialization_and_destruction_0ii+0x16>
    1f46:	6f 3f       	cpi	r22, 0xFF	; 255
    1f48:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4a:	31 f4       	brne	.+12     	; 0x1f58 <_Z41__static_initialization_and_destruction_0ii+0x16>
}

/** Default start value for the weight and bias. */
constexpr auto DefaultStartVal{0.5};

auto& serial{driver::atmega328p::Serial::getInstance()};
    1f4c:	0e 94 05 06 	call	0xc0a	; 0xc0a <_ZN6driver10atmega328p6Serial11getInstanceEv>
    1f50:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <_ZN2ml7lin_reg12_GLOBAL__N_16serialE+0x1>
    1f54:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <_ZN2ml7lin_reg12_GLOBAL__N_16serialE>
    1f58:	08 95       	ret

00001f5a <_ZNK9container6VectorIdE4sizeEv>:
template <typename T>
const T* Vector<T>::data() const noexcept { return myData; }

// -----------------------------------------------------------------------------
template <typename T>
size_t Vector<T>::size() const noexcept { return mySize; }
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	82 81       	ldd	r24, Z+2	; 0x02
    1f5e:	93 81       	ldd	r25, Z+3	; 0x03
    1f60:	08 95       	ret

00001f62 <_ZN2ml7lin_reg12_GLOBAL__N_116getTrainSetCountERKN9container6VectorIdEES6_>:
namespace
{
//--------------------------------------------------------------------------------
size_t getTrainSetCount(const container::Vector<double>& input, 
                             const container::Vector<double>& output) noexcept
{
    1f62:	0f 93       	push	r16
    1f64:	1f 93       	push	r17
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	8b 01       	movw	r16, r22
    return (input.size() <= output.size()) ? input.size() : output.size();
    1f6c:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <_ZNK9container6VectorIdE4sizeEv>
    1f70:	ec 01       	movw	r28, r24
    1f72:	c8 01       	movw	r24, r16
    1f74:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <_ZNK9container6VectorIdE4sizeEv>
    1f78:	8c 17       	cp	r24, r28
    1f7a:	9d 07       	cpc	r25, r29
    1f7c:	08 f0       	brcs	.+2      	; 0x1f80 <_ZN2ml7lin_reg12_GLOBAL__N_116getTrainSetCountERKN9container6VectorIdEES6_+0x1e>
    1f7e:	ce 01       	movw	r24, r28
}
    1f80:	df 91       	pop	r29
    1f82:	cf 91       	pop	r28
    1f84:	1f 91       	pop	r17
    1f86:	0f 91       	pop	r16
    1f88:	08 95       	ret

00001f8a <_ZN2ml7lin_reg6LinRegC1ERKN9container6VectorIdEES6_>:
auto& serial{driver::atmega328p::Serial::getInstance()};

} // namespace

//--------------------------------------------------------------------------------
LinReg::LinReg(const container::Vector<double>& trainInput, const container::Vector<double>& trainOutput) noexcept
    1f8a:	cf 93       	push	r28
    1f8c:	df 93       	push	r29
    1f8e:	ec 01       	movw	r28, r24
    1f90:	cb 01       	movw	r24, r22
    : myTrainInput{trainInput}
    , myTrainOutput{trainOutput}
    , myTrainSetCount{getTrainSetCount(trainInput, trainOutput)}
    , myBias{randomStartVal()}
    , myWeight{randomStartVal()}
    1f92:	23 e8       	ldi	r18, 0x83	; 131
    1f94:	32 e0       	ldi	r19, 0x02	; 2
    1f96:	39 83       	std	Y+1, r19	; 0x01
    1f98:	28 83       	st	Y, r18
    1f9a:	7b 83       	std	Y+3, r23	; 0x03
    1f9c:	6a 83       	std	Y+2, r22	; 0x02
    1f9e:	5d 83       	std	Y+5, r21	; 0x05
    1fa0:	4c 83       	std	Y+4, r20	; 0x04

//--------------------------------------------------------------------------------
LinReg::LinReg(const container::Vector<double>& trainInput, const container::Vector<double>& trainOutput) noexcept
    : myTrainInput{trainInput}
    , myTrainOutput{trainOutput}
    , myTrainSetCount{getTrainSetCount(trainInput, trainOutput)}
    1fa2:	ba 01       	movw	r22, r20
    1fa4:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <_ZN2ml7lin_reg12_GLOBAL__N_116getTrainSetCountERKN9container6VectorIdEES6_>
    , myBias{randomStartVal()}
    , myWeight{randomStartVal()}
    1fa8:	9f 83       	std	Y+7, r25	; 0x07
    1faa:	8e 83       	std	Y+6, r24	; 0x06
//--------------------------------------------------------------------------------
LinReg::LinReg(const container::Vector<double>& trainInput, const container::Vector<double>& trainOutput) noexcept
    : myTrainInput{trainInput}
    , myTrainOutput{trainOutput}
    , myTrainSetCount{getTrainSetCount(trainInput, trainOutput)}
    , myBias{randomStartVal()}
    1fac:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <_ZN2ml7lin_reg12_GLOBAL__N_114randomStartValEv>
    , myWeight{randomStartVal()}
    1fb0:	68 87       	std	Y+8, r22	; 0x08
    1fb2:	79 87       	std	Y+9, r23	; 0x09
    1fb4:	8a 87       	std	Y+10, r24	; 0x0a
    1fb6:	9b 87       	std	Y+11, r25	; 0x0b
    1fb8:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <_ZN2ml7lin_reg12_GLOBAL__N_114randomStartValEv>
    1fbc:	6c 87       	std	Y+12, r22	; 0x0c
    1fbe:	7d 87       	std	Y+13, r23	; 0x0d
    1fc0:	8e 87       	std	Y+14, r24	; 0x0e
    1fc2:	9f 87       	std	Y+15, r25	; 0x0f
{} 
    1fc4:	df 91       	pop	r29
    1fc6:	cf 91       	pop	r28
    1fc8:	08 95       	ret

00001fca <_ZNK9container6VectorIjE4sizeEv>:
    1fca:	fc 01       	movw	r30, r24
    1fcc:	82 81       	ldd	r24, Z+2	; 0x02
    1fce:	93 81       	ldd	r25, Z+3	; 0x03
    1fd0:	08 95       	ret

00001fd2 <_ZN9container6VectorIjEixEj>:

// -----------------------------------------------------------------------------
template <typename T>
T& Vector<T>::operator[](const size_t index) noexcept 
{ 
    return myData[index]; 
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	80 81       	ld	r24, Z
    1fd6:	91 81       	ldd	r25, Z+1	; 0x01
    1fd8:	66 0f       	add	r22, r22
    1fda:	77 1f       	adc	r23, r23
}
    1fdc:	86 0f       	add	r24, r22
    1fde:	97 1f       	adc	r25, r23
    1fe0:	08 95       	ret

00001fe2 <_ZN2ml7lin_reg12_GLOBAL__N_17shuffleERN9container6VectorIjEE>:
 * @brief Shuffle the content of the given vector.
 * 
 * @param[in] data Reference to the vector to shuffle.
 */
void shuffle(container::Vector<size_t>& data) noexcept
{
    1fe2:	af 92       	push	r10
    1fe4:	bf 92       	push	r11
    1fe6:	cf 92       	push	r12
    1fe8:	df 92       	push	r13
    1fea:	ef 92       	push	r14
    1fec:	ff 92       	push	r15
    1fee:	0f 93       	push	r16
    1ff0:	1f 93       	push	r17
    1ff2:	cf 93       	push	r28
    1ff4:	df 93       	push	r29
    1ff6:	ec 01       	movw	r28, r24
    // Get a random integer between 0 - data.size() - 1, call this index r.
    for (size_t i{}; i < data.size(); ++i)
    1ff8:	00 e0       	ldi	r16, 0x00	; 0
    1ffa:	10 e0       	ldi	r17, 0x00	; 0
    1ffc:	ce 01       	movw	r24, r28
    1ffe:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZNK9container6VectorIjE4sizeEv>
    2002:	08 17       	cp	r16, r24
    2004:	19 07       	cpc	r17, r25
    2006:	38 f5       	brcc	.+78     	; 0x2056 <_ZN2ml7lin_reg12_GLOBAL__N_17shuffleERN9container6VectorIjEE+0x74>
    {
        // Get a random index r (between 0-4 if we have five training sets).
        const auto r{rand() % data.size()};
    2008:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <rand>
    200c:	7c 01       	movw	r14, r24
    200e:	ce 01       	movw	r24, r28
    2010:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZNK9container6VectorIjE4sizeEv>
    2014:	bc 01       	movw	r22, r24
    2016:	c7 01       	movw	r24, r14
    2018:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__udivmodhi4>
    201c:	7c 01       	movw	r14, r24

        // Swap the elements at index i and r => make a copy of data[i].
        const auto temp{data[i]};
    201e:	b8 01       	movw	r22, r16
    2020:	ce 01       	movw	r24, r28
    2022:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN9container6VectorIjEixEj>
    2026:	6c 01       	movw	r12, r24
    2028:	fc 01       	movw	r30, r24
    202a:	a0 80       	ld	r10, Z
    202c:	b1 80       	ldd	r11, Z+1	; 0x01

        // Copy data[r] to data[i] => now we have two instances of data[r] in the vector.
        data[i] = data[r];
    202e:	b7 01       	movw	r22, r14
    2030:	ce 01       	movw	r24, r28
    2032:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN9container6VectorIjEixEj>
    2036:	fc 01       	movw	r30, r24
    2038:	80 81       	ld	r24, Z
    203a:	91 81       	ldd	r25, Z+1	; 0x01
    203c:	f6 01       	movw	r30, r12
    203e:	91 83       	std	Z+1, r25	; 0x01
    2040:	80 83       	st	Z, r24

        // Finally put the copy of the "old" data[i] to data[r] => we have swapped the elements.
        data[r] = temp;
    2042:	b7 01       	movw	r22, r14
    2044:	ce 01       	movw	r24, r28
    2046:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN9container6VectorIjEixEj>
    204a:	fc 01       	movw	r30, r24
    204c:	b1 82       	std	Z+1, r11	; 0x01
    204e:	a0 82       	st	Z, r10
 * @param[in] data Reference to the vector to shuffle.
 */
void shuffle(container::Vector<size_t>& data) noexcept
{
    // Get a random integer between 0 - data.size() - 1, call this index r.
    for (size_t i{}; i < data.size(); ++i)
    2050:	0f 5f       	subi	r16, 0xFF	; 255
    2052:	1f 4f       	sbci	r17, 0xFF	; 255
    2054:	d3 cf       	rjmp	.-90     	; 0x1ffc <_ZN2ml7lin_reg12_GLOBAL__N_17shuffleERN9container6VectorIjEE+0x1a>
        data[i] = data[r];

        // Finally put the copy of the "old" data[i] to data[r] => we have swapped the elements.
        data[r] = temp;
    }
}
    2056:	df 91       	pop	r29
    2058:	cf 91       	pop	r28
    205a:	1f 91       	pop	r17
    205c:	0f 91       	pop	r16
    205e:	ff 90       	pop	r15
    2060:	ef 90       	pop	r14
    2062:	df 90       	pop	r13
    2064:	cf 90       	pop	r12
    2066:	bf 90       	pop	r11
    2068:	af 90       	pop	r10
    206a:	08 95       	ret

0000206c <_ZN9container6VectorIjE5beginEv>:
template <typename T>
bool Vector<T>::empty() const noexcept { return mySize == 0U; }

// -----------------------------------------------------------------------------
template <typename T>
typename Vector<T>::Iterator Vector<T>::begin() noexcept { return Iterator{myData}; }
    206c:	fb 01       	movw	r30, r22
    206e:	20 81       	ld	r18, Z
    2070:	31 81       	ldd	r19, Z+1	; 0x01
     * @brief Create iterator pointing at given data.
     *
     * @param[in] data Pointer to data the iterator is set to point at.
     */
    Iterator(T* data) noexcept
        : myData{data} {}
    2072:	fc 01       	movw	r30, r24
    2074:	31 83       	std	Z+1, r19	; 0x01
    2076:	20 83       	st	Z, r18
    2078:	08 95       	ret

0000207a <_ZN9container6VectorIjE3endEv>:

// -----------------------------------------------------------------------------
template <typename T>
typename Vector<T>::Iterator Vector<T>::end() noexcept 
{ 
    return Iterator{myData + mySize}; 
    207a:	fb 01       	movw	r30, r22
    207c:	40 81       	ld	r20, Z
    207e:	51 81       	ldd	r21, Z+1	; 0x01
    2080:	22 81       	ldd	r18, Z+2	; 0x02
    2082:	33 81       	ldd	r19, Z+3	; 0x03
    2084:	22 0f       	add	r18, r18
    2086:	33 1f       	adc	r19, r19
    2088:	24 0f       	add	r18, r20
    208a:	35 1f       	adc	r19, r21
    208c:	fc 01       	movw	r30, r24
    208e:	31 83       	std	Z+1, r19	; 0x01
    2090:	20 83       	st	Z, r18
}
    2092:	08 95       	ret

00002094 <_ZNK9container6VectorIdEixEj>:

// -----------------------------------------------------------------------------
template <typename T>
const T& Vector<T>::operator[](const size_t index) const noexcept 
{ 
    return myData[index]; 
    2094:	fc 01       	movw	r30, r24
    2096:	80 81       	ld	r24, Z
    2098:	91 81       	ldd	r25, Z+1	; 0x01
    209a:	66 0f       	add	r22, r22
    209c:	77 1f       	adc	r23, r23
    209e:	66 0f       	add	r22, r22
    20a0:	77 1f       	adc	r23, r23
}
    20a2:	86 0f       	add	r24, r22
    20a4:	97 1f       	adc	r25, r23
    20a6:	08 95       	ret

000020a8 <_ZNK6driver15SerialInterface6printfIIjEEEbPKcDpRKT_>:
    virtual void print(const char* str) const = 0;
};

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
    20a8:	ef 92       	push	r14
    20aa:	ff 92       	push	r15
    20ac:	0f 93       	push	r16
    20ae:	1f 93       	push	r17
    20b0:	cf 93       	push	r28
    20b2:	df 93       	push	r29
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	c5 56       	subi	r28, 0x65	; 101
    20ba:	d1 09       	sbc	r29, r1
    20bc:	0f b6       	in	r0, 0x3f	; 63
    20be:	f8 94       	cli
    20c0:	de bf       	out	0x3e, r29	; 62
    20c2:	0f be       	out	0x3f, r0	; 63
    20c4:	cd bf       	out	0x3d, r28	; 61
{
    if (nullptr == format) { return false; }
    20c6:	61 15       	cp	r22, r1
    20c8:	71 05       	cpc	r23, r1
    20ca:	41 f1       	breq	.+80     	; 0x211c <_ZNK6driver15SerialInterface6printfIIjEEEbPKcDpRKT_+0x74>
    20cc:	fa 01       	movw	r30, r20
    20ce:	8c 01       	movw	r16, r24

    // Format and insert given additional arguments (if any).
    if (0U < sizeof...(args))
    {
        constexpr size_t length{101U};
        char buffer[length]{'\0'};
    20d0:	85 e6       	ldi	r24, 0x65	; 101
    20d2:	9e 01       	movw	r18, r28
    20d4:	2f 5f       	subi	r18, 0xFF	; 255
    20d6:	3f 4f       	sbci	r19, 0xFF	; 255
    20d8:	79 01       	movw	r14, r18
    20da:	d9 01       	movw	r26, r18
    20dc:	28 2f       	mov	r18, r24
    20de:	1d 92       	st	X+, r1
    20e0:	2a 95       	dec	r18
    20e2:	e9 f7       	brne	.-6      	; 0x20de <_ZNK6driver15SerialInterface6printfIIjEEEbPKcDpRKT_+0x36>
        (void) snprintf(buffer, length, format, args...);
    20e4:	90 81       	ld	r25, Z
    20e6:	21 81       	ldd	r18, Z+1	; 0x01
    20e8:	2f 93       	push	r18
    20ea:	9f 93       	push	r25
    20ec:	7f 93       	push	r23
    20ee:	6f 93       	push	r22
    20f0:	1f 92       	push	r1
    20f2:	8f 93       	push	r24
    20f4:	ff 92       	push	r15
    20f6:	ef 92       	push	r14
    20f8:	0e 94 da 19 	call	0x33b4	; 0x33b4 <snprintf>
        print(buffer);
    20fc:	d8 01       	movw	r26, r16
    20fe:	ed 91       	ld	r30, X+
    2100:	fc 91       	ld	r31, X
    2102:	04 84       	ldd	r0, Z+12	; 0x0c
    2104:	f5 85       	ldd	r31, Z+13	; 0x0d
    2106:	e0 2d       	mov	r30, r0
    2108:	b7 01       	movw	r22, r14
    210a:	c8 01       	movw	r24, r16
    210c:	09 95       	icall
    }
    // Print the string.
    else { print(format); }
    return true;
    210e:	0f b6       	in	r0, 0x3f	; 63
    2110:	f8 94       	cli
    2112:	de bf       	out	0x3e, r29	; 62
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	cd bf       	out	0x3d, r28	; 61
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	01 c0       	rjmp	.+2      	; 0x211e <_ZNK6driver15SerialInterface6printfIIjEEEbPKcDpRKT_+0x76>

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
{
    if (nullptr == format) { return false; }
    211c:	80 e0       	ldi	r24, 0x00	; 0
        print(buffer);
    }
    // Print the string.
    else { print(format); }
    return true;
}
    211e:	cb 59       	subi	r28, 0x9B	; 155
    2120:	df 4f       	sbci	r29, 0xFF	; 255
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	de bf       	out	0x3e, r29	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	cd bf       	out	0x3d, r28	; 61
    212c:	df 91       	pop	r29
    212e:	cf 91       	pop	r28
    2130:	1f 91       	pop	r17
    2132:	0f 91       	pop	r16
    2134:	ff 90       	pop	r15
    2136:	ef 90       	pop	r14
    2138:	08 95       	ret

0000213a <_ZN9container6VectorIjEC1Ev>:
{
// -----------------------------------------------------------------------------
template <typename T>
Vector<T>::Vector() noexcept
    : myData{nullptr}
    , mySize{} {}
    213a:	fc 01       	movw	r30, r24
    213c:	11 82       	std	Z+1, r1	; 0x01
    213e:	10 82       	st	Z, r1
    2140:	13 82       	std	Z+3, r1	; 0x03
    2142:	12 82       	std	Z+2, r1	; 0x02
    2144:	08 95       	ret

00002146 <_ZN9container6VectorIjE6resizeEj>:
    mySize = 0U;
}

// -----------------------------------------------------------------------------
template <typename T>
bool Vector<T>::resize(const size_t newSize) noexcept 
    2146:	0f 93       	push	r16
    2148:	1f 93       	push	r17
    214a:	cf 93       	push	r28
    214c:	df 93       	push	r29
    214e:	ec 01       	movw	r28, r24
    2150:	8b 01       	movw	r16, r22
    2152:	66 0f       	add	r22, r22
    2154:	77 1f       	adc	r23, r23
    2156:	88 81       	ld	r24, Y
    2158:	99 81       	ldd	r25, Y+1	; 0x01
    215a:	0e 94 0b 19 	call	0x3216	; 0x3216 <realloc>
{
    auto copy{utils::reallocMemory<T>(myData, newSize)};
    if (copy == nullptr) { return false; }
    215e:	00 97       	sbiw	r24, 0x00	; 0
    2160:	31 f0       	breq	.+12     	; 0x216e <_ZN9container6VectorIjE6resizeEj+0x28>
    myData = copy;
    2162:	99 83       	std	Y+1, r25	; 0x01
    2164:	88 83       	st	Y, r24
    mySize = newSize;
    2166:	1b 83       	std	Y+3, r17	; 0x03
    2168:	0a 83       	std	Y+2, r16	; 0x02
    return true;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	01 c0       	rjmp	.+2      	; 0x2170 <_ZN9container6VectorIjE6resizeEj+0x2a>
// -----------------------------------------------------------------------------
template <typename T>
bool Vector<T>::resize(const size_t newSize) noexcept 
{
    auto copy{utils::reallocMemory<T>(myData, newSize)};
    if (copy == nullptr) { return false; }
    216e:	80 e0       	ldi	r24, 0x00	; 0
    myData = copy;
    mySize = newSize;
    return true;
}
    2170:	df 91       	pop	r29
    2172:	cf 91       	pop	r28
    2174:	1f 91       	pop	r17
    2176:	0f 91       	pop	r16
    2178:	08 95       	ret

0000217a <_ZN9container6VectorIjEC1Ej>:
    : myData{nullptr}
    , mySize{} {}

// -----------------------------------------------------------------------------
template <typename T>
Vector<T>::Vector(const size_t size) noexcept
    217a:	0f 93       	push	r16
    217c:	1f 93       	push	r17
    217e:	cf 93       	push	r28
    2180:	df 93       	push	r29
    2182:	ec 01       	movw	r28, r24
    2184:	8b 01       	movw	r16, r22
    : Vector() 
    2186:	0e 94 9d 10 	call	0x213a	; 0x213a <_ZN9container6VectorIjEC1Ev>
{ 
    resize(size); 
    218a:	b8 01       	movw	r22, r16
    218c:	ce 01       	movw	r24, r28
    218e:	0e 94 a3 10 	call	0x2146	; 0x2146 <_ZN9container6VectorIjE6resizeEj>
}
    2192:	df 91       	pop	r29
    2194:	cf 91       	pop	r28
    2196:	1f 91       	pop	r17
    2198:	0f 91       	pop	r16
    219a:	08 95       	ret

0000219c <_ZN9container6VectorIjE5clearEv>:
template <typename T>
const T* Vector<T>::last() const noexcept { return mySize > 0U ? end() - 1U : nullptr; }

// -----------------------------------------------------------------------------
template <typename T>
void Vector<T>::clear() noexcept 
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
    21a0:	ec 01       	movw	r28, r24

// -----------------------------------------------------------------------------
template <typename T>
inline void deleteMemory(T* &block) noexcept
{
    free(block);
    21a2:	88 81       	ld	r24, Y
    21a4:	99 81       	ldd	r25, Y+1	; 0x01
    21a6:	0e 94 26 18 	call	0x304c	; 0x304c <free>
    block = nullptr;
    21aa:	19 82       	std	Y+1, r1	; 0x01
    21ac:	18 82       	st	Y, r1
{
    utils::deleteMemory<T>(myData);
    myData = nullptr;
    mySize = 0U;
    21ae:	1b 82       	std	Y+3, r1	; 0x03
    21b0:	1a 82       	std	Y+2, r1	; 0x02
}
    21b2:	df 91       	pop	r29
    21b4:	cf 91       	pop	r28
    21b6:	08 95       	ret

000021b8 <_ZN9container6VectorIjED1Ev>:

// -----------------------------------------------------------------------------
template <typename T>
Vector<T>::~Vector() noexcept 
{ 
    clear(); 
    21b8:	0e 94 ce 10 	call	0x219c	; 0x219c <_ZN9container6VectorIjE5clearEv>
    21bc:	08 95       	ret

000021be <_ZN2ml7lin_reg6LinReg5trainEjd>:
    return myWeight * input + myBias;
}

//--------------------------------------------------------------------------------
bool LinReg::LinReg::train(const size_t epochCount, const double learningRate) noexcept
{
    21be:	2f 92       	push	r2
    21c0:	3f 92       	push	r3
    21c2:	4f 92       	push	r4
    21c4:	5f 92       	push	r5
    21c6:	6f 92       	push	r6
    21c8:	7f 92       	push	r7
    21ca:	8f 92       	push	r8
    21cc:	9f 92       	push	r9
    21ce:	af 92       	push	r10
    21d0:	bf 92       	push	r11
    21d2:	cf 92       	push	r12
    21d4:	df 92       	push	r13
    21d6:	ef 92       	push	r14
    21d8:	ff 92       	push	r15
    21da:	0f 93       	push	r16
    21dc:	1f 93       	push	r17
    21de:	cf 93       	push	r28
    21e0:	df 93       	push	r29
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    21e6:	62 97       	sbiw	r28, 0x12	; 18
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
   // gamla -> if ((0U == epochCount) || (0.0 <= learningRate)) { return false; }

    // Return false if epochCount == 0, learningRate <= 0.0 or trainingSetCount == 0.
    if ((0U == epochCount) || (0.0 >= learningRate) || (0U == myTrainSetCount)) { return false; }
    21f2:	61 15       	cp	r22, r1
    21f4:	71 05       	cpc	r23, r1
    21f6:	09 f4       	brne	.+2      	; 0x21fa <_ZN2ml7lin_reg6LinReg5trainEjd+0x3c>
    21f8:	05 c1       	rjmp	.+522    	; 0x2404 <_ZN2ml7lin_reg6LinReg5trainEjd+0x246>
    21fa:	2f 87       	std	Y+15, r18	; 0x0f
    21fc:	38 8b       	std	Y+16, r19	; 0x10
    21fe:	49 8b       	std	Y+17, r20	; 0x11
    2200:	5a 8b       	std	Y+18, r21	; 0x12
    2202:	1b 01       	movw	r2, r22
    2204:	8c 01       	movw	r16, r24
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	a9 01       	movw	r20, r18
    220c:	6f 85       	ldd	r22, Y+15	; 0x0f
    220e:	78 89       	ldd	r23, Y+16	; 0x10
    2210:	89 89       	ldd	r24, Y+17	; 0x11
    2212:	9a 89       	ldd	r25, Y+18	; 0x12
    2214:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__cmpsf2>
    2218:	18 16       	cp	r1, r24
    221a:	0c f0       	brlt	.+2      	; 0x221e <_ZN2ml7lin_reg6LinReg5trainEjd+0x60>
    221c:	f5 c0       	rjmp	.+490    	; 0x2408 <_ZN2ml7lin_reg6LinReg5trainEjd+0x24a>
    221e:	f8 01       	movw	r30, r16
    2220:	66 81       	ldd	r22, Z+6	; 0x06
    2222:	77 81       	ldd	r23, Z+7	; 0x07
    2224:	61 15       	cp	r22, r1
    2226:	71 05       	cpc	r23, r1
    2228:	09 f4       	brne	.+2      	; 0x222c <_ZN2ml7lin_reg6LinReg5trainEjd+0x6e>
    222a:	f0 c0       	rjmp	.+480    	; 0x240c <_ZN2ml7lin_reg6LinReg5trainEjd+0x24e>

    // Create a vector holding indexes of the training sets (for randomizing the training order).
    container::Vector<size_t> trainIndex(myTrainSetCount);
    222c:	ce 01       	movw	r24, r28
    222e:	01 96       	adiw	r24, 0x01	; 1
    2230:	0e 94 bd 10 	call	0x217a	; 0x217a <_ZN9container6VectorIjEC1Ej>
    
    // Add the indexes of the training sets (0, 1, 2... setCount - 1).
    for (size_t i{}; i < myTrainSetCount; ++i) { trainIndex[i] = i; }
    2234:	e1 2c       	mov	r14, r1
    2236:	f1 2c       	mov	r15, r1
    2238:	f8 01       	movw	r30, r16
    223a:	86 81       	ldd	r24, Z+6	; 0x06
    223c:	97 81       	ldd	r25, Z+7	; 0x07
    223e:	e8 16       	cp	r14, r24
    2240:	f9 06       	cpc	r15, r25
    2242:	60 f4       	brcc	.+24     	; 0x225c <_ZN2ml7lin_reg6LinReg5trainEjd+0x9e>
    2244:	b7 01       	movw	r22, r14
    2246:	ce 01       	movw	r24, r28
    2248:	01 96       	adiw	r24, 0x01	; 1
    224a:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN9container6VectorIjEixEj>
    224e:	fc 01       	movw	r30, r24
    2250:	f1 82       	std	Z+1, r15	; 0x01
    2252:	e0 82       	st	Z, r14
    2254:	ff ef       	ldi	r31, 0xFF	; 255
    2256:	ef 1a       	sub	r14, r31
    2258:	ff 0a       	sbc	r15, r31
    225a:	ee cf       	rjmp	.-36     	; 0x2238 <_ZN2ml7lin_reg6LinReg5trainEjd+0x7a>

    // Train for `epochCount` epochs or until the model predicts within 1e-6 of the yref values.
    for (size_t epoch{}; epoch < epochCount; ++epoch)
    225c:	1a 86       	std	Y+10, r1	; 0x0a
    225e:	19 86       	std	Y+9, r1	; 0x09
    2260:	89 85       	ldd	r24, Y+9	; 0x09
    2262:	9a 85       	ldd	r25, Y+10	; 0x0a
    2264:	82 15       	cp	r24, r2
    2266:	93 05       	cpc	r25, r3
    2268:	08 f0       	brcs	.+2      	; 0x226c <_ZN2ml7lin_reg6LinReg5trainEjd+0xae>
    226a:	c6 c0       	rjmp	.+396    	; 0x23f8 <_ZN2ml7lin_reg6LinReg5trainEjd+0x23a>
    {
        double totalErr{};

        // Shuffle the content of trainIndex, i.e., randomize the order of the training sets.
        
        shuffle(trainIndex);
    226c:	ce 01       	movw	r24, r28
    226e:	01 96       	adiw	r24, 0x01	; 1
    2270:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <_ZN2ml7lin_reg12_GLOBAL__N_17shuffleERN9container6VectorIjEE>

        // Iterate through the training sets one by one, use the random order from trainIndex.
        for (const auto& i : trainIndex)
    2274:	be 01       	movw	r22, r28
    2276:	6f 5f       	subi	r22, 0xFF	; 255
    2278:	7f 4f       	sbci	r23, 0xFF	; 255
    227a:	ce 01       	movw	r24, r28
    227c:	07 96       	adiw	r24, 0x07	; 7
    227e:	0e 94 36 10 	call	0x206c	; 0x206c <_ZN9container6VectorIjE5beginEv>
    2282:	be 01       	movw	r22, r28
    2284:	6f 5f       	subi	r22, 0xFF	; 255
    2286:	7f 4f       	sbci	r23, 0xFF	; 255
    2288:	ce 01       	movw	r24, r28
    228a:	05 96       	adiw	r24, 0x05	; 5
    228c:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN9container6VectorIjE3endEv>
    for (size_t i{}; i < myTrainSetCount; ++i) { trainIndex[i] = i; }

    // Train for `epochCount` epochs or until the model predicts within 1e-6 of the yref values.
    for (size_t epoch{}; epoch < epochCount; ++epoch)
    {
        double totalErr{};
    2290:	1b 86       	std	Y+11, r1	; 0x0b
    2292:	1c 86       	std	Y+12, r1	; 0x0c
    2294:	1d 86       	std	Y+13, r1	; 0x0d
    2296:	1e 86       	std	Y+14, r1	; 0x0e
     *
     * @param[in] other Reference to other iterator.
     * 
     * @return True if the iterators point at the different addresses, false otherwise.
     */
    bool operator!=(const Iterator& other) const noexcept { return myData != other.myData; }
    2298:	ef 81       	ldd	r30, Y+7	; 0x07
    229a:	f8 85       	ldd	r31, Y+8	; 0x08
    229c:	8d 81       	ldd	r24, Y+5	; 0x05
    229e:	9e 81       	ldd	r25, Y+6	; 0x06
        // Shuffle the content of trainIndex, i.e., randomize the order of the training sets.
        
        shuffle(trainIndex);

        // Iterate through the training sets one by one, use the random order from trainIndex.
        for (const auto& i : trainIndex)
    22a0:	8e 17       	cp	r24, r30
    22a2:	9f 07       	cpc	r25, r31
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <_ZN2ml7lin_reg6LinReg5trainEjd+0xea>
    22a6:	7f c0       	rjmp	.+254    	; 0x23a6 <_ZN2ml7lin_reg6LinReg5trainEjd+0x1e8>
        {
            // Get the values of the current training set.
            const auto x{myTrainInput[i]};
    22a8:	a0 80       	ld	r10, Z
    22aa:	b1 80       	ldd	r11, Z+1	; 0x01
    22ac:	b5 01       	movw	r22, r10
    22ae:	f8 01       	movw	r30, r16
    22b0:	82 81       	ldd	r24, Z+2	; 0x02
    22b2:	93 81       	ldd	r25, Z+3	; 0x03
    22b4:	0e 94 4a 10 	call	0x2094	; 0x2094 <_ZNK9container6VectorIdEixEj>
    22b8:	fc 01       	movw	r30, r24
    22ba:	c0 80       	ld	r12, Z
    22bc:	d1 80       	ldd	r13, Z+1	; 0x01
    22be:	e2 80       	ldd	r14, Z+2	; 0x02
    22c0:	f3 80       	ldd	r15, Z+3	; 0x03
            const auto yref{myTrainOutput[i]};
    22c2:	b5 01       	movw	r22, r10
    22c4:	f8 01       	movw	r30, r16
    22c6:	84 81       	ldd	r24, Z+4	; 0x04
    22c8:	95 81       	ldd	r25, Z+5	; 0x05
    22ca:	0e 94 4a 10 	call	0x2094	; 0x2094 <_ZNK9container6VectorIdEixEj>
    22ce:	fc 01       	movw	r30, r24
    22d0:	80 80       	ld	r8, Z
    22d2:	91 80       	ldd	r9, Z+1	; 0x01
    22d4:	a2 80       	ldd	r10, Z+2	; 0x02
    22d6:	b3 80       	ldd	r11, Z+3	; 0x03

            // If x == 0.0, we just got our bias value, i.e., m = yref.
            if (0.0 == x) { myBias = yref; }
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	a9 01       	movw	r20, r18
    22de:	c7 01       	movw	r24, r14
    22e0:	b6 01       	movw	r22, r12
    22e2:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__cmpsf2>
    22e6:	81 11       	cpse	r24, r1
    22e8:	06 c0       	rjmp	.+12     	; 0x22f6 <_ZN2ml7lin_reg6LinReg5trainEjd+0x138>
    22ea:	f8 01       	movw	r30, r16
    22ec:	80 86       	std	Z+8, r8	; 0x08
    22ee:	91 86       	std	Z+9, r9	; 0x09
    22f0:	a2 86       	std	Z+10, r10	; 0x0a
    22f2:	b3 86       	std	Z+11, r11	; 0x0b
    22f4:	52 c0       	rjmp	.+164    	; 0x239a <_ZN2ml7lin_reg6LinReg5trainEjd+0x1dc>

            // Optimize the parameters as usual if x != 0.0.
            else
            {
                // Perform prediction and calculate the error/deviation.
                const auto ypred{predict(x)};
    22f6:	b7 01       	movw	r22, r14
    22f8:	a6 01       	movw	r20, r12
    22fa:	c8 01       	movw	r24, r16
    22fc:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <_ZNK2ml7lin_reg6LinReg7predictEd>
    2300:	9b 01       	movw	r18, r22
    2302:	ac 01       	movw	r20, r24
                const auto e{yref - ypred};
    2304:	c5 01       	movw	r24, r10
    2306:	b4 01       	movw	r22, r8
    2308:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__subsf3>
    230c:	4b 01       	movw	r8, r22
    230e:	5c 01       	movw	r10, r24
                
                // Modify the bias: m = m + e * LR.
                myBias += e * learningRate;
    2310:	9b 01       	movw	r18, r22
    2312:	ac 01       	movw	r20, r24
    2314:	6f 85       	ldd	r22, Y+15	; 0x0f
    2316:	78 89       	ldd	r23, Y+16	; 0x10
    2318:	89 89       	ldd	r24, Y+17	; 0x11
    231a:	9a 89       	ldd	r25, Y+18	; 0x12
    231c:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    2320:	2b 01       	movw	r4, r22
    2322:	3c 01       	movw	r6, r24
    2324:	9b 01       	movw	r18, r22
    2326:	ac 01       	movw	r20, r24
    2328:	f8 01       	movw	r30, r16
    232a:	60 85       	ldd	r22, Z+8	; 0x08
    232c:	71 85       	ldd	r23, Z+9	; 0x09
    232e:	82 85       	ldd	r24, Z+10	; 0x0a
    2330:	93 85       	ldd	r25, Z+11	; 0x0b
    2332:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__addsf3>
    2336:	f8 01       	movw	r30, r16
    2338:	60 87       	std	Z+8, r22	; 0x08
    233a:	71 87       	std	Z+9, r23	; 0x09
    233c:	82 87       	std	Z+10, r24	; 0x0a
    233e:	93 87       	std	Z+11, r25	; 0x0b

                // Modify the weight: k = k + e * LR * x.
                myWeight += e * learningRate * x;
    2340:	a3 01       	movw	r20, r6
    2342:	92 01       	movw	r18, r4
    2344:	c7 01       	movw	r24, r14
    2346:	b6 01       	movw	r22, r12
    2348:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    234c:	9b 01       	movw	r18, r22
    234e:	ac 01       	movw	r20, r24
    2350:	f8 01       	movw	r30, r16
    2352:	64 85       	ldd	r22, Z+12	; 0x0c
    2354:	75 85       	ldd	r23, Z+13	; 0x0d
    2356:	86 85       	ldd	r24, Z+14	; 0x0e
    2358:	97 85       	ldd	r25, Z+15	; 0x0f
    235a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__addsf3>
    235e:	f8 01       	movw	r30, r16
    2360:	64 87       	std	Z+12, r22	; 0x0c
    2362:	75 87       	std	Z+13, r23	; 0x0d
    2364:	86 87       	std	Z+14, r24	; 0x0e
    2366:	97 87       	std	Z+15, r25	; 0x0f
 * 
 * @param[in] num The number in question.
 * 
 * @return The absolute value of the given number.
 */
constexpr double absVal(const double num) noexcept { return 0.0 <= num ? num : -num; }
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	a9 01       	movw	r20, r18
    236e:	c5 01       	movw	r24, r10
    2370:	b4 01       	movw	r22, r8
    2372:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__gesf2>
    2376:	88 23       	and	r24, r24
    2378:	24 f4       	brge	.+8      	; 0x2382 <_ZN2ml7lin_reg6LinReg5trainEjd+0x1c4>
    237a:	a5 01       	movw	r20, r10
    237c:	94 01       	movw	r18, r8
    237e:	50 58       	subi	r21, 0x80	; 128
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <_ZN2ml7lin_reg6LinReg5trainEjd+0x1c8>
    2382:	a5 01       	movw	r20, r10
    2384:	94 01       	movw	r18, r8

                // Modify the weight: k = k + e * LR * x.
                myWeight += e * learningRate * x;

                // Add the absolute error value to the total.
                totalErr += absVal(e);
    2386:	6b 85       	ldd	r22, Y+11	; 0x0b
    2388:	7c 85       	ldd	r23, Y+12	; 0x0c
    238a:	8d 85       	ldd	r24, Y+13	; 0x0d
    238c:	9e 85       	ldd	r25, Y+14	; 0x0e
    238e:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__addsf3>
    2392:	6b 87       	std	Y+11, r22	; 0x0b
    2394:	7c 87       	std	Y+12, r23	; 0x0c
    2396:	8d 87       	std	Y+13, r24	; 0x0d
    2398:	9e 87       	std	Y+14, r25	; 0x0e
     * 
     * @return Reference to this iterator.
     */
    Iterator& operator++() noexcept 
    { 
        ++myData; 
    239a:	8f 81       	ldd	r24, Y+7	; 0x07
    239c:	98 85       	ldd	r25, Y+8	; 0x08
    239e:	02 96       	adiw	r24, 0x02	; 2
    23a0:	98 87       	std	Y+8, r25	; 0x08
    23a2:	8f 83       	std	Y+7, r24	; 0x07
    23a4:	79 cf       	rjmp	.-270    	; 0x2298 <_ZN2ml7lin_reg6LinReg5trainEjd+0xda>
            }
        }
        // Calculate the average error of this epoch.
        const auto avgErr{totalErr / myTrainSetCount};
    23a6:	f8 01       	movw	r30, r16
    23a8:	66 81       	ldd	r22, Z+6	; 0x06
    23aa:	77 81       	ldd	r23, Z+7	; 0x07
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__floatunsisf>
    23b4:	9b 01       	movw	r18, r22
    23b6:	ac 01       	movw	r20, r24
    23b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    23bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23be:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c0:	0e 94 65 15 	call	0x2aca	; 0x2aca <__divsf3>
        constexpr auto threshold{1.0 / 1000000};

        // Stop training if the average error is less than one in a million.
        if (threshold > avgErr)
    23c4:	2d eb       	ldi	r18, 0xBD	; 189
    23c6:	37 e3       	ldi	r19, 0x37	; 55
    23c8:	46 e8       	ldi	r20, 0x86	; 134
    23ca:	55 e3       	ldi	r21, 0x35	; 53
    23cc:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__cmpsf2>
    23d0:	88 23       	and	r24, r24
    23d2:	64 f4       	brge	.+24     	; 0x23ec <_ZN2ml7lin_reg6LinReg5trainEjd+0x22e>
        {
            //cout << "Training finished after " << epoch << " epochs!\n";
            serial.printf("Training finished after %d epochs!\n", epoch);
    23d4:	ae 01       	movw	r20, r28
    23d6:	47 5f       	subi	r20, 0xF7	; 247
    23d8:	5f 4f       	sbci	r21, 0xFF	; 255
    23da:	6b e5       	ldi	r22, 0x5B	; 91
    23dc:	72 e0       	ldi	r23, 0x02	; 2
    23de:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <_ZN2ml7lin_reg12_GLOBAL__N_16serialE>
    23e2:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <_ZN2ml7lin_reg12_GLOBAL__N_16serialE+0x1>
    23e6:	0e 94 54 10 	call	0x20a8	; 0x20a8 <_ZNK6driver15SerialInterface6printfIIjEEEbPKcDpRKT_>
    23ea:	06 c0       	rjmp	.+12     	; 0x23f8 <_ZN2ml7lin_reg6LinReg5trainEjd+0x23a>
    
    // Add the indexes of the training sets (0, 1, 2... setCount - 1).
    for (size_t i{}; i < myTrainSetCount; ++i) { trainIndex[i] = i; }

    // Train for `epochCount` epochs or until the model predicts within 1e-6 of the yref values.
    for (size_t epoch{}; epoch < epochCount; ++epoch)
    23ec:	89 85       	ldd	r24, Y+9	; 0x09
    23ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f0:	01 96       	adiw	r24, 0x01	; 1
    23f2:	9a 87       	std	Y+10, r25	; 0x0a
    23f4:	89 87       	std	Y+9, r24	; 0x09
    23f6:	34 cf       	rjmp	.-408    	; 0x2260 <_ZN2ml7lin_reg6LinReg5trainEjd+0xa2>

    // Return false if epochCount == 0, learningRate <= 0.0 or trainingSetCount == 0.
    if ((0U == epochCount) || (0.0 >= learningRate) || (0U == myTrainSetCount)) { return false; }

    // Create a vector holding indexes of the training sets (for randomizing the training order).
    container::Vector<size_t> trainIndex(myTrainSetCount);
    23f8:	ce 01       	movw	r24, r28
    23fa:	01 96       	adiw	r24, 0x01	; 1
    23fc:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <_ZN9container6VectorIjED1Ev>
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	05 c0       	rjmp	.+10     	; 0x240e <_ZN2ml7lin_reg6LinReg5trainEjd+0x250>
bool LinReg::LinReg::train(const size_t epochCount, const double learningRate) noexcept
{
   // gamla -> if ((0U == epochCount) || (0.0 <= learningRate)) { return false; }

    // Return false if epochCount == 0, learningRate <= 0.0 or trainingSetCount == 0.
    if ((0U == epochCount) || (0.0 >= learningRate) || (0U == myTrainSetCount)) { return false; }
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	03 c0       	rjmp	.+6      	; 0x240e <_ZN2ml7lin_reg6LinReg5trainEjd+0x250>
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	01 c0       	rjmp	.+2      	; 0x240e <_ZN2ml7lin_reg6LinReg5trainEjd+0x250>
    240c:	80 e0       	ldi	r24, 0x00	; 0
            return true;
        }        
    }

    return true;
}
    240e:	62 96       	adiw	r28, 0x12	; 18
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	de bf       	out	0x3e, r29	; 62
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	cd bf       	out	0x3d, r28	; 61
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	1f 91       	pop	r17
    2420:	0f 91       	pop	r16
    2422:	ff 90       	pop	r15
    2424:	ef 90       	pop	r14
    2426:	df 90       	pop	r13
    2428:	cf 90       	pop	r12
    242a:	bf 90       	pop	r11
    242c:	af 90       	pop	r10
    242e:	9f 90       	pop	r9
    2430:	8f 90       	pop	r8
    2432:	7f 90       	pop	r7
    2434:	6f 90       	pop	r6
    2436:	5f 90       	pop	r5
    2438:	4f 90       	pop	r4
    243a:	3f 90       	pop	r3
    243c:	2f 90       	pop	r2
    243e:	08 95       	ret

00002440 <_GLOBAL__sub_I__ZN2ml7lin_reg6LinRegC2ERKN9container6VectorIdEES6_>:
} // namespace lin_reg
    2440:	6f ef       	ldi	r22, 0xFF	; 255
    2442:	7f ef       	ldi	r23, 0xFF	; 255
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <_Z41__static_initialization_and_destruction_0ii>
    244c:	08 95       	ret

0000244e <_ZN6target6SystemD1Ev>:

// -----------------------------------------------------------------------------
void System::writeLedStateToEeprom() noexcept
{ 
    myEeprom.write(LedState::address, myPredictTimer.isEnabled());
}
    244e:	cf 93       	push	r28
    2450:	df 93       	push	r29
    2452:	ec 01       	movw	r28, r24
    2454:	88 81       	ld	r24, Y
    2456:	99 81       	ldd	r25, Y+1	; 0x01
    2458:	dc 01       	movw	r26, r24
    245a:	ed 91       	ld	r30, X+
    245c:	fc 91       	ld	r31, X
    245e:	00 84       	ldd	r0, Z+8	; 0x08
    2460:	f1 85       	ldd	r31, Z+9	; 0x09
    2462:	e0 2d       	mov	r30, r0
    2464:	60 e0       	ldi	r22, 0x00	; 0
    2466:	09 95       	icall
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	9b 81       	ldd	r25, Y+3	; 0x03
    246c:	dc 01       	movw	r26, r24
    246e:	ed 91       	ld	r30, X+
    2470:	fc 91       	ld	r31, X
    2472:	04 84       	ldd	r0, Z+12	; 0x0c
    2474:	f5 85       	ldd	r31, Z+13	; 0x0d
    2476:	e0 2d       	mov	r30, r0
    2478:	60 e0       	ldi	r22, 0x00	; 0
    247a:	09 95       	icall
    247c:	8c 81       	ldd	r24, Y+4	; 0x04
    247e:	9d 81       	ldd	r25, Y+5	; 0x05
    2480:	dc 01       	movw	r26, r24
    2482:	ed 91       	ld	r30, X+
    2484:	fc 91       	ld	r31, X
    2486:	00 88       	ldd	r0, Z+16	; 0x10
    2488:	f1 89       	ldd	r31, Z+17	; 0x11
    248a:	e0 2d       	mov	r30, r0
    248c:	09 95       	icall
    248e:	8e 81       	ldd	r24, Y+6	; 0x06
    2490:	9f 81       	ldd	r25, Y+7	; 0x07
    2492:	dc 01       	movw	r26, r24
    2494:	ed 91       	ld	r30, X+
    2496:	fc 91       	ld	r31, X
    2498:	00 88       	ldd	r0, Z+16	; 0x10
    249a:	f1 89       	ldd	r31, Z+17	; 0x11
    249c:	e0 2d       	mov	r30, r0
    249e:	09 95       	icall
    24a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    24a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    24a4:	dc 01       	movw	r26, r24
    24a6:	ed 91       	ld	r30, X+
    24a8:	fc 91       	ld	r31, X
    24aa:	00 84       	ldd	r0, Z+8	; 0x08
    24ac:	f1 85       	ldd	r31, Z+9	; 0x09
    24ae:	e0 2d       	mov	r30, r0
    24b0:	60 e0       	ldi	r22, 0x00	; 0
    24b2:	09 95       	icall
    24b4:	df 91       	pop	r29
    24b6:	cf 91       	pop	r28
    24b8:	08 95       	ret

000024ba <_ZN6target6System28handleDebounceTimerInterruptEv>:
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	ec 01       	movw	r28, r24
    24c0:	8c 81       	ldd	r24, Y+4	; 0x04
    24c2:	9d 81       	ldd	r25, Y+5	; 0x05
    24c4:	dc 01       	movw	r26, r24
    24c6:	ed 91       	ld	r30, X+
    24c8:	fc 91       	ld	r31, X
    24ca:	00 88       	ldd	r0, Z+16	; 0x10
    24cc:	f1 89       	ldd	r31, Z+17	; 0x11
    24ce:	e0 2d       	mov	r30, r0
    24d0:	09 95       	icall
    24d2:	8a 81       	ldd	r24, Y+2	; 0x02
    24d4:	9b 81       	ldd	r25, Y+3	; 0x03
    24d6:	dc 01       	movw	r26, r24
    24d8:	ed 91       	ld	r30, X+
    24da:	fc 91       	ld	r31, X
    24dc:	06 84       	ldd	r0, Z+14	; 0x0e
    24de:	f7 85       	ldd	r31, Z+15	; 0x0f
    24e0:	e0 2d       	mov	r30, r0
    24e2:	61 e0       	ldi	r22, 0x01	; 1
    24e4:	09 95       	icall
    24e6:	df 91       	pop	r29
    24e8:	cf 91       	pop	r28
    24ea:	08 95       	ret

000024ec <_ZN6target6System27handlepredictTimerInterruptEv>:
    24ec:	8f 92       	push	r8
    24ee:	9f 92       	push	r9
    24f0:	af 92       	push	r10
    24f2:	bf 92       	push	r11
    24f4:	cf 92       	push	r12
    24f6:	df 92       	push	r13
    24f8:	ef 92       	push	r14
    24fa:	ff 92       	push	r15
    24fc:	0f 93       	push	r16
    24fe:	1f 93       	push	r17
    2500:	cf 93       	push	r28
    2502:	df 93       	push	r29
    2504:	00 d0       	rcall	.+0      	; 0x2506 <_ZN6target6System27handlepredictTimerInterruptEv+0x1a>
    2506:	00 d0       	rcall	.+0      	; 0x2508 <_ZN6target6System27handlepredictTimerInterruptEv+0x1c>
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
    250c:	8c 01       	movw	r16, r24
    250e:	dc 01       	movw	r26, r24
    2510:	1e 96       	adiw	r26, 0x0e	; 14
    2512:	8d 91       	ld	r24, X+
    2514:	9c 91       	ld	r25, X
    2516:	1f 97       	sbiw	r26, 0x0f	; 15
    2518:	dc 01       	movw	r26, r24
    251a:	ed 91       	ld	r30, X+
    251c:	fc 91       	ld	r31, X
    251e:	06 84       	ldd	r0, Z+14	; 0x0e
    2520:	f7 85       	ldd	r31, Z+15	; 0x0f
    2522:	e0 2d       	mov	r30, r0
    2524:	62 e0       	ldi	r22, 0x02	; 2
    2526:	09 95       	icall
    2528:	4b 01       	movw	r8, r22
    252a:	5c 01       	movw	r10, r24
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	4a e7       	ldi	r20, 0x7A	; 122
    2532:	54 e4       	ldi	r21, 0x44	; 68
    2534:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    2538:	6b 01       	movw	r12, r22
    253a:	7c 01       	movw	r14, r24
    253c:	f8 01       	movw	r30, r16
    253e:	80 89       	ldd	r24, Z+16	; 0x10
    2540:	91 89       	ldd	r25, Z+17	; 0x11
    2542:	dc 01       	movw	r26, r24
    2544:	ed 91       	ld	r30, X+
    2546:	fc 91       	ld	r31, X
    2548:	04 80       	ldd	r0, Z+4	; 0x04
    254a:	f5 81       	ldd	r31, Z+5	; 0x05
    254c:	e0 2d       	mov	r30, r0
    254e:	b5 01       	movw	r22, r10
    2550:	a4 01       	movw	r20, r8
    2552:	09 95       	icall
    2554:	4b 01       	movw	r8, r22
    2556:	5c 01       	movw	r10, r24
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	a9 01       	movw	r20, r18
    255e:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__gesf2>
    2562:	88 23       	and	r24, r24
    2564:	5c f0       	brlt	.+22     	; 0x257c <_ZN6target6System27handlepredictTimerInterruptEv+0x90>
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e0       	ldi	r20, 0x00	; 0
    256c:	5f e3       	ldi	r21, 0x3F	; 63
    256e:	c5 01       	movw	r24, r10
    2570:	b4 01       	movw	r22, r8
    2572:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__addsf3>
    2576:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__fixsfsi>
    257a:	0a c0       	rjmp	.+20     	; 0x2590 <_ZN6target6System27handlepredictTimerInterruptEv+0xa4>
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	40 e0       	ldi	r20, 0x00	; 0
    2582:	5f e3       	ldi	r21, 0x3F	; 63
    2584:	c5 01       	movw	r24, r10
    2586:	b4 01       	movw	r22, r8
    2588:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__subsf3>
    258c:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__fixsfsi>
    2590:	7c 83       	std	Y+4, r23	; 0x04
    2592:	6b 83       	std	Y+3, r22	; 0x03
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	a9 01       	movw	r20, r18
    259a:	c7 01       	movw	r24, r14
    259c:	b6 01       	movw	r22, r12
    259e:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__gesf2>
    25a2:	88 23       	and	r24, r24
    25a4:	5c f0       	brlt	.+22     	; 0x25bc <_ZN6target6System27handlepredictTimerInterruptEv+0xd0>
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	5f e3       	ldi	r21, 0x3F	; 63
    25ae:	c7 01       	movw	r24, r14
    25b0:	b6 01       	movw	r22, r12
    25b2:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__addsf3>
    25b6:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__fixsfsi>
    25ba:	0a c0       	rjmp	.+20     	; 0x25d0 <_ZN6target6System27handlepredictTimerInterruptEv+0xe4>
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	40 e0       	ldi	r20, 0x00	; 0
    25c2:	5f e3       	ldi	r21, 0x3F	; 63
    25c4:	c7 01       	movw	r24, r14
    25c6:	b6 01       	movw	r22, r12
    25c8:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__subsf3>
    25cc:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__fixsfsi>
    25d0:	7a 83       	std	Y+2, r23	; 0x02
    25d2:	69 83       	std	Y+1, r22	; 0x01
    25d4:	9e 01       	movw	r18, r28
    25d6:	2d 5f       	subi	r18, 0xFD	; 253
    25d8:	3f 4f       	sbci	r19, 0xFF	; 255
    25da:	ae 01       	movw	r20, r28
    25dc:	4f 5f       	subi	r20, 0xFF	; 255
    25de:	5f 4f       	sbci	r21, 0xFF	; 255
    25e0:	69 e8       	ldi	r22, 0x89	; 137
    25e2:	72 e0       	ldi	r23, 0x02	; 2
    25e4:	f8 01       	movw	r30, r16
    25e6:	80 85       	ldd	r24, Z+8	; 0x08
    25e8:	91 85       	ldd	r25, Z+9	; 0x09
    25ea:	0e 94 c6 09 	call	0x138c	; 0x138c <_ZNK6driver15SerialInterface6printfIIiiEEEbPKcDpRKT_>
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	df 91       	pop	r29
    25f8:	cf 91       	pop	r28
    25fa:	1f 91       	pop	r17
    25fc:	0f 91       	pop	r16
    25fe:	ff 90       	pop	r15
    2600:	ef 90       	pop	r14
    2602:	df 90       	pop	r13
    2604:	cf 90       	pop	r12
    2606:	bf 90       	pop	r11
    2608:	af 90       	pop	r10
    260a:	9f 90       	pop	r9
    260c:	8f 90       	pop	r8
    260e:	08 95       	ret

00002610 <_ZN6target6System3runEv>:
    2610:	ec 01       	movw	r28, r24
    2612:	62 ec       	ldi	r22, 0xC2	; 194
    2614:	72 e0       	ldi	r23, 0x02	; 2
    2616:	88 85       	ldd	r24, Y+8	; 0x08
    2618:	99 85       	ldd	r25, Y+9	; 0x09
    261a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
    261e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2620:	9b 85       	ldd	r25, Y+11	; 0x0b
    2622:	dc 01       	movw	r26, r24
    2624:	ed 91       	ld	r30, X+
    2626:	fc 91       	ld	r31, X
    2628:	04 84       	ldd	r0, Z+12	; 0x0c
    262a:	f5 85       	ldd	r31, Z+13	; 0x0d
    262c:	e0 2d       	mov	r30, r0
    262e:	09 95       	icall
    2630:	f6 cf       	rjmp	.-20     	; 0x261e <_ZN6target6System3runEv+0xe>

00002632 <_ZN6target6System19handleButtonPressedEv>:
    2632:	8f 92       	push	r8
    2634:	9f 92       	push	r9
    2636:	af 92       	push	r10
    2638:	bf 92       	push	r11
    263a:	cf 92       	push	r12
    263c:	df 92       	push	r13
    263e:	ef 92       	push	r14
    2640:	ff 92       	push	r15
    2642:	0f 93       	push	r16
    2644:	1f 93       	push	r17
    2646:	cf 93       	push	r28
    2648:	df 93       	push	r29
    264a:	00 d0       	rcall	.+0      	; 0x264c <_ZN6target6System19handleButtonPressedEv+0x1a>
    264c:	00 d0       	rcall	.+0      	; 0x264e <_ZN6target6System19handleButtonPressedEv+0x1c>
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	8c 01       	movw	r16, r24
    2654:	67 ed       	ldi	r22, 0xD7	; 215
    2656:	72 e0       	ldi	r23, 0x02	; 2
    2658:	dc 01       	movw	r26, r24
    265a:	18 96       	adiw	r26, 0x08	; 8
    265c:	8d 91       	ld	r24, X+
    265e:	9c 91       	ld	r25, X
    2660:	19 97       	sbiw	r26, 0x09	; 9
    2662:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
    2666:	f8 01       	movw	r30, r16
    2668:	86 85       	ldd	r24, Z+14	; 0x0e
    266a:	97 85       	ldd	r25, Z+15	; 0x0f
    266c:	dc 01       	movw	r26, r24
    266e:	ed 91       	ld	r30, X+
    2670:	fc 91       	ld	r31, X
    2672:	06 84       	ldd	r0, Z+14	; 0x0e
    2674:	f7 85       	ldd	r31, Z+15	; 0x0f
    2676:	e0 2d       	mov	r30, r0
    2678:	62 e0       	ldi	r22, 0x02	; 2
    267a:	09 95       	icall
    267c:	4b 01       	movw	r8, r22
    267e:	5c 01       	movw	r10, r24
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	4a e7       	ldi	r20, 0x7A	; 122
    2686:	54 e4       	ldi	r21, 0x44	; 68
    2688:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    268c:	6b 01       	movw	r12, r22
    268e:	7c 01       	movw	r14, r24
    2690:	f8 01       	movw	r30, r16
    2692:	80 89       	ldd	r24, Z+16	; 0x10
    2694:	91 89       	ldd	r25, Z+17	; 0x11
    2696:	dc 01       	movw	r26, r24
    2698:	ed 91       	ld	r30, X+
    269a:	fc 91       	ld	r31, X
    269c:	04 80       	ldd	r0, Z+4	; 0x04
    269e:	f5 81       	ldd	r31, Z+5	; 0x05
    26a0:	e0 2d       	mov	r30, r0
    26a2:	b5 01       	movw	r22, r10
    26a4:	a4 01       	movw	r20, r8
    26a6:	09 95       	icall
    26a8:	4b 01       	movw	r8, r22
    26aa:	5c 01       	movw	r10, r24
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	a9 01       	movw	r20, r18
    26b2:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__gesf2>
    26b6:	88 23       	and	r24, r24
    26b8:	5c f0       	brlt	.+22     	; 0x26d0 <_ZN6target6System19handleButtonPressedEv+0x9e>
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	40 e0       	ldi	r20, 0x00	; 0
    26c0:	5f e3       	ldi	r21, 0x3F	; 63
    26c2:	c5 01       	movw	r24, r10
    26c4:	b4 01       	movw	r22, r8
    26c6:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__addsf3>
    26ca:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__fixsfsi>
    26ce:	0a c0       	rjmp	.+20     	; 0x26e4 <_ZN6target6System19handleButtonPressedEv+0xb2>
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	40 e0       	ldi	r20, 0x00	; 0
    26d6:	5f e3       	ldi	r21, 0x3F	; 63
    26d8:	c5 01       	movw	r24, r10
    26da:	b4 01       	movw	r22, r8
    26dc:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__subsf3>
    26e0:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__fixsfsi>
    26e4:	7c 83       	std	Y+4, r23	; 0x04
    26e6:	6b 83       	std	Y+3, r22	; 0x03
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	a9 01       	movw	r20, r18
    26ee:	c7 01       	movw	r24, r14
    26f0:	b6 01       	movw	r22, r12
    26f2:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__gesf2>
    26f6:	88 23       	and	r24, r24
    26f8:	5c f0       	brlt	.+22     	; 0x2710 <_ZN6target6System19handleButtonPressedEv+0xde>
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	40 e0       	ldi	r20, 0x00	; 0
    2700:	5f e3       	ldi	r21, 0x3F	; 63
    2702:	c7 01       	movw	r24, r14
    2704:	b6 01       	movw	r22, r12
    2706:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__addsf3>
    270a:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__fixsfsi>
    270e:	0a c0       	rjmp	.+20     	; 0x2724 <_ZN6target6System19handleButtonPressedEv+0xf2>
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	5f e3       	ldi	r21, 0x3F	; 63
    2718:	c7 01       	movw	r24, r14
    271a:	b6 01       	movw	r22, r12
    271c:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__subsf3>
    2720:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__fixsfsi>
    2724:	7a 83       	std	Y+2, r23	; 0x02
    2726:	69 83       	std	Y+1, r22	; 0x01
    2728:	9e 01       	movw	r18, r28
    272a:	2d 5f       	subi	r18, 0xFD	; 253
    272c:	3f 4f       	sbci	r19, 0xFF	; 255
    272e:	ae 01       	movw	r20, r28
    2730:	4f 5f       	subi	r20, 0xFF	; 255
    2732:	5f 4f       	sbci	r21, 0xFF	; 255
    2734:	69 e8       	ldi	r22, 0x89	; 137
    2736:	72 e0       	ldi	r23, 0x02	; 2
    2738:	f8 01       	movw	r30, r16
    273a:	80 85       	ldd	r24, Z+8	; 0x08
    273c:	91 85       	ldd	r25, Z+9	; 0x09
    273e:	0e 94 c6 09 	call	0x138c	; 0x138c <_ZNK6driver15SerialInterface6printfIIiiEEEbPKcDpRKT_>
    2742:	d8 01       	movw	r26, r16
    2744:	16 96       	adiw	r26, 0x06	; 6
    2746:	8d 91       	ld	r24, X+
    2748:	9c 91       	ld	r25, X
    274a:	17 97       	sbiw	r26, 0x07	; 7
    274c:	dc 01       	movw	r26, r24
    274e:	ed 91       	ld	r30, X+
    2750:	fc 91       	ld	r31, X
    2752:	04 88       	ldd	r0, Z+20	; 0x14
    2754:	f5 89       	ldd	r31, Z+21	; 0x15
    2756:	e0 2d       	mov	r30, r0
    2758:	09 95       	icall
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	df 91       	pop	r29
    2764:	cf 91       	pop	r28
    2766:	1f 91       	pop	r17
    2768:	0f 91       	pop	r16
    276a:	ff 90       	pop	r15
    276c:	ef 90       	pop	r14
    276e:	df 90       	pop	r13
    2770:	cf 90       	pop	r12
    2772:	bf 90       	pop	r11
    2774:	af 90       	pop	r10
    2776:	9f 90       	pop	r9
    2778:	8f 90       	pop	r8
    277a:	08 95       	ret

0000277c <_ZN6target6System21handleButtonInterruptEv>:
    277c:	cf 93       	push	r28
    277e:	df 93       	push	r29
    2780:	ec 01       	movw	r28, r24
    2782:	8a 81       	ldd	r24, Y+2	; 0x02
    2784:	9b 81       	ldd	r25, Y+3	; 0x03
    2786:	dc 01       	movw	r26, r24
    2788:	ed 91       	ld	r30, X+
    278a:	fc 91       	ld	r31, X
    278c:	06 84       	ldd	r0, Z+14	; 0x0e
    278e:	f7 85       	ldd	r31, Z+15	; 0x0f
    2790:	e0 2d       	mov	r30, r0
    2792:	60 e0       	ldi	r22, 0x00	; 0
    2794:	09 95       	icall
    2796:	8c 81       	ldd	r24, Y+4	; 0x04
    2798:	9d 81       	ldd	r25, Y+5	; 0x05
    279a:	dc 01       	movw	r26, r24
    279c:	ed 91       	ld	r30, X+
    279e:	fc 91       	ld	r31, X
    27a0:	06 84       	ldd	r0, Z+14	; 0x0e
    27a2:	f7 85       	ldd	r31, Z+15	; 0x0f
    27a4:	e0 2d       	mov	r30, r0
    27a6:	09 95       	icall
    27a8:	8a 81       	ldd	r24, Y+2	; 0x02
    27aa:	9b 81       	ldd	r25, Y+3	; 0x03
    27ac:	dc 01       	movw	r26, r24
    27ae:	ed 91       	ld	r30, X+
    27b0:	fc 91       	ld	r31, X
    27b2:	06 80       	ldd	r0, Z+6	; 0x06
    27b4:	f7 81       	ldd	r31, Z+7	; 0x07
    27b6:	e0 2d       	mov	r30, r0
    27b8:	09 95       	icall
    27ba:	88 23       	and	r24, r24
    27bc:	19 f0       	breq	.+6      	; 0x27c4 <_ZN6target6System21handleButtonInterruptEv+0x48>
    27be:	ce 01       	movw	r24, r28
    27c0:	0e 94 19 13 	call	0x2632	; 0x2632 <_ZN6target6System19handleButtonPressedEv>
    27c4:	df 91       	pop	r29
    27c6:	cf 91       	pop	r28
    27c8:	08 95       	ret

000027ca <_ZNK6driver15EepromInterface4readIhEEbjRT_>:
    return true;
}

// -----------------------------------------------------------------------------
template <typename T>
bool EepromInterface::read(const uint16_t address, T& data) const noexcept
    27ca:	af 92       	push	r10
    27cc:	bf 92       	push	r11
    27ce:	df 92       	push	r13
    27d0:	ef 92       	push	r14
    27d2:	ff 92       	push	r15
    27d4:	0f 93       	push	r16
    27d6:	1f 93       	push	r17
    27d8:	cf 93       	push	r28
    27da:	df 93       	push	r29
    27dc:	ec 01       	movw	r28, r24
    27de:	7b 01       	movw	r14, r22
    27e0:	8a 01       	movw	r16, r20
    // Generate a compiler error if the given type isn't of unsigned type.
    static_assert(type_traits::is_unsigned<T>::value, 
        "EEPROM read only supported for unsigned data types!");

    // Return false is the given address in invalid or if the EEPROM stream isn't enabled.
    if (!isAddressValid(address, sizeof(T)) || !isEnabled()) { return false; }
    27e2:	e8 81       	ld	r30, Y
    27e4:	f9 81       	ldd	r31, Y+1	; 0x01
    27e6:	02 84       	ldd	r0, Z+10	; 0x0a
    27e8:	f3 85       	ldd	r31, Z+11	; 0x0b
    27ea:	e0 2d       	mov	r30, r0
    27ec:	41 e0       	ldi	r20, 0x01	; 1
    27ee:	09 95       	icall
    27f0:	d8 2e       	mov	r13, r24
    27f2:	88 23       	and	r24, r24
    27f4:	59 f0       	breq	.+22     	; 0x280c <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x42>
    27f6:	e8 81       	ld	r30, Y
    27f8:	f9 81       	ldd	r31, Y+1	; 0x01
    27fa:	06 80       	ldd	r0, Z+6	; 0x06
    27fc:	f7 81       	ldd	r31, Z+7	; 0x07
    27fe:	e0 2d       	mov	r30, r0
    2800:	ce 01       	movw	r24, r28
    2802:	09 95       	icall
    2804:	88 23       	and	r24, r24
    2806:	21 f0       	breq	.+8      	; 0x2810 <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x46>
    2808:	d1 2c       	mov	r13, r1
    280a:	02 c0       	rjmp	.+4      	; 0x2810 <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x46>
    280c:	dd 24       	eor	r13, r13
    280e:	d3 94       	inc	r13
    2810:	d1 10       	cpse	r13, r1
    2812:	22 c0       	rjmp	.+68     	; 0x2858 <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x8e>
    data = {};
    2814:	f8 01       	movw	r30, r16
    2816:	10 82       	st	Z, r1

    // Read each byte from EEPROM, one at a type.
    for (uint8_t i{}; i < sizeof(T); ++i) 
    2818:	d1 10       	cpse	r13, r1
    281a:	20 c0       	rjmp	.+64     	; 0x285c <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x92>
    { 
        data |= static_cast<T>(readByte(address + i) << (8U * i));
    281c:	ad 2c       	mov	r10, r13
    281e:	b1 2c       	mov	r11, r1
    2820:	b7 01       	movw	r22, r14
    2822:	6a 0d       	add	r22, r10
    2824:	7b 1d       	adc	r23, r11
    2826:	e8 81       	ld	r30, Y
    2828:	f9 81       	ldd	r31, Y+1	; 0x01
    282a:	06 84       	ldd	r0, Z+14	; 0x0e
    282c:	f7 85       	ldd	r31, Z+15	; 0x0f
    282e:	e0 2d       	mov	r30, r0
    2830:	ce 01       	movw	r24, r28
    2832:	09 95       	icall
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	aa 0c       	add	r10, r10
    2838:	bb 1c       	adc	r11, r11
    283a:	aa 0c       	add	r10, r10
    283c:	bb 1c       	adc	r11, r11
    283e:	aa 0c       	add	r10, r10
    2840:	bb 1c       	adc	r11, r11
    2842:	02 c0       	rjmp	.+4      	; 0x2848 <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x7e>
    2844:	88 0f       	add	r24, r24
    2846:	99 1f       	adc	r25, r25
    2848:	aa 94       	dec	r10
    284a:	e2 f7       	brpl	.-8      	; 0x2844 <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x7a>
    284c:	f8 01       	movw	r30, r16
    284e:	90 81       	ld	r25, Z
    2850:	89 2b       	or	r24, r25
    2852:	80 83       	st	Z, r24
    // Return false is the given address in invalid or if the EEPROM stream isn't enabled.
    if (!isAddressValid(address, sizeof(T)) || !isEnabled()) { return false; }
    data = {};

    // Read each byte from EEPROM, one at a type.
    for (uint8_t i{}; i < sizeof(T); ++i) 
    2854:	d3 94       	inc	r13
    2856:	e0 cf       	rjmp	.-64     	; 0x2818 <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x4e>
    // Generate a compiler error if the given type isn't of unsigned type.
    static_assert(type_traits::is_unsigned<T>::value, 
        "EEPROM read only supported for unsigned data types!");

    // Return false is the given address in invalid or if the EEPROM stream isn't enabled.
    if (!isAddressValid(address, sizeof(T)) || !isEnabled()) { return false; }
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	01 c0       	rjmp	.+2      	; 0x285e <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x94>
    for (uint8_t i{}; i < sizeof(T); ++i) 
    { 
        data |= static_cast<T>(readByte(address + i) << (8U * i));
    }
    // Return true to indicate success.
    return true;
    285c:	81 e0       	ldi	r24, 0x01	; 1
}
    285e:	df 91       	pop	r29
    2860:	cf 91       	pop	r28
    2862:	1f 91       	pop	r17
    2864:	0f 91       	pop	r16
    2866:	ff 90       	pop	r15
    2868:	ef 90       	pop	r14
    286a:	df 90       	pop	r13
    286c:	bf 90       	pop	r11
    286e:	af 90       	pop	r10
    2870:	08 95       	ret

00002872 <_ZNK6target6System22readLedStateFromEepromEv>:

// -----------------------------------------------------------------------------
bool System::readLedStateFromEeprom() const noexcept
{
    2872:	cf 93       	push	r28
    2874:	df 93       	push	r29
    2876:	1f 92       	push	r1
    2878:	cd b7       	in	r28, 0x3d	; 61
    287a:	de b7       	in	r29, 0x3e	; 62
    uint8_t state{};
    287c:	19 82       	std	Y+1, r1	; 0x01
    return myEeprom.read(LedState::address, state) ? LedState::enabled == state : false;
    287e:	ae 01       	movw	r20, r28
    2880:	4f 5f       	subi	r20, 0xFF	; 255
    2882:	5f 4f       	sbci	r21, 0xFF	; 255
    2884:	60 e0       	ldi	r22, 0x00	; 0
    2886:	70 e0       	ldi	r23, 0x00	; 0
    2888:	fc 01       	movw	r30, r24
    288a:	84 85       	ldd	r24, Z+12	; 0x0c
    288c:	95 85       	ldd	r25, Z+13	; 0x0d
    288e:	0e 94 e5 13 	call	0x27ca	; 0x27ca <_ZNK6driver15EepromInterface4readIhEEbjRT_>
    2892:	88 23       	and	r24, r24
    2894:	29 f0       	breq	.+10     	; 0x28a0 <_ZNK6target6System22readLedStateFromEepromEv+0x2e>
    2896:	99 81       	ldd	r25, Y+1	; 0x01
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	91 30       	cpi	r25, 0x01	; 1
    289c:	09 f0       	breq	.+2      	; 0x28a0 <_ZNK6target6System22readLedStateFromEepromEv+0x2e>
    289e:	80 e0       	ldi	r24, 0x00	; 0
}
    28a0:	0f 90       	pop	r0
    28a2:	df 91       	pop	r29
    28a4:	cf 91       	pop	r28
    28a6:	08 95       	ret

000028a8 <_ZN6target6System21checkLedStateInEepromEv>:
    } */
}

// -----------------------------------------------------------------------------
void System::checkLedStateInEeprom() noexcept
{
    28a8:	cf 93       	push	r28
    28aa:	df 93       	push	r29
    28ac:	ec 01       	movw	r28, r24
    if (readLedStateFromEeprom())
    28ae:	0e 94 39 14 	call	0x2872	; 0x2872 <_ZNK6target6System22readLedStateFromEepromEv>
    28b2:	88 23       	and	r24, r24
    28b4:	79 f0       	breq	.+30     	; 0x28d4 <_ZN6target6System21checkLedStateInEepromEv+0x2c>
    {
        myPredictTimer.start();
    28b6:	8e 81       	ldd	r24, Y+6	; 0x06
    28b8:	9f 81       	ldd	r25, Y+7	; 0x07
    28ba:	dc 01       	movw	r26, r24
    28bc:	ed 91       	ld	r30, X+
    28be:	fc 91       	ld	r31, X
    28c0:	06 84       	ldd	r0, Z+14	; 0x0e
    28c2:	f7 85       	ldd	r31, Z+15	; 0x0f
    28c4:	e0 2d       	mov	r30, r0
    28c6:	09 95       	icall
        mySerial.printf("Toggle timer enabled!\n");
    28c8:	68 ee       	ldi	r22, 0xE8	; 232
    28ca:	72 e0       	ldi	r23, 0x02	; 2
    28cc:	88 85       	ldd	r24, Y+8	; 0x08
    28ce:	99 85       	ldd	r25, Y+9	; 0x09
    28d0:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
    }
}
    28d4:	df 91       	pop	r29
    28d6:	cf 91       	pop	r28
    28d8:	08 95       	ret

000028da <_ZN6target6SystemC1ERN6driver13GpioInterfaceES3_RNS1_14TimerInterfaceES5_RNS1_15SerialInterfaceERNS1_17WatchdogInterfaceERNS1_15EepromInterfaceERNS1_12AdcInterfaceERN2ml7lin_reg9InterfaceE>:
    /** Enabled state value in EEPROM. */
    static constexpr uint8_t enabled{1U};
};

// -----------------------------------------------------------------------------
System::System(driver::GpioInterface& led, driver::GpioInterface& button,
    28da:	6f 92       	push	r6
    28dc:	7f 92       	push	r7
    28de:	8f 92       	push	r8
    28e0:	9f 92       	push	r9
    28e2:	af 92       	push	r10
    28e4:	bf 92       	push	r11
    28e6:	cf 92       	push	r12
    28e8:	df 92       	push	r13
    28ea:	ef 92       	push	r14
    28ec:	ff 92       	push	r15
    28ee:	0f 93       	push	r16
    28f0:	1f 93       	push	r17
    28f2:	cf 93       	push	r28
    28f4:	df 93       	push	r29
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    28fa:	3c 01       	movw	r6, r24
    28fc:	ca 01       	movw	r24, r20
    , myPredictTimer{predictTimer}
    , mySerial{serial}
    , myWatchdog{watchdog}
    , myEeprom{eeprom}
    , myAdc{adc}
    , myPredict{predict}
    28fe:	d3 01       	movw	r26, r6
    2900:	11 96       	adiw	r26, 0x01	; 1
    2902:	7c 93       	st	X, r23
    2904:	6e 93       	st	-X, r22
    2906:	13 96       	adiw	r26, 0x03	; 3
    2908:	5c 93       	st	X, r21
    290a:	4e 93       	st	-X, r20
    290c:	12 97       	sbiw	r26, 0x02	; 2
    290e:	15 96       	adiw	r26, 0x05	; 5
    2910:	3c 93       	st	X, r19
    2912:	2e 93       	st	-X, r18
    2914:	14 97       	sbiw	r26, 0x04	; 4
    2916:	17 96       	adiw	r26, 0x07	; 7
    2918:	1c 93       	st	X, r17
    291a:	0e 93       	st	-X, r16
    291c:	16 97       	sbiw	r26, 0x06	; 6
    291e:	19 96       	adiw	r26, 0x09	; 9
    2920:	fc 92       	st	X, r15
    2922:	ee 92       	st	-X, r14
    2924:	18 97       	sbiw	r26, 0x08	; 8
    2926:	1b 96       	adiw	r26, 0x0b	; 11
    2928:	dc 92       	st	X, r13
    292a:	ce 92       	st	-X, r12
    292c:	1a 97       	sbiw	r26, 0x0a	; 10
    292e:	1d 96       	adiw	r26, 0x0d	; 13
    2930:	bc 92       	st	X, r11
    2932:	ae 92       	st	-X, r10
    2934:	1c 97       	sbiw	r26, 0x0c	; 12
    2936:	1f 96       	adiw	r26, 0x0f	; 15
    2938:	9c 92       	st	X, r9
    293a:	8e 92       	st	-X, r8
    293c:	1e 97       	sbiw	r26, 0x0e	; 14
    293e:	29 89       	ldd	r18, Y+17	; 0x11
    2940:	3a 89       	ldd	r19, Y+18	; 0x12
    2942:	51 96       	adiw	r26, 0x11	; 17
    2944:	3c 93       	st	X, r19
    2946:	2e 93       	st	-X, r18
    2948:	50 97       	sbiw	r26, 0x10	; 16
{
    myButton.enableInterrupt(true);
    294a:	da 01       	movw	r26, r20
    294c:	ed 91       	ld	r30, X+
    294e:	fc 91       	ld	r31, X
    2950:	04 84       	ldd	r0, Z+12	; 0x0c
    2952:	f5 85       	ldd	r31, Z+13	; 0x0d
    2954:	e0 2d       	mov	r30, r0
    2956:	61 e0       	ldi	r22, 0x01	; 1
    2958:	09 95       	icall
    mySerial.setEnabled(true);
    295a:	f3 01       	movw	r30, r6
    295c:	80 85       	ldd	r24, Z+8	; 0x08
    295e:	91 85       	ldd	r25, Z+9	; 0x09
    2960:	dc 01       	movw	r26, r24
    2962:	ed 91       	ld	r30, X+
    2964:	fc 91       	ld	r31, X
    2966:	02 84       	ldd	r0, Z+10	; 0x0a
    2968:	f3 85       	ldd	r31, Z+11	; 0x0b
    296a:	e0 2d       	mov	r30, r0
    296c:	61 e0       	ldi	r22, 0x01	; 1
    296e:	09 95       	icall
    myWatchdog.setEnabled(true);
    2970:	f3 01       	movw	r30, r6
    2972:	82 85       	ldd	r24, Z+10	; 0x0a
    2974:	93 85       	ldd	r25, Z+11	; 0x0b
    2976:	dc 01       	movw	r26, r24
    2978:	ed 91       	ld	r30, X+
    297a:	fc 91       	ld	r31, X
    297c:	00 84       	ldd	r0, Z+8	; 0x08
    297e:	f1 85       	ldd	r31, Z+9	; 0x09
    2980:	e0 2d       	mov	r30, r0
    2982:	61 e0       	ldi	r22, 0x01	; 1
    2984:	09 95       	icall
    myEeprom.setEnabled(true);
    2986:	f3 01       	movw	r30, r6
    2988:	84 85       	ldd	r24, Z+12	; 0x0c
    298a:	95 85       	ldd	r25, Z+13	; 0x0d
    298c:	dc 01       	movw	r26, r24
    298e:	ed 91       	ld	r30, X+
    2990:	fc 91       	ld	r31, X
    2992:	00 84       	ldd	r0, Z+8	; 0x08
    2994:	f1 85       	ldd	r31, Z+9	; 0x09
    2996:	e0 2d       	mov	r30, r0
    2998:	61 e0       	ldi	r22, 0x01	; 1
    299a:	09 95       	icall
    checkLedStateInEeprom();
    299c:	c3 01       	movw	r24, r6
    299e:	0e 94 54 14 	call	0x28a8	; 0x28a8 <_ZN6target6System21checkLedStateInEepromEv>
}
    29a2:	df 91       	pop	r29
    29a4:	cf 91       	pop	r28
    29a6:	1f 91       	pop	r17
    29a8:	0f 91       	pop	r16
    29aa:	ff 90       	pop	r15
    29ac:	ef 90       	pop	r14
    29ae:	df 90       	pop	r13
    29b0:	cf 90       	pop	r12
    29b2:	bf 90       	pop	r11
    29b4:	af 90       	pop	r10
    29b6:	9f 90       	pop	r9
    29b8:	8f 90       	pop	r8
    29ba:	7f 90       	pop	r7
    29bc:	6f 90       	pop	r6
    29be:	08 95       	ret

000029c0 <_ZN5utils21globalInterruptEnableEv>:
        _delay_us(1U);
    }
}

// -----------------------------------------------------------------------------
void globalInterruptEnable() noexcept { asm("SEI"); }
    29c0:	78 94       	sei
    29c2:	08 95       	ret

000029c4 <_ZN5utils22globalInterruptDisableEv>:

// -----------------------------------------------------------------------------
void globalInterruptDisable() noexcept { asm("CLI"); }
    29c4:	f8 94       	cli
    29c6:	08 95       	ret

000029c8 <_ZdlPvj>:

/**
 * @note Definitions required to satisfy the linker when using C++ interfaces and static local 
 *       variables in embedded projects. 
 */
void operator delete(void*, unsigned int) noexcept {}
    29c8:	08 95       	ret

000029ca <__cxa_pure_virtual>:
extern "C" void __cxa_pure_virtual() {}
    29ca:	08 95       	ret

000029cc <__cxa_guard_acquire>:
extern "C" int __cxa_guard_acquire (volatile void *g) { return !*(char *)g; }
    29cc:	fc 01       	movw	r30, r24
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	20 81       	ld	r18, Z
    29d4:	22 23       	and	r18, r18
    29d6:	11 f0       	breq	.+4      	; 0x29dc <__cxa_guard_acquire+0x10>
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	08 95       	ret

000029de <__cxa_guard_release>:
extern "C" void __cxa_guard_release (volatile void *g) { *(char *)g = 1; }
    29de:	21 e0       	ldi	r18, 0x01	; 1
    29e0:	fc 01       	movw	r30, r24
    29e2:	20 83       	st	Z, r18
    29e4:	08 95       	ret

000029e6 <__subsf3>:
    29e6:	50 58       	subi	r21, 0x80	; 128

000029e8 <__addsf3>:
    29e8:	bb 27       	eor	r27, r27
    29ea:	aa 27       	eor	r26, r26
    29ec:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <__addsf3x>
    29f0:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__fp_round>
    29f4:	0e 94 77 16 	call	0x2cee	; 0x2cee <__fp_pscA>
    29f8:	38 f0       	brcs	.+14     	; 0x2a08 <__addsf3+0x20>
    29fa:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <__fp_pscB>
    29fe:	20 f0       	brcs	.+8      	; 0x2a08 <__addsf3+0x20>
    2a00:	39 f4       	brne	.+14     	; 0x2a10 <__addsf3+0x28>
    2a02:	9f 3f       	cpi	r25, 0xFF	; 255
    2a04:	19 f4       	brne	.+6      	; 0x2a0c <__addsf3+0x24>
    2a06:	26 f4       	brtc	.+8      	; 0x2a10 <__addsf3+0x28>
    2a08:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <__fp_nan>
    2a0c:	0e f4       	brtc	.+2      	; 0x2a10 <__addsf3+0x28>
    2a0e:	e0 95       	com	r30
    2a10:	e7 fb       	bst	r30, 7
    2a12:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__fp_inf>

00002a16 <__addsf3x>:
    2a16:	e9 2f       	mov	r30, r25
    2a18:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <__fp_split3>
    2a1c:	58 f3       	brcs	.-42     	; 0x29f4 <__addsf3+0xc>
    2a1e:	ba 17       	cp	r27, r26
    2a20:	62 07       	cpc	r22, r18
    2a22:	73 07       	cpc	r23, r19
    2a24:	84 07       	cpc	r24, r20
    2a26:	95 07       	cpc	r25, r21
    2a28:	20 f0       	brcs	.+8      	; 0x2a32 <__addsf3x+0x1c>
    2a2a:	79 f4       	brne	.+30     	; 0x2a4a <__addsf3x+0x34>
    2a2c:	a6 f5       	brtc	.+104    	; 0x2a96 <__addsf3x+0x80>
    2a2e:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__fp_zero>
    2a32:	0e f4       	brtc	.+2      	; 0x2a36 <__addsf3x+0x20>
    2a34:	e0 95       	com	r30
    2a36:	0b 2e       	mov	r0, r27
    2a38:	ba 2f       	mov	r27, r26
    2a3a:	a0 2d       	mov	r26, r0
    2a3c:	0b 01       	movw	r0, r22
    2a3e:	b9 01       	movw	r22, r18
    2a40:	90 01       	movw	r18, r0
    2a42:	0c 01       	movw	r0, r24
    2a44:	ca 01       	movw	r24, r20
    2a46:	a0 01       	movw	r20, r0
    2a48:	11 24       	eor	r1, r1
    2a4a:	ff 27       	eor	r31, r31
    2a4c:	59 1b       	sub	r21, r25
    2a4e:	99 f0       	breq	.+38     	; 0x2a76 <__addsf3x+0x60>
    2a50:	59 3f       	cpi	r21, 0xF9	; 249
    2a52:	50 f4       	brcc	.+20     	; 0x2a68 <__addsf3x+0x52>
    2a54:	50 3e       	cpi	r21, 0xE0	; 224
    2a56:	68 f1       	brcs	.+90     	; 0x2ab2 <__addsf3x+0x9c>
    2a58:	1a 16       	cp	r1, r26
    2a5a:	f0 40       	sbci	r31, 0x00	; 0
    2a5c:	a2 2f       	mov	r26, r18
    2a5e:	23 2f       	mov	r18, r19
    2a60:	34 2f       	mov	r19, r20
    2a62:	44 27       	eor	r20, r20
    2a64:	58 5f       	subi	r21, 0xF8	; 248
    2a66:	f3 cf       	rjmp	.-26     	; 0x2a4e <__addsf3x+0x38>
    2a68:	46 95       	lsr	r20
    2a6a:	37 95       	ror	r19
    2a6c:	27 95       	ror	r18
    2a6e:	a7 95       	ror	r26
    2a70:	f0 40       	sbci	r31, 0x00	; 0
    2a72:	53 95       	inc	r21
    2a74:	c9 f7       	brne	.-14     	; 0x2a68 <__addsf3x+0x52>
    2a76:	7e f4       	brtc	.+30     	; 0x2a96 <__addsf3x+0x80>
    2a78:	1f 16       	cp	r1, r31
    2a7a:	ba 0b       	sbc	r27, r26
    2a7c:	62 0b       	sbc	r22, r18
    2a7e:	73 0b       	sbc	r23, r19
    2a80:	84 0b       	sbc	r24, r20
    2a82:	ba f0       	brmi	.+46     	; 0x2ab2 <__addsf3x+0x9c>
    2a84:	91 50       	subi	r25, 0x01	; 1
    2a86:	a1 f0       	breq	.+40     	; 0x2ab0 <__addsf3x+0x9a>
    2a88:	ff 0f       	add	r31, r31
    2a8a:	bb 1f       	adc	r27, r27
    2a8c:	66 1f       	adc	r22, r22
    2a8e:	77 1f       	adc	r23, r23
    2a90:	88 1f       	adc	r24, r24
    2a92:	c2 f7       	brpl	.-16     	; 0x2a84 <__addsf3x+0x6e>
    2a94:	0e c0       	rjmp	.+28     	; 0x2ab2 <__addsf3x+0x9c>
    2a96:	ba 0f       	add	r27, r26
    2a98:	62 1f       	adc	r22, r18
    2a9a:	73 1f       	adc	r23, r19
    2a9c:	84 1f       	adc	r24, r20
    2a9e:	48 f4       	brcc	.+18     	; 0x2ab2 <__addsf3x+0x9c>
    2aa0:	87 95       	ror	r24
    2aa2:	77 95       	ror	r23
    2aa4:	67 95       	ror	r22
    2aa6:	b7 95       	ror	r27
    2aa8:	f7 95       	ror	r31
    2aaa:	9e 3f       	cpi	r25, 0xFE	; 254
    2aac:	08 f0       	brcs	.+2      	; 0x2ab0 <__addsf3x+0x9a>
    2aae:	b0 cf       	rjmp	.-160    	; 0x2a10 <__addsf3+0x28>
    2ab0:	93 95       	inc	r25
    2ab2:	88 0f       	add	r24, r24
    2ab4:	08 f0       	brcs	.+2      	; 0x2ab8 <__addsf3x+0xa2>
    2ab6:	99 27       	eor	r25, r25
    2ab8:	ee 0f       	add	r30, r30
    2aba:	97 95       	ror	r25
    2abc:	87 95       	ror	r24
    2abe:	08 95       	ret

00002ac0 <__cmpsf2>:
    2ac0:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__fp_cmp>
    2ac4:	08 f4       	brcc	.+2      	; 0x2ac8 <__cmpsf2+0x8>
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	08 95       	ret

00002aca <__divsf3>:
    2aca:	0e 94 79 15 	call	0x2af2	; 0x2af2 <__divsf3x>
    2ace:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__fp_round>
    2ad2:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <__fp_pscB>
    2ad6:	58 f0       	brcs	.+22     	; 0x2aee <__divsf3+0x24>
    2ad8:	0e 94 77 16 	call	0x2cee	; 0x2cee <__fp_pscA>
    2adc:	40 f0       	brcs	.+16     	; 0x2aee <__divsf3+0x24>
    2ade:	29 f4       	brne	.+10     	; 0x2aea <__divsf3+0x20>
    2ae0:	5f 3f       	cpi	r21, 0xFF	; 255
    2ae2:	29 f0       	breq	.+10     	; 0x2aee <__divsf3+0x24>
    2ae4:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__fp_inf>
    2ae8:	51 11       	cpse	r21, r1
    2aea:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__fp_szero>
    2aee:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <__fp_nan>

00002af2 <__divsf3x>:
    2af2:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <__fp_split3>
    2af6:	68 f3       	brcs	.-38     	; 0x2ad2 <__divsf3+0x8>

00002af8 <__divsf3_pse>:
    2af8:	99 23       	and	r25, r25
    2afa:	b1 f3       	breq	.-20     	; 0x2ae8 <__divsf3+0x1e>
    2afc:	55 23       	and	r21, r21
    2afe:	91 f3       	breq	.-28     	; 0x2ae4 <__divsf3+0x1a>
    2b00:	95 1b       	sub	r25, r21
    2b02:	55 0b       	sbc	r21, r21
    2b04:	bb 27       	eor	r27, r27
    2b06:	aa 27       	eor	r26, r26
    2b08:	62 17       	cp	r22, r18
    2b0a:	73 07       	cpc	r23, r19
    2b0c:	84 07       	cpc	r24, r20
    2b0e:	38 f0       	brcs	.+14     	; 0x2b1e <__divsf3_pse+0x26>
    2b10:	9f 5f       	subi	r25, 0xFF	; 255
    2b12:	5f 4f       	sbci	r21, 0xFF	; 255
    2b14:	22 0f       	add	r18, r18
    2b16:	33 1f       	adc	r19, r19
    2b18:	44 1f       	adc	r20, r20
    2b1a:	aa 1f       	adc	r26, r26
    2b1c:	a9 f3       	breq	.-22     	; 0x2b08 <__divsf3_pse+0x10>
    2b1e:	35 d0       	rcall	.+106    	; 0x2b8a <__divsf3_pse+0x92>
    2b20:	0e 2e       	mov	r0, r30
    2b22:	3a f0       	brmi	.+14     	; 0x2b32 <__divsf3_pse+0x3a>
    2b24:	e0 e8       	ldi	r30, 0x80	; 128
    2b26:	32 d0       	rcall	.+100    	; 0x2b8c <__divsf3_pse+0x94>
    2b28:	91 50       	subi	r25, 0x01	; 1
    2b2a:	50 40       	sbci	r21, 0x00	; 0
    2b2c:	e6 95       	lsr	r30
    2b2e:	00 1c       	adc	r0, r0
    2b30:	ca f7       	brpl	.-14     	; 0x2b24 <__divsf3_pse+0x2c>
    2b32:	2b d0       	rcall	.+86     	; 0x2b8a <__divsf3_pse+0x92>
    2b34:	fe 2f       	mov	r31, r30
    2b36:	29 d0       	rcall	.+82     	; 0x2b8a <__divsf3_pse+0x92>
    2b38:	66 0f       	add	r22, r22
    2b3a:	77 1f       	adc	r23, r23
    2b3c:	88 1f       	adc	r24, r24
    2b3e:	bb 1f       	adc	r27, r27
    2b40:	26 17       	cp	r18, r22
    2b42:	37 07       	cpc	r19, r23
    2b44:	48 07       	cpc	r20, r24
    2b46:	ab 07       	cpc	r26, r27
    2b48:	b0 e8       	ldi	r27, 0x80	; 128
    2b4a:	09 f0       	breq	.+2      	; 0x2b4e <__divsf3_pse+0x56>
    2b4c:	bb 0b       	sbc	r27, r27
    2b4e:	80 2d       	mov	r24, r0
    2b50:	bf 01       	movw	r22, r30
    2b52:	ff 27       	eor	r31, r31
    2b54:	93 58       	subi	r25, 0x83	; 131
    2b56:	5f 4f       	sbci	r21, 0xFF	; 255
    2b58:	3a f0       	brmi	.+14     	; 0x2b68 <__divsf3_pse+0x70>
    2b5a:	9e 3f       	cpi	r25, 0xFE	; 254
    2b5c:	51 05       	cpc	r21, r1
    2b5e:	78 f0       	brcs	.+30     	; 0x2b7e <__divsf3_pse+0x86>
    2b60:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__fp_inf>
    2b64:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__fp_szero>
    2b68:	5f 3f       	cpi	r21, 0xFF	; 255
    2b6a:	e4 f3       	brlt	.-8      	; 0x2b64 <__divsf3_pse+0x6c>
    2b6c:	98 3e       	cpi	r25, 0xE8	; 232
    2b6e:	d4 f3       	brlt	.-12     	; 0x2b64 <__divsf3_pse+0x6c>
    2b70:	86 95       	lsr	r24
    2b72:	77 95       	ror	r23
    2b74:	67 95       	ror	r22
    2b76:	b7 95       	ror	r27
    2b78:	f7 95       	ror	r31
    2b7a:	9f 5f       	subi	r25, 0xFF	; 255
    2b7c:	c9 f7       	brne	.-14     	; 0x2b70 <__divsf3_pse+0x78>
    2b7e:	88 0f       	add	r24, r24
    2b80:	91 1d       	adc	r25, r1
    2b82:	96 95       	lsr	r25
    2b84:	87 95       	ror	r24
    2b86:	97 f9       	bld	r25, 7
    2b88:	08 95       	ret
    2b8a:	e1 e0       	ldi	r30, 0x01	; 1
    2b8c:	66 0f       	add	r22, r22
    2b8e:	77 1f       	adc	r23, r23
    2b90:	88 1f       	adc	r24, r24
    2b92:	bb 1f       	adc	r27, r27
    2b94:	62 17       	cp	r22, r18
    2b96:	73 07       	cpc	r23, r19
    2b98:	84 07       	cpc	r24, r20
    2b9a:	ba 07       	cpc	r27, r26
    2b9c:	20 f0       	brcs	.+8      	; 0x2ba6 <__divsf3_pse+0xae>
    2b9e:	62 1b       	sub	r22, r18
    2ba0:	73 0b       	sbc	r23, r19
    2ba2:	84 0b       	sbc	r24, r20
    2ba4:	ba 0b       	sbc	r27, r26
    2ba6:	ee 1f       	adc	r30, r30
    2ba8:	88 f7       	brcc	.-30     	; 0x2b8c <__divsf3_pse+0x94>
    2baa:	e0 95       	com	r30
    2bac:	08 95       	ret

00002bae <__fixsfsi>:
    2bae:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__fixunssfsi>
    2bb2:	68 94       	set
    2bb4:	b1 11       	cpse	r27, r1
    2bb6:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__fp_szero>
    2bba:	08 95       	ret

00002bbc <__fixunssfsi>:
    2bbc:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__fp_splitA>
    2bc0:	88 f0       	brcs	.+34     	; 0x2be4 <__fixunssfsi+0x28>
    2bc2:	9f 57       	subi	r25, 0x7F	; 127
    2bc4:	98 f0       	brcs	.+38     	; 0x2bec <__fixunssfsi+0x30>
    2bc6:	b9 2f       	mov	r27, r25
    2bc8:	99 27       	eor	r25, r25
    2bca:	b7 51       	subi	r27, 0x17	; 23
    2bcc:	b0 f0       	brcs	.+44     	; 0x2bfa <__fixunssfsi+0x3e>
    2bce:	e1 f0       	breq	.+56     	; 0x2c08 <__fixunssfsi+0x4c>
    2bd0:	66 0f       	add	r22, r22
    2bd2:	77 1f       	adc	r23, r23
    2bd4:	88 1f       	adc	r24, r24
    2bd6:	99 1f       	adc	r25, r25
    2bd8:	1a f0       	brmi	.+6      	; 0x2be0 <__fixunssfsi+0x24>
    2bda:	ba 95       	dec	r27
    2bdc:	c9 f7       	brne	.-14     	; 0x2bd0 <__fixunssfsi+0x14>
    2bde:	14 c0       	rjmp	.+40     	; 0x2c08 <__fixunssfsi+0x4c>
    2be0:	b1 30       	cpi	r27, 0x01	; 1
    2be2:	91 f0       	breq	.+36     	; 0x2c08 <__fixunssfsi+0x4c>
    2be4:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <__fp_zero>
    2be8:	b1 e0       	ldi	r27, 0x01	; 1
    2bea:	08 95       	ret
    2bec:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__fp_zero>
    2bf0:	67 2f       	mov	r22, r23
    2bf2:	78 2f       	mov	r23, r24
    2bf4:	88 27       	eor	r24, r24
    2bf6:	b8 5f       	subi	r27, 0xF8	; 248
    2bf8:	39 f0       	breq	.+14     	; 0x2c08 <__fixunssfsi+0x4c>
    2bfa:	b9 3f       	cpi	r27, 0xF9	; 249
    2bfc:	cc f3       	brlt	.-14     	; 0x2bf0 <__fixunssfsi+0x34>
    2bfe:	86 95       	lsr	r24
    2c00:	77 95       	ror	r23
    2c02:	67 95       	ror	r22
    2c04:	b3 95       	inc	r27
    2c06:	d9 f7       	brne	.-10     	; 0x2bfe <__fixunssfsi+0x42>
    2c08:	3e f4       	brtc	.+14     	; 0x2c18 <__fixunssfsi+0x5c>
    2c0a:	90 95       	com	r25
    2c0c:	80 95       	com	r24
    2c0e:	70 95       	com	r23
    2c10:	61 95       	neg	r22
    2c12:	7f 4f       	sbci	r23, 0xFF	; 255
    2c14:	8f 4f       	sbci	r24, 0xFF	; 255
    2c16:	9f 4f       	sbci	r25, 0xFF	; 255
    2c18:	08 95       	ret

00002c1a <__floatunsisf>:
    2c1a:	e8 94       	clt
    2c1c:	09 c0       	rjmp	.+18     	; 0x2c30 <__floatsisf+0x12>

00002c1e <__floatsisf>:
    2c1e:	97 fb       	bst	r25, 7
    2c20:	3e f4       	brtc	.+14     	; 0x2c30 <__floatsisf+0x12>
    2c22:	90 95       	com	r25
    2c24:	80 95       	com	r24
    2c26:	70 95       	com	r23
    2c28:	61 95       	neg	r22
    2c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c2c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c30:	99 23       	and	r25, r25
    2c32:	a9 f0       	breq	.+42     	; 0x2c5e <__floatsisf+0x40>
    2c34:	f9 2f       	mov	r31, r25
    2c36:	96 e9       	ldi	r25, 0x96	; 150
    2c38:	bb 27       	eor	r27, r27
    2c3a:	93 95       	inc	r25
    2c3c:	f6 95       	lsr	r31
    2c3e:	87 95       	ror	r24
    2c40:	77 95       	ror	r23
    2c42:	67 95       	ror	r22
    2c44:	b7 95       	ror	r27
    2c46:	f1 11       	cpse	r31, r1
    2c48:	f8 cf       	rjmp	.-16     	; 0x2c3a <__floatsisf+0x1c>
    2c4a:	fa f4       	brpl	.+62     	; 0x2c8a <__floatsisf+0x6c>
    2c4c:	bb 0f       	add	r27, r27
    2c4e:	11 f4       	brne	.+4      	; 0x2c54 <__floatsisf+0x36>
    2c50:	60 ff       	sbrs	r22, 0
    2c52:	1b c0       	rjmp	.+54     	; 0x2c8a <__floatsisf+0x6c>
    2c54:	6f 5f       	subi	r22, 0xFF	; 255
    2c56:	7f 4f       	sbci	r23, 0xFF	; 255
    2c58:	8f 4f       	sbci	r24, 0xFF	; 255
    2c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c5c:	16 c0       	rjmp	.+44     	; 0x2c8a <__floatsisf+0x6c>
    2c5e:	88 23       	and	r24, r24
    2c60:	11 f0       	breq	.+4      	; 0x2c66 <__floatsisf+0x48>
    2c62:	96 e9       	ldi	r25, 0x96	; 150
    2c64:	11 c0       	rjmp	.+34     	; 0x2c88 <__floatsisf+0x6a>
    2c66:	77 23       	and	r23, r23
    2c68:	21 f0       	breq	.+8      	; 0x2c72 <__floatsisf+0x54>
    2c6a:	9e e8       	ldi	r25, 0x8E	; 142
    2c6c:	87 2f       	mov	r24, r23
    2c6e:	76 2f       	mov	r23, r22
    2c70:	05 c0       	rjmp	.+10     	; 0x2c7c <__floatsisf+0x5e>
    2c72:	66 23       	and	r22, r22
    2c74:	71 f0       	breq	.+28     	; 0x2c92 <__floatsisf+0x74>
    2c76:	96 e8       	ldi	r25, 0x86	; 134
    2c78:	86 2f       	mov	r24, r22
    2c7a:	70 e0       	ldi	r23, 0x00	; 0
    2c7c:	60 e0       	ldi	r22, 0x00	; 0
    2c7e:	2a f0       	brmi	.+10     	; 0x2c8a <__floatsisf+0x6c>
    2c80:	9a 95       	dec	r25
    2c82:	66 0f       	add	r22, r22
    2c84:	77 1f       	adc	r23, r23
    2c86:	88 1f       	adc	r24, r24
    2c88:	da f7       	brpl	.-10     	; 0x2c80 <__floatsisf+0x62>
    2c8a:	88 0f       	add	r24, r24
    2c8c:	96 95       	lsr	r25
    2c8e:	87 95       	ror	r24
    2c90:	97 f9       	bld	r25, 7
    2c92:	08 95       	ret

00002c94 <__fp_cmp>:
    2c94:	99 0f       	add	r25, r25
    2c96:	00 08       	sbc	r0, r0
    2c98:	55 0f       	add	r21, r21
    2c9a:	aa 0b       	sbc	r26, r26
    2c9c:	e0 e8       	ldi	r30, 0x80	; 128
    2c9e:	fe ef       	ldi	r31, 0xFE	; 254
    2ca0:	16 16       	cp	r1, r22
    2ca2:	17 06       	cpc	r1, r23
    2ca4:	e8 07       	cpc	r30, r24
    2ca6:	f9 07       	cpc	r31, r25
    2ca8:	c0 f0       	brcs	.+48     	; 0x2cda <__fp_cmp+0x46>
    2caa:	12 16       	cp	r1, r18
    2cac:	13 06       	cpc	r1, r19
    2cae:	e4 07       	cpc	r30, r20
    2cb0:	f5 07       	cpc	r31, r21
    2cb2:	98 f0       	brcs	.+38     	; 0x2cda <__fp_cmp+0x46>
    2cb4:	62 1b       	sub	r22, r18
    2cb6:	73 0b       	sbc	r23, r19
    2cb8:	84 0b       	sbc	r24, r20
    2cba:	95 0b       	sbc	r25, r21
    2cbc:	39 f4       	brne	.+14     	; 0x2ccc <__fp_cmp+0x38>
    2cbe:	0a 26       	eor	r0, r26
    2cc0:	61 f0       	breq	.+24     	; 0x2cda <__fp_cmp+0x46>
    2cc2:	23 2b       	or	r18, r19
    2cc4:	24 2b       	or	r18, r20
    2cc6:	25 2b       	or	r18, r21
    2cc8:	21 f4       	brne	.+8      	; 0x2cd2 <__fp_cmp+0x3e>
    2cca:	08 95       	ret
    2ccc:	0a 26       	eor	r0, r26
    2cce:	09 f4       	brne	.+2      	; 0x2cd2 <__fp_cmp+0x3e>
    2cd0:	a1 40       	sbci	r26, 0x01	; 1
    2cd2:	a6 95       	lsr	r26
    2cd4:	8f ef       	ldi	r24, 0xFF	; 255
    2cd6:	81 1d       	adc	r24, r1
    2cd8:	81 1d       	adc	r24, r1
    2cda:	08 95       	ret

00002cdc <__fp_inf>:
    2cdc:	97 f9       	bld	r25, 7
    2cde:	9f 67       	ori	r25, 0x7F	; 127
    2ce0:	80 e8       	ldi	r24, 0x80	; 128
    2ce2:	70 e0       	ldi	r23, 0x00	; 0
    2ce4:	60 e0       	ldi	r22, 0x00	; 0
    2ce6:	08 95       	ret

00002ce8 <__fp_nan>:
    2ce8:	9f ef       	ldi	r25, 0xFF	; 255
    2cea:	80 ec       	ldi	r24, 0xC0	; 192
    2cec:	08 95       	ret

00002cee <__fp_pscA>:
    2cee:	00 24       	eor	r0, r0
    2cf0:	0a 94       	dec	r0
    2cf2:	16 16       	cp	r1, r22
    2cf4:	17 06       	cpc	r1, r23
    2cf6:	18 06       	cpc	r1, r24
    2cf8:	09 06       	cpc	r0, r25
    2cfa:	08 95       	ret

00002cfc <__fp_pscB>:
    2cfc:	00 24       	eor	r0, r0
    2cfe:	0a 94       	dec	r0
    2d00:	12 16       	cp	r1, r18
    2d02:	13 06       	cpc	r1, r19
    2d04:	14 06       	cpc	r1, r20
    2d06:	05 06       	cpc	r0, r21
    2d08:	08 95       	ret

00002d0a <__fp_round>:
    2d0a:	09 2e       	mov	r0, r25
    2d0c:	03 94       	inc	r0
    2d0e:	00 0c       	add	r0, r0
    2d10:	11 f4       	brne	.+4      	; 0x2d16 <__fp_round+0xc>
    2d12:	88 23       	and	r24, r24
    2d14:	52 f0       	brmi	.+20     	; 0x2d2a <__fp_round+0x20>
    2d16:	bb 0f       	add	r27, r27
    2d18:	40 f4       	brcc	.+16     	; 0x2d2a <__fp_round+0x20>
    2d1a:	bf 2b       	or	r27, r31
    2d1c:	11 f4       	brne	.+4      	; 0x2d22 <__fp_round+0x18>
    2d1e:	60 ff       	sbrs	r22, 0
    2d20:	04 c0       	rjmp	.+8      	; 0x2d2a <__fp_round+0x20>
    2d22:	6f 5f       	subi	r22, 0xFF	; 255
    2d24:	7f 4f       	sbci	r23, 0xFF	; 255
    2d26:	8f 4f       	sbci	r24, 0xFF	; 255
    2d28:	9f 4f       	sbci	r25, 0xFF	; 255
    2d2a:	08 95       	ret

00002d2c <__fp_split3>:
    2d2c:	57 fd       	sbrc	r21, 7
    2d2e:	90 58       	subi	r25, 0x80	; 128
    2d30:	44 0f       	add	r20, r20
    2d32:	55 1f       	adc	r21, r21
    2d34:	59 f0       	breq	.+22     	; 0x2d4c <__fp_splitA+0x10>
    2d36:	5f 3f       	cpi	r21, 0xFF	; 255
    2d38:	71 f0       	breq	.+28     	; 0x2d56 <__fp_splitA+0x1a>
    2d3a:	47 95       	ror	r20

00002d3c <__fp_splitA>:
    2d3c:	88 0f       	add	r24, r24
    2d3e:	97 fb       	bst	r25, 7
    2d40:	99 1f       	adc	r25, r25
    2d42:	61 f0       	breq	.+24     	; 0x2d5c <__fp_splitA+0x20>
    2d44:	9f 3f       	cpi	r25, 0xFF	; 255
    2d46:	79 f0       	breq	.+30     	; 0x2d66 <__fp_splitA+0x2a>
    2d48:	87 95       	ror	r24
    2d4a:	08 95       	ret
    2d4c:	12 16       	cp	r1, r18
    2d4e:	13 06       	cpc	r1, r19
    2d50:	14 06       	cpc	r1, r20
    2d52:	55 1f       	adc	r21, r21
    2d54:	f2 cf       	rjmp	.-28     	; 0x2d3a <__fp_split3+0xe>
    2d56:	46 95       	lsr	r20
    2d58:	f1 df       	rcall	.-30     	; 0x2d3c <__fp_splitA>
    2d5a:	08 c0       	rjmp	.+16     	; 0x2d6c <__fp_splitA+0x30>
    2d5c:	16 16       	cp	r1, r22
    2d5e:	17 06       	cpc	r1, r23
    2d60:	18 06       	cpc	r1, r24
    2d62:	99 1f       	adc	r25, r25
    2d64:	f1 cf       	rjmp	.-30     	; 0x2d48 <__fp_splitA+0xc>
    2d66:	86 95       	lsr	r24
    2d68:	71 05       	cpc	r23, r1
    2d6a:	61 05       	cpc	r22, r1
    2d6c:	08 94       	sec
    2d6e:	08 95       	ret

00002d70 <__fp_zero>:
    2d70:	e8 94       	clt

00002d72 <__fp_szero>:
    2d72:	bb 27       	eor	r27, r27
    2d74:	66 27       	eor	r22, r22
    2d76:	77 27       	eor	r23, r23
    2d78:	cb 01       	movw	r24, r22
    2d7a:	97 f9       	bld	r25, 7
    2d7c:	08 95       	ret

00002d7e <__gesf2>:
    2d7e:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <__fp_cmp>
    2d82:	08 f4       	brcc	.+2      	; 0x2d86 <__gesf2+0x8>
    2d84:	8f ef       	ldi	r24, 0xFF	; 255
    2d86:	08 95       	ret

00002d88 <__mulsf3>:
    2d88:	0e 94 d7 16 	call	0x2dae	; 0x2dae <__mulsf3x>
    2d8c:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__fp_round>
    2d90:	0e 94 77 16 	call	0x2cee	; 0x2cee <__fp_pscA>
    2d94:	38 f0       	brcs	.+14     	; 0x2da4 <__mulsf3+0x1c>
    2d96:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <__fp_pscB>
    2d9a:	20 f0       	brcs	.+8      	; 0x2da4 <__mulsf3+0x1c>
    2d9c:	95 23       	and	r25, r21
    2d9e:	11 f0       	breq	.+4      	; 0x2da4 <__mulsf3+0x1c>
    2da0:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__fp_inf>
    2da4:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <__fp_nan>
    2da8:	11 24       	eor	r1, r1
    2daa:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__fp_szero>

00002dae <__mulsf3x>:
    2dae:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <__fp_split3>
    2db2:	70 f3       	brcs	.-36     	; 0x2d90 <__mulsf3+0x8>

00002db4 <__mulsf3_pse>:
    2db4:	95 9f       	mul	r25, r21
    2db6:	c1 f3       	breq	.-16     	; 0x2da8 <__mulsf3+0x20>
    2db8:	95 0f       	add	r25, r21
    2dba:	50 e0       	ldi	r21, 0x00	; 0
    2dbc:	55 1f       	adc	r21, r21
    2dbe:	62 9f       	mul	r22, r18
    2dc0:	f0 01       	movw	r30, r0
    2dc2:	72 9f       	mul	r23, r18
    2dc4:	bb 27       	eor	r27, r27
    2dc6:	f0 0d       	add	r31, r0
    2dc8:	b1 1d       	adc	r27, r1
    2dca:	63 9f       	mul	r22, r19
    2dcc:	aa 27       	eor	r26, r26
    2dce:	f0 0d       	add	r31, r0
    2dd0:	b1 1d       	adc	r27, r1
    2dd2:	aa 1f       	adc	r26, r26
    2dd4:	64 9f       	mul	r22, r20
    2dd6:	66 27       	eor	r22, r22
    2dd8:	b0 0d       	add	r27, r0
    2dda:	a1 1d       	adc	r26, r1
    2ddc:	66 1f       	adc	r22, r22
    2dde:	82 9f       	mul	r24, r18
    2de0:	22 27       	eor	r18, r18
    2de2:	b0 0d       	add	r27, r0
    2de4:	a1 1d       	adc	r26, r1
    2de6:	62 1f       	adc	r22, r18
    2de8:	73 9f       	mul	r23, r19
    2dea:	b0 0d       	add	r27, r0
    2dec:	a1 1d       	adc	r26, r1
    2dee:	62 1f       	adc	r22, r18
    2df0:	83 9f       	mul	r24, r19
    2df2:	a0 0d       	add	r26, r0
    2df4:	61 1d       	adc	r22, r1
    2df6:	22 1f       	adc	r18, r18
    2df8:	74 9f       	mul	r23, r20
    2dfa:	33 27       	eor	r19, r19
    2dfc:	a0 0d       	add	r26, r0
    2dfe:	61 1d       	adc	r22, r1
    2e00:	23 1f       	adc	r18, r19
    2e02:	84 9f       	mul	r24, r20
    2e04:	60 0d       	add	r22, r0
    2e06:	21 1d       	adc	r18, r1
    2e08:	82 2f       	mov	r24, r18
    2e0a:	76 2f       	mov	r23, r22
    2e0c:	6a 2f       	mov	r22, r26
    2e0e:	11 24       	eor	r1, r1
    2e10:	9f 57       	subi	r25, 0x7F	; 127
    2e12:	50 40       	sbci	r21, 0x00	; 0
    2e14:	9a f0       	brmi	.+38     	; 0x2e3c <__mulsf3_pse+0x88>
    2e16:	f1 f0       	breq	.+60     	; 0x2e54 <__mulsf3_pse+0xa0>
    2e18:	88 23       	and	r24, r24
    2e1a:	4a f0       	brmi	.+18     	; 0x2e2e <__mulsf3_pse+0x7a>
    2e1c:	ee 0f       	add	r30, r30
    2e1e:	ff 1f       	adc	r31, r31
    2e20:	bb 1f       	adc	r27, r27
    2e22:	66 1f       	adc	r22, r22
    2e24:	77 1f       	adc	r23, r23
    2e26:	88 1f       	adc	r24, r24
    2e28:	91 50       	subi	r25, 0x01	; 1
    2e2a:	50 40       	sbci	r21, 0x00	; 0
    2e2c:	a9 f7       	brne	.-22     	; 0x2e18 <__mulsf3_pse+0x64>
    2e2e:	9e 3f       	cpi	r25, 0xFE	; 254
    2e30:	51 05       	cpc	r21, r1
    2e32:	80 f0       	brcs	.+32     	; 0x2e54 <__mulsf3_pse+0xa0>
    2e34:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__fp_inf>
    2e38:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__fp_szero>
    2e3c:	5f 3f       	cpi	r21, 0xFF	; 255
    2e3e:	e4 f3       	brlt	.-8      	; 0x2e38 <__mulsf3_pse+0x84>
    2e40:	98 3e       	cpi	r25, 0xE8	; 232
    2e42:	d4 f3       	brlt	.-12     	; 0x2e38 <__mulsf3_pse+0x84>
    2e44:	86 95       	lsr	r24
    2e46:	77 95       	ror	r23
    2e48:	67 95       	ror	r22
    2e4a:	b7 95       	ror	r27
    2e4c:	f7 95       	ror	r31
    2e4e:	e7 95       	ror	r30
    2e50:	9f 5f       	subi	r25, 0xFF	; 255
    2e52:	c1 f7       	brne	.-16     	; 0x2e44 <__mulsf3_pse+0x90>
    2e54:	fe 2b       	or	r31, r30
    2e56:	88 0f       	add	r24, r24
    2e58:	91 1d       	adc	r25, r1
    2e5a:	96 95       	lsr	r25
    2e5c:	87 95       	ror	r24
    2e5e:	97 f9       	bld	r25, 7
    2e60:	08 95       	ret

00002e62 <__udivmodhi4>:
    2e62:	aa 1b       	sub	r26, r26
    2e64:	bb 1b       	sub	r27, r27
    2e66:	51 e1       	ldi	r21, 0x11	; 17
    2e68:	07 c0       	rjmp	.+14     	; 0x2e78 <__udivmodhi4_ep>

00002e6a <__udivmodhi4_loop>:
    2e6a:	aa 1f       	adc	r26, r26
    2e6c:	bb 1f       	adc	r27, r27
    2e6e:	a6 17       	cp	r26, r22
    2e70:	b7 07       	cpc	r27, r23
    2e72:	10 f0       	brcs	.+4      	; 0x2e78 <__udivmodhi4_ep>
    2e74:	a6 1b       	sub	r26, r22
    2e76:	b7 0b       	sbc	r27, r23

00002e78 <__udivmodhi4_ep>:
    2e78:	88 1f       	adc	r24, r24
    2e7a:	99 1f       	adc	r25, r25
    2e7c:	5a 95       	dec	r21
    2e7e:	a9 f7       	brne	.-22     	; 0x2e6a <__udivmodhi4_loop>
    2e80:	80 95       	com	r24
    2e82:	90 95       	com	r25
    2e84:	bc 01       	movw	r22, r24
    2e86:	cd 01       	movw	r24, r26
    2e88:	08 95       	ret

00002e8a <__ashldi3>:
    2e8a:	0f 93       	push	r16
    2e8c:	08 30       	cpi	r16, 0x08	; 8
    2e8e:	90 f0       	brcs	.+36     	; 0x2eb4 <__ashldi3+0x2a>
    2e90:	98 2f       	mov	r25, r24
    2e92:	87 2f       	mov	r24, r23
    2e94:	76 2f       	mov	r23, r22
    2e96:	65 2f       	mov	r22, r21
    2e98:	54 2f       	mov	r21, r20
    2e9a:	43 2f       	mov	r20, r19
    2e9c:	32 2f       	mov	r19, r18
    2e9e:	22 27       	eor	r18, r18
    2ea0:	08 50       	subi	r16, 0x08	; 8
    2ea2:	f4 cf       	rjmp	.-24     	; 0x2e8c <__ashldi3+0x2>
    2ea4:	22 0f       	add	r18, r18
    2ea6:	33 1f       	adc	r19, r19
    2ea8:	44 1f       	adc	r20, r20
    2eaa:	55 1f       	adc	r21, r21
    2eac:	66 1f       	adc	r22, r22
    2eae:	77 1f       	adc	r23, r23
    2eb0:	88 1f       	adc	r24, r24
    2eb2:	99 1f       	adc	r25, r25
    2eb4:	0a 95       	dec	r16
    2eb6:	b2 f7       	brpl	.-20     	; 0x2ea4 <__ashldi3+0x1a>
    2eb8:	0f 91       	pop	r16
    2eba:	08 95       	ret

00002ebc <__ashrdi3>:
    2ebc:	97 fb       	bst	r25, 7
    2ebe:	10 f8       	bld	r1, 0

00002ec0 <__lshrdi3>:
    2ec0:	16 94       	lsr	r1
    2ec2:	00 08       	sbc	r0, r0
    2ec4:	0f 93       	push	r16
    2ec6:	08 30       	cpi	r16, 0x08	; 8
    2ec8:	98 f0       	brcs	.+38     	; 0x2ef0 <__lshrdi3+0x30>
    2eca:	08 50       	subi	r16, 0x08	; 8
    2ecc:	23 2f       	mov	r18, r19
    2ece:	34 2f       	mov	r19, r20
    2ed0:	45 2f       	mov	r20, r21
    2ed2:	56 2f       	mov	r21, r22
    2ed4:	67 2f       	mov	r22, r23
    2ed6:	78 2f       	mov	r23, r24
    2ed8:	89 2f       	mov	r24, r25
    2eda:	90 2d       	mov	r25, r0
    2edc:	f4 cf       	rjmp	.-24     	; 0x2ec6 <__lshrdi3+0x6>
    2ede:	05 94       	asr	r0
    2ee0:	97 95       	ror	r25
    2ee2:	87 95       	ror	r24
    2ee4:	77 95       	ror	r23
    2ee6:	67 95       	ror	r22
    2ee8:	57 95       	ror	r21
    2eea:	47 95       	ror	r20
    2eec:	37 95       	ror	r19
    2eee:	27 95       	ror	r18
    2ef0:	0a 95       	dec	r16
    2ef2:	aa f7       	brpl	.-22     	; 0x2ede <__lshrdi3+0x1e>
    2ef4:	0f 91       	pop	r16
    2ef6:	08 95       	ret

00002ef8 <__cmpdi2_s8>:
    2ef8:	00 24       	eor	r0, r0
    2efa:	a7 fd       	sbrc	r26, 7
    2efc:	00 94       	com	r0
    2efe:	2a 17       	cp	r18, r26
    2f00:	30 05       	cpc	r19, r0
    2f02:	40 05       	cpc	r20, r0
    2f04:	50 05       	cpc	r21, r0
    2f06:	60 05       	cpc	r22, r0
    2f08:	70 05       	cpc	r23, r0
    2f0a:	80 05       	cpc	r24, r0
    2f0c:	90 05       	cpc	r25, r0
    2f0e:	08 95       	ret

00002f10 <__tablejump2__>:
    2f10:	ee 0f       	add	r30, r30
    2f12:	ff 1f       	adc	r31, r31
    2f14:	05 90       	lpm	r0, Z+
    2f16:	f4 91       	lpm	r31, Z
    2f18:	e0 2d       	mov	r30, r0
    2f1a:	09 94       	ijmp

00002f1c <malloc>:
    2f1c:	0f 93       	push	r16
    2f1e:	1f 93       	push	r17
    2f20:	cf 93       	push	r28
    2f22:	df 93       	push	r29
    2f24:	82 30       	cpi	r24, 0x02	; 2
    2f26:	91 05       	cpc	r25, r1
    2f28:	10 f4       	brcc	.+4      	; 0x2f2e <malloc+0x12>
    2f2a:	82 e0       	ldi	r24, 0x02	; 2
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	e0 91 4d 03 	lds	r30, 0x034D	; 0x80034d <__flp>
    2f32:	f0 91 4e 03 	lds	r31, 0x034E	; 0x80034e <__flp+0x1>
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	a0 e0       	ldi	r26, 0x00	; 0
    2f3c:	b0 e0       	ldi	r27, 0x00	; 0
    2f3e:	30 97       	sbiw	r30, 0x00	; 0
    2f40:	19 f1       	breq	.+70     	; 0x2f88 <malloc+0x6c>
    2f42:	40 81       	ld	r20, Z
    2f44:	51 81       	ldd	r21, Z+1	; 0x01
    2f46:	02 81       	ldd	r16, Z+2	; 0x02
    2f48:	13 81       	ldd	r17, Z+3	; 0x03
    2f4a:	48 17       	cp	r20, r24
    2f4c:	59 07       	cpc	r21, r25
    2f4e:	c8 f0       	brcs	.+50     	; 0x2f82 <malloc+0x66>
    2f50:	84 17       	cp	r24, r20
    2f52:	95 07       	cpc	r25, r21
    2f54:	69 f4       	brne	.+26     	; 0x2f70 <malloc+0x54>
    2f56:	10 97       	sbiw	r26, 0x00	; 0
    2f58:	31 f0       	breq	.+12     	; 0x2f66 <malloc+0x4a>
    2f5a:	12 96       	adiw	r26, 0x02	; 2
    2f5c:	0c 93       	st	X, r16
    2f5e:	12 97       	sbiw	r26, 0x02	; 2
    2f60:	13 96       	adiw	r26, 0x03	; 3
    2f62:	1c 93       	st	X, r17
    2f64:	27 c0       	rjmp	.+78     	; 0x2fb4 <malloc+0x98>
    2f66:	00 93 4d 03 	sts	0x034D, r16	; 0x80034d <__flp>
    2f6a:	10 93 4e 03 	sts	0x034E, r17	; 0x80034e <__flp+0x1>
    2f6e:	22 c0       	rjmp	.+68     	; 0x2fb4 <malloc+0x98>
    2f70:	21 15       	cp	r18, r1
    2f72:	31 05       	cpc	r19, r1
    2f74:	19 f0       	breq	.+6      	; 0x2f7c <malloc+0x60>
    2f76:	42 17       	cp	r20, r18
    2f78:	53 07       	cpc	r21, r19
    2f7a:	18 f4       	brcc	.+6      	; 0x2f82 <malloc+0x66>
    2f7c:	9a 01       	movw	r18, r20
    2f7e:	bd 01       	movw	r22, r26
    2f80:	ef 01       	movw	r28, r30
    2f82:	df 01       	movw	r26, r30
    2f84:	f8 01       	movw	r30, r16
    2f86:	db cf       	rjmp	.-74     	; 0x2f3e <malloc+0x22>
    2f88:	21 15       	cp	r18, r1
    2f8a:	31 05       	cpc	r19, r1
    2f8c:	f9 f0       	breq	.+62     	; 0x2fcc <malloc+0xb0>
    2f8e:	28 1b       	sub	r18, r24
    2f90:	39 0b       	sbc	r19, r25
    2f92:	24 30       	cpi	r18, 0x04	; 4
    2f94:	31 05       	cpc	r19, r1
    2f96:	80 f4       	brcc	.+32     	; 0x2fb8 <malloc+0x9c>
    2f98:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f9c:	61 15       	cp	r22, r1
    2f9e:	71 05       	cpc	r23, r1
    2fa0:	21 f0       	breq	.+8      	; 0x2faa <malloc+0x8e>
    2fa2:	fb 01       	movw	r30, r22
    2fa4:	93 83       	std	Z+3, r25	; 0x03
    2fa6:	82 83       	std	Z+2, r24	; 0x02
    2fa8:	04 c0       	rjmp	.+8      	; 0x2fb2 <malloc+0x96>
    2faa:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <__flp+0x1>
    2fae:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <__flp>
    2fb2:	fe 01       	movw	r30, r28
    2fb4:	32 96       	adiw	r30, 0x02	; 2
    2fb6:	44 c0       	rjmp	.+136    	; 0x3040 <malloc+0x124>
    2fb8:	fe 01       	movw	r30, r28
    2fba:	e2 0f       	add	r30, r18
    2fbc:	f3 1f       	adc	r31, r19
    2fbe:	81 93       	st	Z+, r24
    2fc0:	91 93       	st	Z+, r25
    2fc2:	22 50       	subi	r18, 0x02	; 2
    2fc4:	31 09       	sbc	r19, r1
    2fc6:	39 83       	std	Y+1, r19	; 0x01
    2fc8:	28 83       	st	Y, r18
    2fca:	3a c0       	rjmp	.+116    	; 0x3040 <malloc+0x124>
    2fcc:	20 91 4b 03 	lds	r18, 0x034B	; 0x80034b <__brkval>
    2fd0:	30 91 4c 03 	lds	r19, 0x034C	; 0x80034c <__brkval+0x1>
    2fd4:	23 2b       	or	r18, r19
    2fd6:	41 f4       	brne	.+16     	; 0x2fe8 <malloc+0xcc>
    2fd8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2fdc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2fe0:	30 93 4c 03 	sts	0x034C, r19	; 0x80034c <__brkval+0x1>
    2fe4:	20 93 4b 03 	sts	0x034B, r18	; 0x80034b <__brkval>
    2fe8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2fec:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2ff0:	21 15       	cp	r18, r1
    2ff2:	31 05       	cpc	r19, r1
    2ff4:	41 f4       	brne	.+16     	; 0x3006 <malloc+0xea>
    2ff6:	2d b7       	in	r18, 0x3d	; 61
    2ff8:	3e b7       	in	r19, 0x3e	; 62
    2ffa:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2ffe:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3002:	24 1b       	sub	r18, r20
    3004:	35 0b       	sbc	r19, r21
    3006:	e0 91 4b 03 	lds	r30, 0x034B	; 0x80034b <__brkval>
    300a:	f0 91 4c 03 	lds	r31, 0x034C	; 0x80034c <__brkval+0x1>
    300e:	e2 17       	cp	r30, r18
    3010:	f3 07       	cpc	r31, r19
    3012:	a0 f4       	brcc	.+40     	; 0x303c <malloc+0x120>
    3014:	2e 1b       	sub	r18, r30
    3016:	3f 0b       	sbc	r19, r31
    3018:	28 17       	cp	r18, r24
    301a:	39 07       	cpc	r19, r25
    301c:	78 f0       	brcs	.+30     	; 0x303c <malloc+0x120>
    301e:	ac 01       	movw	r20, r24
    3020:	4e 5f       	subi	r20, 0xFE	; 254
    3022:	5f 4f       	sbci	r21, 0xFF	; 255
    3024:	24 17       	cp	r18, r20
    3026:	35 07       	cpc	r19, r21
    3028:	48 f0       	brcs	.+18     	; 0x303c <malloc+0x120>
    302a:	4e 0f       	add	r20, r30
    302c:	5f 1f       	adc	r21, r31
    302e:	50 93 4c 03 	sts	0x034C, r21	; 0x80034c <__brkval+0x1>
    3032:	40 93 4b 03 	sts	0x034B, r20	; 0x80034b <__brkval>
    3036:	81 93       	st	Z+, r24
    3038:	91 93       	st	Z+, r25
    303a:	02 c0       	rjmp	.+4      	; 0x3040 <malloc+0x124>
    303c:	e0 e0       	ldi	r30, 0x00	; 0
    303e:	f0 e0       	ldi	r31, 0x00	; 0
    3040:	cf 01       	movw	r24, r30
    3042:	df 91       	pop	r29
    3044:	cf 91       	pop	r28
    3046:	1f 91       	pop	r17
    3048:	0f 91       	pop	r16
    304a:	08 95       	ret

0000304c <free>:
    304c:	cf 93       	push	r28
    304e:	df 93       	push	r29
    3050:	00 97       	sbiw	r24, 0x00	; 0
    3052:	09 f4       	brne	.+2      	; 0x3056 <free+0xa>
    3054:	81 c0       	rjmp	.+258    	; 0x3158 <free+0x10c>
    3056:	fc 01       	movw	r30, r24
    3058:	32 97       	sbiw	r30, 0x02	; 2
    305a:	13 82       	std	Z+3, r1	; 0x03
    305c:	12 82       	std	Z+2, r1	; 0x02
    305e:	a0 91 4d 03 	lds	r26, 0x034D	; 0x80034d <__flp>
    3062:	b0 91 4e 03 	lds	r27, 0x034E	; 0x80034e <__flp+0x1>
    3066:	10 97       	sbiw	r26, 0x00	; 0
    3068:	81 f4       	brne	.+32     	; 0x308a <free+0x3e>
    306a:	20 81       	ld	r18, Z
    306c:	31 81       	ldd	r19, Z+1	; 0x01
    306e:	82 0f       	add	r24, r18
    3070:	93 1f       	adc	r25, r19
    3072:	20 91 4b 03 	lds	r18, 0x034B	; 0x80034b <__brkval>
    3076:	30 91 4c 03 	lds	r19, 0x034C	; 0x80034c <__brkval+0x1>
    307a:	28 17       	cp	r18, r24
    307c:	39 07       	cpc	r19, r25
    307e:	51 f5       	brne	.+84     	; 0x30d4 <free+0x88>
    3080:	f0 93 4c 03 	sts	0x034C, r31	; 0x80034c <__brkval+0x1>
    3084:	e0 93 4b 03 	sts	0x034B, r30	; 0x80034b <__brkval>
    3088:	67 c0       	rjmp	.+206    	; 0x3158 <free+0x10c>
    308a:	ed 01       	movw	r28, r26
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	ce 17       	cp	r28, r30
    3092:	df 07       	cpc	r29, r31
    3094:	40 f4       	brcc	.+16     	; 0x30a6 <free+0x5a>
    3096:	4a 81       	ldd	r20, Y+2	; 0x02
    3098:	5b 81       	ldd	r21, Y+3	; 0x03
    309a:	9e 01       	movw	r18, r28
    309c:	41 15       	cp	r20, r1
    309e:	51 05       	cpc	r21, r1
    30a0:	f1 f0       	breq	.+60     	; 0x30de <free+0x92>
    30a2:	ea 01       	movw	r28, r20
    30a4:	f5 cf       	rjmp	.-22     	; 0x3090 <free+0x44>
    30a6:	d3 83       	std	Z+3, r29	; 0x03
    30a8:	c2 83       	std	Z+2, r28	; 0x02
    30aa:	40 81       	ld	r20, Z
    30ac:	51 81       	ldd	r21, Z+1	; 0x01
    30ae:	84 0f       	add	r24, r20
    30b0:	95 1f       	adc	r25, r21
    30b2:	c8 17       	cp	r28, r24
    30b4:	d9 07       	cpc	r29, r25
    30b6:	59 f4       	brne	.+22     	; 0x30ce <free+0x82>
    30b8:	88 81       	ld	r24, Y
    30ba:	99 81       	ldd	r25, Y+1	; 0x01
    30bc:	84 0f       	add	r24, r20
    30be:	95 1f       	adc	r25, r21
    30c0:	02 96       	adiw	r24, 0x02	; 2
    30c2:	91 83       	std	Z+1, r25	; 0x01
    30c4:	80 83       	st	Z, r24
    30c6:	8a 81       	ldd	r24, Y+2	; 0x02
    30c8:	9b 81       	ldd	r25, Y+3	; 0x03
    30ca:	93 83       	std	Z+3, r25	; 0x03
    30cc:	82 83       	std	Z+2, r24	; 0x02
    30ce:	21 15       	cp	r18, r1
    30d0:	31 05       	cpc	r19, r1
    30d2:	29 f4       	brne	.+10     	; 0x30de <free+0x92>
    30d4:	f0 93 4e 03 	sts	0x034E, r31	; 0x80034e <__flp+0x1>
    30d8:	e0 93 4d 03 	sts	0x034D, r30	; 0x80034d <__flp>
    30dc:	3d c0       	rjmp	.+122    	; 0x3158 <free+0x10c>
    30de:	e9 01       	movw	r28, r18
    30e0:	fb 83       	std	Y+3, r31	; 0x03
    30e2:	ea 83       	std	Y+2, r30	; 0x02
    30e4:	49 91       	ld	r20, Y+
    30e6:	59 91       	ld	r21, Y+
    30e8:	c4 0f       	add	r28, r20
    30ea:	d5 1f       	adc	r29, r21
    30ec:	ec 17       	cp	r30, r28
    30ee:	fd 07       	cpc	r31, r29
    30f0:	61 f4       	brne	.+24     	; 0x310a <free+0xbe>
    30f2:	80 81       	ld	r24, Z
    30f4:	91 81       	ldd	r25, Z+1	; 0x01
    30f6:	84 0f       	add	r24, r20
    30f8:	95 1f       	adc	r25, r21
    30fa:	02 96       	adiw	r24, 0x02	; 2
    30fc:	e9 01       	movw	r28, r18
    30fe:	99 83       	std	Y+1, r25	; 0x01
    3100:	88 83       	st	Y, r24
    3102:	82 81       	ldd	r24, Z+2	; 0x02
    3104:	93 81       	ldd	r25, Z+3	; 0x03
    3106:	9b 83       	std	Y+3, r25	; 0x03
    3108:	8a 83       	std	Y+2, r24	; 0x02
    310a:	e0 e0       	ldi	r30, 0x00	; 0
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	12 96       	adiw	r26, 0x02	; 2
    3110:	8d 91       	ld	r24, X+
    3112:	9c 91       	ld	r25, X
    3114:	13 97       	sbiw	r26, 0x03	; 3
    3116:	00 97       	sbiw	r24, 0x00	; 0
    3118:	19 f0       	breq	.+6      	; 0x3120 <free+0xd4>
    311a:	fd 01       	movw	r30, r26
    311c:	dc 01       	movw	r26, r24
    311e:	f7 cf       	rjmp	.-18     	; 0x310e <free+0xc2>
    3120:	8d 91       	ld	r24, X+
    3122:	9c 91       	ld	r25, X
    3124:	11 97       	sbiw	r26, 0x01	; 1
    3126:	9d 01       	movw	r18, r26
    3128:	2e 5f       	subi	r18, 0xFE	; 254
    312a:	3f 4f       	sbci	r19, 0xFF	; 255
    312c:	82 0f       	add	r24, r18
    312e:	93 1f       	adc	r25, r19
    3130:	20 91 4b 03 	lds	r18, 0x034B	; 0x80034b <__brkval>
    3134:	30 91 4c 03 	lds	r19, 0x034C	; 0x80034c <__brkval+0x1>
    3138:	28 17       	cp	r18, r24
    313a:	39 07       	cpc	r19, r25
    313c:	69 f4       	brne	.+26     	; 0x3158 <free+0x10c>
    313e:	30 97       	sbiw	r30, 0x00	; 0
    3140:	29 f4       	brne	.+10     	; 0x314c <free+0x100>
    3142:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <__flp+0x1>
    3146:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <__flp>
    314a:	02 c0       	rjmp	.+4      	; 0x3150 <free+0x104>
    314c:	13 82       	std	Z+3, r1	; 0x03
    314e:	12 82       	std	Z+2, r1	; 0x02
    3150:	b0 93 4c 03 	sts	0x034C, r27	; 0x80034c <__brkval+0x1>
    3154:	a0 93 4b 03 	sts	0x034B, r26	; 0x80034b <__brkval>
    3158:	df 91       	pop	r29
    315a:	cf 91       	pop	r28
    315c:	08 95       	ret

0000315e <do_rand>:
    315e:	8f 92       	push	r8
    3160:	9f 92       	push	r9
    3162:	af 92       	push	r10
    3164:	bf 92       	push	r11
    3166:	cf 92       	push	r12
    3168:	df 92       	push	r13
    316a:	ef 92       	push	r14
    316c:	ff 92       	push	r15
    316e:	cf 93       	push	r28
    3170:	df 93       	push	r29
    3172:	ec 01       	movw	r28, r24
    3174:	68 81       	ld	r22, Y
    3176:	79 81       	ldd	r23, Y+1	; 0x01
    3178:	8a 81       	ldd	r24, Y+2	; 0x02
    317a:	9b 81       	ldd	r25, Y+3	; 0x03
    317c:	61 15       	cp	r22, r1
    317e:	71 05       	cpc	r23, r1
    3180:	81 05       	cpc	r24, r1
    3182:	91 05       	cpc	r25, r1
    3184:	21 f4       	brne	.+8      	; 0x318e <do_rand+0x30>
    3186:	64 e2       	ldi	r22, 0x24	; 36
    3188:	79 ed       	ldi	r23, 0xD9	; 217
    318a:	8b e5       	ldi	r24, 0x5B	; 91
    318c:	97 e0       	ldi	r25, 0x07	; 7
    318e:	2d e1       	ldi	r18, 0x1D	; 29
    3190:	33 ef       	ldi	r19, 0xF3	; 243
    3192:	41 e0       	ldi	r20, 0x01	; 1
    3194:	50 e0       	ldi	r21, 0x00	; 0
    3196:	0e 94 9b 1c 	call	0x3936	; 0x3936 <__divmodsi4>
    319a:	49 01       	movw	r8, r18
    319c:	5a 01       	movw	r10, r20
    319e:	9b 01       	movw	r18, r22
    31a0:	ac 01       	movw	r20, r24
    31a2:	a7 ea       	ldi	r26, 0xA7	; 167
    31a4:	b1 e4       	ldi	r27, 0x41	; 65
    31a6:	0e 94 ba 1c 	call	0x3974	; 0x3974 <__muluhisi3>
    31aa:	6b 01       	movw	r12, r22
    31ac:	7c 01       	movw	r14, r24
    31ae:	ac ee       	ldi	r26, 0xEC	; 236
    31b0:	b4 ef       	ldi	r27, 0xF4	; 244
    31b2:	a5 01       	movw	r20, r10
    31b4:	94 01       	movw	r18, r8
    31b6:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__mulohisi3>
    31ba:	dc 01       	movw	r26, r24
    31bc:	cb 01       	movw	r24, r22
    31be:	8c 0d       	add	r24, r12
    31c0:	9d 1d       	adc	r25, r13
    31c2:	ae 1d       	adc	r26, r14
    31c4:	bf 1d       	adc	r27, r15
    31c6:	b7 ff       	sbrs	r27, 7
    31c8:	03 c0       	rjmp	.+6      	; 0x31d0 <do_rand+0x72>
    31ca:	01 97       	sbiw	r24, 0x01	; 1
    31cc:	a1 09       	sbc	r26, r1
    31ce:	b0 48       	sbci	r27, 0x80	; 128
    31d0:	88 83       	st	Y, r24
    31d2:	99 83       	std	Y+1, r25	; 0x01
    31d4:	aa 83       	std	Y+2, r26	; 0x02
    31d6:	bb 83       	std	Y+3, r27	; 0x03
    31d8:	9f 77       	andi	r25, 0x7F	; 127
    31da:	df 91       	pop	r29
    31dc:	cf 91       	pop	r28
    31de:	ff 90       	pop	r15
    31e0:	ef 90       	pop	r14
    31e2:	df 90       	pop	r13
    31e4:	cf 90       	pop	r12
    31e6:	bf 90       	pop	r11
    31e8:	af 90       	pop	r10
    31ea:	9f 90       	pop	r9
    31ec:	8f 90       	pop	r8
    31ee:	08 95       	ret

000031f0 <rand_r>:
    31f0:	0e 94 af 18 	call	0x315e	; 0x315e <do_rand>
    31f4:	08 95       	ret

000031f6 <rand>:
    31f6:	86 e0       	ldi	r24, 0x06	; 6
    31f8:	91 e0       	ldi	r25, 0x01	; 1
    31fa:	0e 94 af 18 	call	0x315e	; 0x315e <do_rand>
    31fe:	08 95       	ret

00003200 <srand>:
    3200:	a0 e0       	ldi	r26, 0x00	; 0
    3202:	b0 e0       	ldi	r27, 0x00	; 0
    3204:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    3208:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    320c:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    3210:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    3214:	08 95       	ret

00003216 <realloc>:
    3216:	a0 e0       	ldi	r26, 0x00	; 0
    3218:	b0 e0       	ldi	r27, 0x00	; 0
    321a:	e1 e1       	ldi	r30, 0x11	; 17
    321c:	f9 e1       	ldi	r31, 0x19	; 25
    321e:	0c 94 d1 1c 	jmp	0x39a2	; 0x39a2 <__prologue_saves__+0x8>
    3222:	ec 01       	movw	r28, r24
    3224:	00 97       	sbiw	r24, 0x00	; 0
    3226:	21 f4       	brne	.+8      	; 0x3230 <realloc+0x1a>
    3228:	cb 01       	movw	r24, r22
    322a:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <malloc>
    322e:	b4 c0       	rjmp	.+360    	; 0x3398 <realloc+0x182>
    3230:	fc 01       	movw	r30, r24
    3232:	e6 0f       	add	r30, r22
    3234:	f7 1f       	adc	r31, r23
    3236:	9c 01       	movw	r18, r24
    3238:	22 50       	subi	r18, 0x02	; 2
    323a:	31 09       	sbc	r19, r1
    323c:	e2 17       	cp	r30, r18
    323e:	f3 07       	cpc	r31, r19
    3240:	08 f4       	brcc	.+2      	; 0x3244 <realloc+0x2e>
    3242:	a8 c0       	rjmp	.+336    	; 0x3394 <realloc+0x17e>
    3244:	d9 01       	movw	r26, r18
    3246:	0d 91       	ld	r16, X+
    3248:	1c 91       	ld	r17, X
    324a:	11 97       	sbiw	r26, 0x01	; 1
    324c:	06 17       	cp	r16, r22
    324e:	17 07       	cpc	r17, r23
    3250:	b0 f0       	brcs	.+44     	; 0x327e <realloc+0x68>
    3252:	05 30       	cpi	r16, 0x05	; 5
    3254:	11 05       	cpc	r17, r1
    3256:	08 f4       	brcc	.+2      	; 0x325a <realloc+0x44>
    3258:	9b c0       	rjmp	.+310    	; 0x3390 <realloc+0x17a>
    325a:	c8 01       	movw	r24, r16
    325c:	04 97       	sbiw	r24, 0x04	; 4
    325e:	86 17       	cp	r24, r22
    3260:	97 07       	cpc	r25, r23
    3262:	08 f4       	brcc	.+2      	; 0x3266 <realloc+0x50>
    3264:	95 c0       	rjmp	.+298    	; 0x3390 <realloc+0x17a>
    3266:	02 50       	subi	r16, 0x02	; 2
    3268:	11 09       	sbc	r17, r1
    326a:	06 1b       	sub	r16, r22
    326c:	17 0b       	sbc	r17, r23
    326e:	01 93       	st	Z+, r16
    3270:	11 93       	st	Z+, r17
    3272:	6d 93       	st	X+, r22
    3274:	7c 93       	st	X, r23
    3276:	cf 01       	movw	r24, r30
    3278:	0e 94 26 18 	call	0x304c	; 0x304c <free>
    327c:	89 c0       	rjmp	.+274    	; 0x3390 <realloc+0x17a>
    327e:	5b 01       	movw	r10, r22
    3280:	a0 1a       	sub	r10, r16
    3282:	b1 0a       	sbc	r11, r17
    3284:	4c 01       	movw	r8, r24
    3286:	80 0e       	add	r8, r16
    3288:	91 1e       	adc	r9, r17
    328a:	a0 91 4d 03 	lds	r26, 0x034D	; 0x80034d <__flp>
    328e:	b0 91 4e 03 	lds	r27, 0x034E	; 0x80034e <__flp+0x1>
    3292:	61 2c       	mov	r6, r1
    3294:	71 2c       	mov	r7, r1
    3296:	e1 2c       	mov	r14, r1
    3298:	f1 2c       	mov	r15, r1
    329a:	10 97       	sbiw	r26, 0x00	; 0
    329c:	09 f4       	brne	.+2      	; 0x32a0 <realloc+0x8a>
    329e:	46 c0       	rjmp	.+140    	; 0x332c <realloc+0x116>
    32a0:	8d 91       	ld	r24, X+
    32a2:	9c 91       	ld	r25, X
    32a4:	11 97       	sbiw	r26, 0x01	; 1
    32a6:	a8 15       	cp	r26, r8
    32a8:	b9 05       	cpc	r27, r9
    32aa:	b1 f5       	brne	.+108    	; 0x3318 <realloc+0x102>
    32ac:	6c 01       	movw	r12, r24
    32ae:	42 e0       	ldi	r20, 0x02	; 2
    32b0:	c4 0e       	add	r12, r20
    32b2:	d1 1c       	adc	r13, r1
    32b4:	ca 14       	cp	r12, r10
    32b6:	db 04       	cpc	r13, r11
    32b8:	78 f1       	brcs	.+94     	; 0x3318 <realloc+0x102>
    32ba:	4c 01       	movw	r8, r24
    32bc:	8a 18       	sub	r8, r10
    32be:	9b 08       	sbc	r9, r11
    32c0:	64 01       	movw	r12, r8
    32c2:	42 e0       	ldi	r20, 0x02	; 2
    32c4:	c4 0e       	add	r12, r20
    32c6:	d1 1c       	adc	r13, r1
    32c8:	12 96       	adiw	r26, 0x02	; 2
    32ca:	bc 90       	ld	r11, X
    32cc:	12 97       	sbiw	r26, 0x02	; 2
    32ce:	13 96       	adiw	r26, 0x03	; 3
    32d0:	ac 91       	ld	r26, X
    32d2:	b5 e0       	ldi	r27, 0x05	; 5
    32d4:	cb 16       	cp	r12, r27
    32d6:	d1 04       	cpc	r13, r1
    32d8:	40 f0       	brcs	.+16     	; 0x32ea <realloc+0xd4>
    32da:	b2 82       	std	Z+2, r11	; 0x02
    32dc:	a3 83       	std	Z+3, r26	; 0x03
    32de:	91 82       	std	Z+1, r9	; 0x01
    32e0:	80 82       	st	Z, r8
    32e2:	d9 01       	movw	r26, r18
    32e4:	6d 93       	st	X+, r22
    32e6:	7c 93       	st	X, r23
    32e8:	09 c0       	rjmp	.+18     	; 0x32fc <realloc+0xe6>
    32ea:	0e 5f       	subi	r16, 0xFE	; 254
    32ec:	1f 4f       	sbci	r17, 0xFF	; 255
    32ee:	80 0f       	add	r24, r16
    32f0:	91 1f       	adc	r25, r17
    32f2:	f9 01       	movw	r30, r18
    32f4:	91 83       	std	Z+1, r25	; 0x01
    32f6:	80 83       	st	Z, r24
    32f8:	eb 2d       	mov	r30, r11
    32fa:	fa 2f       	mov	r31, r26
    32fc:	e1 14       	cp	r14, r1
    32fe:	f1 04       	cpc	r15, r1
    3300:	31 f0       	breq	.+12     	; 0x330e <realloc+0xf8>
    3302:	d7 01       	movw	r26, r14
    3304:	13 96       	adiw	r26, 0x03	; 3
    3306:	fc 93       	st	X, r31
    3308:	ee 93       	st	-X, r30
    330a:	12 97       	sbiw	r26, 0x02	; 2
    330c:	41 c0       	rjmp	.+130    	; 0x3390 <realloc+0x17a>
    330e:	f0 93 4e 03 	sts	0x034E, r31	; 0x80034e <__flp+0x1>
    3312:	e0 93 4d 03 	sts	0x034D, r30	; 0x80034d <__flp>
    3316:	3c c0       	rjmp	.+120    	; 0x3390 <realloc+0x17a>
    3318:	68 16       	cp	r6, r24
    331a:	79 06       	cpc	r7, r25
    331c:	08 f4       	brcc	.+2      	; 0x3320 <realloc+0x10a>
    331e:	3c 01       	movw	r6, r24
    3320:	7d 01       	movw	r14, r26
    3322:	12 96       	adiw	r26, 0x02	; 2
    3324:	0d 90       	ld	r0, X+
    3326:	bc 91       	ld	r27, X
    3328:	a0 2d       	mov	r26, r0
    332a:	b7 cf       	rjmp	.-146    	; 0x329a <realloc+0x84>
    332c:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <__brkval>
    3330:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <__brkval+0x1>
    3334:	88 16       	cp	r8, r24
    3336:	99 06       	cpc	r9, r25
    3338:	e1 f4       	brne	.+56     	; 0x3372 <realloc+0x15c>
    333a:	66 16       	cp	r6, r22
    333c:	77 06       	cpc	r7, r23
    333e:	c8 f4       	brcc	.+50     	; 0x3372 <realloc+0x15c>
    3340:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3344:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3348:	00 97       	sbiw	r24, 0x00	; 0
    334a:	41 f4       	brne	.+16     	; 0x335c <realloc+0x146>
    334c:	8d b7       	in	r24, 0x3d	; 61
    334e:	9e b7       	in	r25, 0x3e	; 62
    3350:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3354:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3358:	84 1b       	sub	r24, r20
    335a:	95 0b       	sbc	r25, r21
    335c:	e8 17       	cp	r30, r24
    335e:	f9 07       	cpc	r31, r25
    3360:	c8 f4       	brcc	.+50     	; 0x3394 <realloc+0x17e>
    3362:	f0 93 4c 03 	sts	0x034C, r31	; 0x80034c <__brkval+0x1>
    3366:	e0 93 4b 03 	sts	0x034B, r30	; 0x80034b <__brkval>
    336a:	f9 01       	movw	r30, r18
    336c:	71 83       	std	Z+1, r23	; 0x01
    336e:	60 83       	st	Z, r22
    3370:	0f c0       	rjmp	.+30     	; 0x3390 <realloc+0x17a>
    3372:	cb 01       	movw	r24, r22
    3374:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <malloc>
    3378:	7c 01       	movw	r14, r24
    337a:	00 97       	sbiw	r24, 0x00	; 0
    337c:	59 f0       	breq	.+22     	; 0x3394 <realloc+0x17e>
    337e:	a8 01       	movw	r20, r16
    3380:	be 01       	movw	r22, r28
    3382:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <memcpy>
    3386:	ce 01       	movw	r24, r28
    3388:	0e 94 26 18 	call	0x304c	; 0x304c <free>
    338c:	c7 01       	movw	r24, r14
    338e:	04 c0       	rjmp	.+8      	; 0x3398 <realloc+0x182>
    3390:	ce 01       	movw	r24, r28
    3392:	02 c0       	rjmp	.+4      	; 0x3398 <realloc+0x182>
    3394:	80 e0       	ldi	r24, 0x00	; 0
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	cd b7       	in	r28, 0x3d	; 61
    339a:	de b7       	in	r29, 0x3e	; 62
    339c:	ee e0       	ldi	r30, 0x0E	; 14
    339e:	0c 94 ed 1c 	jmp	0x39da	; 0x39da <__epilogue_restores__+0x8>

000033a2 <memcpy>:
    33a2:	fb 01       	movw	r30, r22
    33a4:	dc 01       	movw	r26, r24
    33a6:	02 c0       	rjmp	.+4      	; 0x33ac <memcpy+0xa>
    33a8:	01 90       	ld	r0, Z+
    33aa:	0d 92       	st	X+, r0
    33ac:	41 50       	subi	r20, 0x01	; 1
    33ae:	50 40       	sbci	r21, 0x00	; 0
    33b0:	d8 f7       	brcc	.-10     	; 0x33a8 <memcpy+0x6>
    33b2:	08 95       	ret

000033b4 <snprintf>:
    33b4:	ae e0       	ldi	r26, 0x0E	; 14
    33b6:	b0 e0       	ldi	r27, 0x00	; 0
    33b8:	e0 ee       	ldi	r30, 0xE0	; 224
    33ba:	f9 e1       	ldi	r31, 0x19	; 25
    33bc:	0c 94 db 1c 	jmp	0x39b6	; 0x39b6 <__prologue_saves__+0x1c>
    33c0:	0d 89       	ldd	r16, Y+21	; 0x15
    33c2:	1e 89       	ldd	r17, Y+22	; 0x16
    33c4:	8f 89       	ldd	r24, Y+23	; 0x17
    33c6:	98 8d       	ldd	r25, Y+24	; 0x18
    33c8:	26 e0       	ldi	r18, 0x06	; 6
    33ca:	2c 83       	std	Y+4, r18	; 0x04
    33cc:	1a 83       	std	Y+2, r17	; 0x02
    33ce:	09 83       	std	Y+1, r16	; 0x01
    33d0:	97 ff       	sbrs	r25, 7
    33d2:	02 c0       	rjmp	.+4      	; 0x33d8 <snprintf+0x24>
    33d4:	80 e0       	ldi	r24, 0x00	; 0
    33d6:	90 e8       	ldi	r25, 0x80	; 128
    33d8:	01 97       	sbiw	r24, 0x01	; 1
    33da:	9e 83       	std	Y+6, r25	; 0x06
    33dc:	8d 83       	std	Y+5, r24	; 0x05
    33de:	ae 01       	movw	r20, r28
    33e0:	45 5e       	subi	r20, 0xE5	; 229
    33e2:	5f 4f       	sbci	r21, 0xFF	; 255
    33e4:	69 8d       	ldd	r22, Y+25	; 0x19
    33e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33e8:	ce 01       	movw	r24, r28
    33ea:	01 96       	adiw	r24, 0x01	; 1
    33ec:	0e 94 0a 1a 	call	0x3414	; 0x3414 <vfprintf>
    33f0:	4d 81       	ldd	r20, Y+5	; 0x05
    33f2:	5e 81       	ldd	r21, Y+6	; 0x06
    33f4:	57 fd       	sbrc	r21, 7
    33f6:	0a c0       	rjmp	.+20     	; 0x340c <snprintf+0x58>
    33f8:	2f 81       	ldd	r18, Y+7	; 0x07
    33fa:	38 85       	ldd	r19, Y+8	; 0x08
    33fc:	42 17       	cp	r20, r18
    33fe:	53 07       	cpc	r21, r19
    3400:	0c f4       	brge	.+2      	; 0x3404 <snprintf+0x50>
    3402:	9a 01       	movw	r18, r20
    3404:	f8 01       	movw	r30, r16
    3406:	e2 0f       	add	r30, r18
    3408:	f3 1f       	adc	r31, r19
    340a:	10 82       	st	Z, r1
    340c:	2e 96       	adiw	r28, 0x0e	; 14
    340e:	e4 e0       	ldi	r30, 0x04	; 4
    3410:	0c 94 f7 1c 	jmp	0x39ee	; 0x39ee <__epilogue_restores__+0x1c>

00003414 <vfprintf>:
    3414:	ab e0       	ldi	r26, 0x0B	; 11
    3416:	b0 e0       	ldi	r27, 0x00	; 0
    3418:	e0 e1       	ldi	r30, 0x10	; 16
    341a:	fa e1       	ldi	r31, 0x1A	; 26
    341c:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <__prologue_saves__>
    3420:	6c 01       	movw	r12, r24
    3422:	7b 01       	movw	r14, r22
    3424:	8a 01       	movw	r16, r20
    3426:	fc 01       	movw	r30, r24
    3428:	17 82       	std	Z+7, r1	; 0x07
    342a:	16 82       	std	Z+6, r1	; 0x06
    342c:	83 81       	ldd	r24, Z+3	; 0x03
    342e:	81 ff       	sbrs	r24, 1
    3430:	cc c1       	rjmp	.+920    	; 0x37ca <vfprintf+0x3b6>
    3432:	ce 01       	movw	r24, r28
    3434:	01 96       	adiw	r24, 0x01	; 1
    3436:	3c 01       	movw	r6, r24
    3438:	f6 01       	movw	r30, r12
    343a:	93 81       	ldd	r25, Z+3	; 0x03
    343c:	f7 01       	movw	r30, r14
    343e:	93 fd       	sbrc	r25, 3
    3440:	85 91       	lpm	r24, Z+
    3442:	93 ff       	sbrs	r25, 3
    3444:	81 91       	ld	r24, Z+
    3446:	7f 01       	movw	r14, r30
    3448:	88 23       	and	r24, r24
    344a:	09 f4       	brne	.+2      	; 0x344e <vfprintf+0x3a>
    344c:	ba c1       	rjmp	.+884    	; 0x37c2 <vfprintf+0x3ae>
    344e:	85 32       	cpi	r24, 0x25	; 37
    3450:	39 f4       	brne	.+14     	; 0x3460 <vfprintf+0x4c>
    3452:	93 fd       	sbrc	r25, 3
    3454:	85 91       	lpm	r24, Z+
    3456:	93 ff       	sbrs	r25, 3
    3458:	81 91       	ld	r24, Z+
    345a:	7f 01       	movw	r14, r30
    345c:	85 32       	cpi	r24, 0x25	; 37
    345e:	29 f4       	brne	.+10     	; 0x346a <vfprintf+0x56>
    3460:	b6 01       	movw	r22, r12
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	0e 94 01 1c 	call	0x3802	; 0x3802 <fputc>
    3468:	e7 cf       	rjmp	.-50     	; 0x3438 <vfprintf+0x24>
    346a:	91 2c       	mov	r9, r1
    346c:	21 2c       	mov	r2, r1
    346e:	31 2c       	mov	r3, r1
    3470:	ff e1       	ldi	r31, 0x1F	; 31
    3472:	f3 15       	cp	r31, r3
    3474:	d8 f0       	brcs	.+54     	; 0x34ac <vfprintf+0x98>
    3476:	8b 32       	cpi	r24, 0x2B	; 43
    3478:	79 f0       	breq	.+30     	; 0x3498 <vfprintf+0x84>
    347a:	38 f4       	brcc	.+14     	; 0x348a <vfprintf+0x76>
    347c:	80 32       	cpi	r24, 0x20	; 32
    347e:	79 f0       	breq	.+30     	; 0x349e <vfprintf+0x8a>
    3480:	83 32       	cpi	r24, 0x23	; 35
    3482:	a1 f4       	brne	.+40     	; 0x34ac <vfprintf+0x98>
    3484:	23 2d       	mov	r18, r3
    3486:	20 61       	ori	r18, 0x10	; 16
    3488:	1d c0       	rjmp	.+58     	; 0x34c4 <vfprintf+0xb0>
    348a:	8d 32       	cpi	r24, 0x2D	; 45
    348c:	61 f0       	breq	.+24     	; 0x34a6 <vfprintf+0x92>
    348e:	80 33       	cpi	r24, 0x30	; 48
    3490:	69 f4       	brne	.+26     	; 0x34ac <vfprintf+0x98>
    3492:	23 2d       	mov	r18, r3
    3494:	21 60       	ori	r18, 0x01	; 1
    3496:	16 c0       	rjmp	.+44     	; 0x34c4 <vfprintf+0xb0>
    3498:	83 2d       	mov	r24, r3
    349a:	82 60       	ori	r24, 0x02	; 2
    349c:	38 2e       	mov	r3, r24
    349e:	e3 2d       	mov	r30, r3
    34a0:	e4 60       	ori	r30, 0x04	; 4
    34a2:	3e 2e       	mov	r3, r30
    34a4:	2a c0       	rjmp	.+84     	; 0x34fa <vfprintf+0xe6>
    34a6:	f3 2d       	mov	r31, r3
    34a8:	f8 60       	ori	r31, 0x08	; 8
    34aa:	1d c0       	rjmp	.+58     	; 0x34e6 <vfprintf+0xd2>
    34ac:	37 fc       	sbrc	r3, 7
    34ae:	2d c0       	rjmp	.+90     	; 0x350a <vfprintf+0xf6>
    34b0:	20 ed       	ldi	r18, 0xD0	; 208
    34b2:	28 0f       	add	r18, r24
    34b4:	2a 30       	cpi	r18, 0x0A	; 10
    34b6:	40 f0       	brcs	.+16     	; 0x34c8 <vfprintf+0xb4>
    34b8:	8e 32       	cpi	r24, 0x2E	; 46
    34ba:	b9 f4       	brne	.+46     	; 0x34ea <vfprintf+0xd6>
    34bc:	36 fc       	sbrc	r3, 6
    34be:	81 c1       	rjmp	.+770    	; 0x37c2 <vfprintf+0x3ae>
    34c0:	23 2d       	mov	r18, r3
    34c2:	20 64       	ori	r18, 0x40	; 64
    34c4:	32 2e       	mov	r3, r18
    34c6:	19 c0       	rjmp	.+50     	; 0x34fa <vfprintf+0xe6>
    34c8:	36 fe       	sbrs	r3, 6
    34ca:	06 c0       	rjmp	.+12     	; 0x34d8 <vfprintf+0xc4>
    34cc:	8a e0       	ldi	r24, 0x0A	; 10
    34ce:	98 9e       	mul	r9, r24
    34d0:	20 0d       	add	r18, r0
    34d2:	11 24       	eor	r1, r1
    34d4:	92 2e       	mov	r9, r18
    34d6:	11 c0       	rjmp	.+34     	; 0x34fa <vfprintf+0xe6>
    34d8:	ea e0       	ldi	r30, 0x0A	; 10
    34da:	2e 9e       	mul	r2, r30
    34dc:	20 0d       	add	r18, r0
    34de:	11 24       	eor	r1, r1
    34e0:	22 2e       	mov	r2, r18
    34e2:	f3 2d       	mov	r31, r3
    34e4:	f0 62       	ori	r31, 0x20	; 32
    34e6:	3f 2e       	mov	r3, r31
    34e8:	08 c0       	rjmp	.+16     	; 0x34fa <vfprintf+0xe6>
    34ea:	8c 36       	cpi	r24, 0x6C	; 108
    34ec:	21 f4       	brne	.+8      	; 0x34f6 <vfprintf+0xe2>
    34ee:	83 2d       	mov	r24, r3
    34f0:	80 68       	ori	r24, 0x80	; 128
    34f2:	38 2e       	mov	r3, r24
    34f4:	02 c0       	rjmp	.+4      	; 0x34fa <vfprintf+0xe6>
    34f6:	88 36       	cpi	r24, 0x68	; 104
    34f8:	41 f4       	brne	.+16     	; 0x350a <vfprintf+0xf6>
    34fa:	f7 01       	movw	r30, r14
    34fc:	93 fd       	sbrc	r25, 3
    34fe:	85 91       	lpm	r24, Z+
    3500:	93 ff       	sbrs	r25, 3
    3502:	81 91       	ld	r24, Z+
    3504:	7f 01       	movw	r14, r30
    3506:	81 11       	cpse	r24, r1
    3508:	b3 cf       	rjmp	.-154    	; 0x3470 <vfprintf+0x5c>
    350a:	98 2f       	mov	r25, r24
    350c:	9f 7d       	andi	r25, 0xDF	; 223
    350e:	95 54       	subi	r25, 0x45	; 69
    3510:	93 30       	cpi	r25, 0x03	; 3
    3512:	28 f4       	brcc	.+10     	; 0x351e <vfprintf+0x10a>
    3514:	0c 5f       	subi	r16, 0xFC	; 252
    3516:	1f 4f       	sbci	r17, 0xFF	; 255
    3518:	9f e3       	ldi	r25, 0x3F	; 63
    351a:	99 83       	std	Y+1, r25	; 0x01
    351c:	0d c0       	rjmp	.+26     	; 0x3538 <vfprintf+0x124>
    351e:	83 36       	cpi	r24, 0x63	; 99
    3520:	31 f0       	breq	.+12     	; 0x352e <vfprintf+0x11a>
    3522:	83 37       	cpi	r24, 0x73	; 115
    3524:	71 f0       	breq	.+28     	; 0x3542 <vfprintf+0x12e>
    3526:	83 35       	cpi	r24, 0x53	; 83
    3528:	09 f0       	breq	.+2      	; 0x352c <vfprintf+0x118>
    352a:	59 c0       	rjmp	.+178    	; 0x35de <vfprintf+0x1ca>
    352c:	21 c0       	rjmp	.+66     	; 0x3570 <vfprintf+0x15c>
    352e:	f8 01       	movw	r30, r16
    3530:	80 81       	ld	r24, Z
    3532:	89 83       	std	Y+1, r24	; 0x01
    3534:	0e 5f       	subi	r16, 0xFE	; 254
    3536:	1f 4f       	sbci	r17, 0xFF	; 255
    3538:	88 24       	eor	r8, r8
    353a:	83 94       	inc	r8
    353c:	91 2c       	mov	r9, r1
    353e:	53 01       	movw	r10, r6
    3540:	13 c0       	rjmp	.+38     	; 0x3568 <vfprintf+0x154>
    3542:	28 01       	movw	r4, r16
    3544:	f2 e0       	ldi	r31, 0x02	; 2
    3546:	4f 0e       	add	r4, r31
    3548:	51 1c       	adc	r5, r1
    354a:	f8 01       	movw	r30, r16
    354c:	a0 80       	ld	r10, Z
    354e:	b1 80       	ldd	r11, Z+1	; 0x01
    3550:	36 fe       	sbrs	r3, 6
    3552:	03 c0       	rjmp	.+6      	; 0x355a <vfprintf+0x146>
    3554:	69 2d       	mov	r22, r9
    3556:	70 e0       	ldi	r23, 0x00	; 0
    3558:	02 c0       	rjmp	.+4      	; 0x355e <vfprintf+0x14a>
    355a:	6f ef       	ldi	r22, 0xFF	; 255
    355c:	7f ef       	ldi	r23, 0xFF	; 255
    355e:	c5 01       	movw	r24, r10
    3560:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <strnlen>
    3564:	4c 01       	movw	r8, r24
    3566:	82 01       	movw	r16, r4
    3568:	f3 2d       	mov	r31, r3
    356a:	ff 77       	andi	r31, 0x7F	; 127
    356c:	3f 2e       	mov	r3, r31
    356e:	16 c0       	rjmp	.+44     	; 0x359c <vfprintf+0x188>
    3570:	28 01       	movw	r4, r16
    3572:	22 e0       	ldi	r18, 0x02	; 2
    3574:	42 0e       	add	r4, r18
    3576:	51 1c       	adc	r5, r1
    3578:	f8 01       	movw	r30, r16
    357a:	a0 80       	ld	r10, Z
    357c:	b1 80       	ldd	r11, Z+1	; 0x01
    357e:	36 fe       	sbrs	r3, 6
    3580:	03 c0       	rjmp	.+6      	; 0x3588 <vfprintf+0x174>
    3582:	69 2d       	mov	r22, r9
    3584:	70 e0       	ldi	r23, 0x00	; 0
    3586:	02 c0       	rjmp	.+4      	; 0x358c <vfprintf+0x178>
    3588:	6f ef       	ldi	r22, 0xFF	; 255
    358a:	7f ef       	ldi	r23, 0xFF	; 255
    358c:	c5 01       	movw	r24, r10
    358e:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <strnlen_P>
    3592:	4c 01       	movw	r8, r24
    3594:	f3 2d       	mov	r31, r3
    3596:	f0 68       	ori	r31, 0x80	; 128
    3598:	3f 2e       	mov	r3, r31
    359a:	82 01       	movw	r16, r4
    359c:	33 fc       	sbrc	r3, 3
    359e:	1b c0       	rjmp	.+54     	; 0x35d6 <vfprintf+0x1c2>
    35a0:	82 2d       	mov	r24, r2
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	88 16       	cp	r8, r24
    35a6:	99 06       	cpc	r9, r25
    35a8:	b0 f4       	brcc	.+44     	; 0x35d6 <vfprintf+0x1c2>
    35aa:	b6 01       	movw	r22, r12
    35ac:	80 e2       	ldi	r24, 0x20	; 32
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	0e 94 01 1c 	call	0x3802	; 0x3802 <fputc>
    35b4:	2a 94       	dec	r2
    35b6:	f4 cf       	rjmp	.-24     	; 0x35a0 <vfprintf+0x18c>
    35b8:	f5 01       	movw	r30, r10
    35ba:	37 fc       	sbrc	r3, 7
    35bc:	85 91       	lpm	r24, Z+
    35be:	37 fe       	sbrs	r3, 7
    35c0:	81 91       	ld	r24, Z+
    35c2:	5f 01       	movw	r10, r30
    35c4:	b6 01       	movw	r22, r12
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	0e 94 01 1c 	call	0x3802	; 0x3802 <fputc>
    35cc:	21 10       	cpse	r2, r1
    35ce:	2a 94       	dec	r2
    35d0:	21 e0       	ldi	r18, 0x01	; 1
    35d2:	82 1a       	sub	r8, r18
    35d4:	91 08       	sbc	r9, r1
    35d6:	81 14       	cp	r8, r1
    35d8:	91 04       	cpc	r9, r1
    35da:	71 f7       	brne	.-36     	; 0x35b8 <vfprintf+0x1a4>
    35dc:	e8 c0       	rjmp	.+464    	; 0x37ae <vfprintf+0x39a>
    35de:	84 36       	cpi	r24, 0x64	; 100
    35e0:	11 f0       	breq	.+4      	; 0x35e6 <vfprintf+0x1d2>
    35e2:	89 36       	cpi	r24, 0x69	; 105
    35e4:	41 f5       	brne	.+80     	; 0x3636 <vfprintf+0x222>
    35e6:	f8 01       	movw	r30, r16
    35e8:	37 fe       	sbrs	r3, 7
    35ea:	07 c0       	rjmp	.+14     	; 0x35fa <vfprintf+0x1e6>
    35ec:	60 81       	ld	r22, Z
    35ee:	71 81       	ldd	r23, Z+1	; 0x01
    35f0:	82 81       	ldd	r24, Z+2	; 0x02
    35f2:	93 81       	ldd	r25, Z+3	; 0x03
    35f4:	0c 5f       	subi	r16, 0xFC	; 252
    35f6:	1f 4f       	sbci	r17, 0xFF	; 255
    35f8:	08 c0       	rjmp	.+16     	; 0x360a <vfprintf+0x1f6>
    35fa:	60 81       	ld	r22, Z
    35fc:	71 81       	ldd	r23, Z+1	; 0x01
    35fe:	07 2e       	mov	r0, r23
    3600:	00 0c       	add	r0, r0
    3602:	88 0b       	sbc	r24, r24
    3604:	99 0b       	sbc	r25, r25
    3606:	0e 5f       	subi	r16, 0xFE	; 254
    3608:	1f 4f       	sbci	r17, 0xFF	; 255
    360a:	f3 2d       	mov	r31, r3
    360c:	ff 76       	andi	r31, 0x6F	; 111
    360e:	3f 2e       	mov	r3, r31
    3610:	97 ff       	sbrs	r25, 7
    3612:	09 c0       	rjmp	.+18     	; 0x3626 <vfprintf+0x212>
    3614:	90 95       	com	r25
    3616:	80 95       	com	r24
    3618:	70 95       	com	r23
    361a:	61 95       	neg	r22
    361c:	7f 4f       	sbci	r23, 0xFF	; 255
    361e:	8f 4f       	sbci	r24, 0xFF	; 255
    3620:	9f 4f       	sbci	r25, 0xFF	; 255
    3622:	f0 68       	ori	r31, 0x80	; 128
    3624:	3f 2e       	mov	r3, r31
    3626:	2a e0       	ldi	r18, 0x0A	; 10
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	a3 01       	movw	r20, r6
    362c:	0e 94 3d 1c 	call	0x387a	; 0x387a <__ultoa_invert>
    3630:	88 2e       	mov	r8, r24
    3632:	86 18       	sub	r8, r6
    3634:	45 c0       	rjmp	.+138    	; 0x36c0 <vfprintf+0x2ac>
    3636:	85 37       	cpi	r24, 0x75	; 117
    3638:	31 f4       	brne	.+12     	; 0x3646 <vfprintf+0x232>
    363a:	23 2d       	mov	r18, r3
    363c:	2f 7e       	andi	r18, 0xEF	; 239
    363e:	b2 2e       	mov	r11, r18
    3640:	2a e0       	ldi	r18, 0x0A	; 10
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	25 c0       	rjmp	.+74     	; 0x3690 <vfprintf+0x27c>
    3646:	93 2d       	mov	r25, r3
    3648:	99 7f       	andi	r25, 0xF9	; 249
    364a:	b9 2e       	mov	r11, r25
    364c:	8f 36       	cpi	r24, 0x6F	; 111
    364e:	c1 f0       	breq	.+48     	; 0x3680 <vfprintf+0x26c>
    3650:	18 f4       	brcc	.+6      	; 0x3658 <vfprintf+0x244>
    3652:	88 35       	cpi	r24, 0x58	; 88
    3654:	79 f0       	breq	.+30     	; 0x3674 <vfprintf+0x260>
    3656:	b5 c0       	rjmp	.+362    	; 0x37c2 <vfprintf+0x3ae>
    3658:	80 37       	cpi	r24, 0x70	; 112
    365a:	19 f0       	breq	.+6      	; 0x3662 <vfprintf+0x24e>
    365c:	88 37       	cpi	r24, 0x78	; 120
    365e:	21 f0       	breq	.+8      	; 0x3668 <vfprintf+0x254>
    3660:	b0 c0       	rjmp	.+352    	; 0x37c2 <vfprintf+0x3ae>
    3662:	e9 2f       	mov	r30, r25
    3664:	e0 61       	ori	r30, 0x10	; 16
    3666:	be 2e       	mov	r11, r30
    3668:	b4 fe       	sbrs	r11, 4
    366a:	0d c0       	rjmp	.+26     	; 0x3686 <vfprintf+0x272>
    366c:	fb 2d       	mov	r31, r11
    366e:	f4 60       	ori	r31, 0x04	; 4
    3670:	bf 2e       	mov	r11, r31
    3672:	09 c0       	rjmp	.+18     	; 0x3686 <vfprintf+0x272>
    3674:	34 fe       	sbrs	r3, 4
    3676:	0a c0       	rjmp	.+20     	; 0x368c <vfprintf+0x278>
    3678:	29 2f       	mov	r18, r25
    367a:	26 60       	ori	r18, 0x06	; 6
    367c:	b2 2e       	mov	r11, r18
    367e:	06 c0       	rjmp	.+12     	; 0x368c <vfprintf+0x278>
    3680:	28 e0       	ldi	r18, 0x08	; 8
    3682:	30 e0       	ldi	r19, 0x00	; 0
    3684:	05 c0       	rjmp	.+10     	; 0x3690 <vfprintf+0x27c>
    3686:	20 e1       	ldi	r18, 0x10	; 16
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	02 c0       	rjmp	.+4      	; 0x3690 <vfprintf+0x27c>
    368c:	20 e1       	ldi	r18, 0x10	; 16
    368e:	32 e0       	ldi	r19, 0x02	; 2
    3690:	f8 01       	movw	r30, r16
    3692:	b7 fe       	sbrs	r11, 7
    3694:	07 c0       	rjmp	.+14     	; 0x36a4 <vfprintf+0x290>
    3696:	60 81       	ld	r22, Z
    3698:	71 81       	ldd	r23, Z+1	; 0x01
    369a:	82 81       	ldd	r24, Z+2	; 0x02
    369c:	93 81       	ldd	r25, Z+3	; 0x03
    369e:	0c 5f       	subi	r16, 0xFC	; 252
    36a0:	1f 4f       	sbci	r17, 0xFF	; 255
    36a2:	06 c0       	rjmp	.+12     	; 0x36b0 <vfprintf+0x29c>
    36a4:	60 81       	ld	r22, Z
    36a6:	71 81       	ldd	r23, Z+1	; 0x01
    36a8:	80 e0       	ldi	r24, 0x00	; 0
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	0e 5f       	subi	r16, 0xFE	; 254
    36ae:	1f 4f       	sbci	r17, 0xFF	; 255
    36b0:	a3 01       	movw	r20, r6
    36b2:	0e 94 3d 1c 	call	0x387a	; 0x387a <__ultoa_invert>
    36b6:	88 2e       	mov	r8, r24
    36b8:	86 18       	sub	r8, r6
    36ba:	fb 2d       	mov	r31, r11
    36bc:	ff 77       	andi	r31, 0x7F	; 127
    36be:	3f 2e       	mov	r3, r31
    36c0:	36 fe       	sbrs	r3, 6
    36c2:	0d c0       	rjmp	.+26     	; 0x36de <vfprintf+0x2ca>
    36c4:	23 2d       	mov	r18, r3
    36c6:	2e 7f       	andi	r18, 0xFE	; 254
    36c8:	a2 2e       	mov	r10, r18
    36ca:	89 14       	cp	r8, r9
    36cc:	58 f4       	brcc	.+22     	; 0x36e4 <vfprintf+0x2d0>
    36ce:	34 fe       	sbrs	r3, 4
    36d0:	0b c0       	rjmp	.+22     	; 0x36e8 <vfprintf+0x2d4>
    36d2:	32 fc       	sbrc	r3, 2
    36d4:	09 c0       	rjmp	.+18     	; 0x36e8 <vfprintf+0x2d4>
    36d6:	83 2d       	mov	r24, r3
    36d8:	8e 7e       	andi	r24, 0xEE	; 238
    36da:	a8 2e       	mov	r10, r24
    36dc:	05 c0       	rjmp	.+10     	; 0x36e8 <vfprintf+0x2d4>
    36de:	b8 2c       	mov	r11, r8
    36e0:	a3 2c       	mov	r10, r3
    36e2:	03 c0       	rjmp	.+6      	; 0x36ea <vfprintf+0x2d6>
    36e4:	b8 2c       	mov	r11, r8
    36e6:	01 c0       	rjmp	.+2      	; 0x36ea <vfprintf+0x2d6>
    36e8:	b9 2c       	mov	r11, r9
    36ea:	a4 fe       	sbrs	r10, 4
    36ec:	0f c0       	rjmp	.+30     	; 0x370c <vfprintf+0x2f8>
    36ee:	fe 01       	movw	r30, r28
    36f0:	e8 0d       	add	r30, r8
    36f2:	f1 1d       	adc	r31, r1
    36f4:	80 81       	ld	r24, Z
    36f6:	80 33       	cpi	r24, 0x30	; 48
    36f8:	21 f4       	brne	.+8      	; 0x3702 <vfprintf+0x2ee>
    36fa:	9a 2d       	mov	r25, r10
    36fc:	99 7e       	andi	r25, 0xE9	; 233
    36fe:	a9 2e       	mov	r10, r25
    3700:	09 c0       	rjmp	.+18     	; 0x3714 <vfprintf+0x300>
    3702:	a2 fe       	sbrs	r10, 2
    3704:	06 c0       	rjmp	.+12     	; 0x3712 <vfprintf+0x2fe>
    3706:	b3 94       	inc	r11
    3708:	b3 94       	inc	r11
    370a:	04 c0       	rjmp	.+8      	; 0x3714 <vfprintf+0x300>
    370c:	8a 2d       	mov	r24, r10
    370e:	86 78       	andi	r24, 0x86	; 134
    3710:	09 f0       	breq	.+2      	; 0x3714 <vfprintf+0x300>
    3712:	b3 94       	inc	r11
    3714:	a3 fc       	sbrc	r10, 3
    3716:	11 c0       	rjmp	.+34     	; 0x373a <vfprintf+0x326>
    3718:	a0 fe       	sbrs	r10, 0
    371a:	06 c0       	rjmp	.+12     	; 0x3728 <vfprintf+0x314>
    371c:	b2 14       	cp	r11, r2
    371e:	88 f4       	brcc	.+34     	; 0x3742 <vfprintf+0x32e>
    3720:	28 0c       	add	r2, r8
    3722:	92 2c       	mov	r9, r2
    3724:	9b 18       	sub	r9, r11
    3726:	0e c0       	rjmp	.+28     	; 0x3744 <vfprintf+0x330>
    3728:	b2 14       	cp	r11, r2
    372a:	60 f4       	brcc	.+24     	; 0x3744 <vfprintf+0x330>
    372c:	b6 01       	movw	r22, r12
    372e:	80 e2       	ldi	r24, 0x20	; 32
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	0e 94 01 1c 	call	0x3802	; 0x3802 <fputc>
    3736:	b3 94       	inc	r11
    3738:	f7 cf       	rjmp	.-18     	; 0x3728 <vfprintf+0x314>
    373a:	b2 14       	cp	r11, r2
    373c:	18 f4       	brcc	.+6      	; 0x3744 <vfprintf+0x330>
    373e:	2b 18       	sub	r2, r11
    3740:	02 c0       	rjmp	.+4      	; 0x3746 <vfprintf+0x332>
    3742:	98 2c       	mov	r9, r8
    3744:	21 2c       	mov	r2, r1
    3746:	a4 fe       	sbrs	r10, 4
    3748:	10 c0       	rjmp	.+32     	; 0x376a <vfprintf+0x356>
    374a:	b6 01       	movw	r22, r12
    374c:	80 e3       	ldi	r24, 0x30	; 48
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	0e 94 01 1c 	call	0x3802	; 0x3802 <fputc>
    3754:	a2 fe       	sbrs	r10, 2
    3756:	17 c0       	rjmp	.+46     	; 0x3786 <vfprintf+0x372>
    3758:	a1 fc       	sbrc	r10, 1
    375a:	03 c0       	rjmp	.+6      	; 0x3762 <vfprintf+0x34e>
    375c:	88 e7       	ldi	r24, 0x78	; 120
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	02 c0       	rjmp	.+4      	; 0x3766 <vfprintf+0x352>
    3762:	88 e5       	ldi	r24, 0x58	; 88
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	b6 01       	movw	r22, r12
    3768:	0c c0       	rjmp	.+24     	; 0x3782 <vfprintf+0x36e>
    376a:	8a 2d       	mov	r24, r10
    376c:	86 78       	andi	r24, 0x86	; 134
    376e:	59 f0       	breq	.+22     	; 0x3786 <vfprintf+0x372>
    3770:	a1 fe       	sbrs	r10, 1
    3772:	02 c0       	rjmp	.+4      	; 0x3778 <vfprintf+0x364>
    3774:	8b e2       	ldi	r24, 0x2B	; 43
    3776:	01 c0       	rjmp	.+2      	; 0x377a <vfprintf+0x366>
    3778:	80 e2       	ldi	r24, 0x20	; 32
    377a:	a7 fc       	sbrc	r10, 7
    377c:	8d e2       	ldi	r24, 0x2D	; 45
    377e:	b6 01       	movw	r22, r12
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	0e 94 01 1c 	call	0x3802	; 0x3802 <fputc>
    3786:	89 14       	cp	r8, r9
    3788:	38 f4       	brcc	.+14     	; 0x3798 <vfprintf+0x384>
    378a:	b6 01       	movw	r22, r12
    378c:	80 e3       	ldi	r24, 0x30	; 48
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	0e 94 01 1c 	call	0x3802	; 0x3802 <fputc>
    3794:	9a 94       	dec	r9
    3796:	f7 cf       	rjmp	.-18     	; 0x3786 <vfprintf+0x372>
    3798:	8a 94       	dec	r8
    379a:	f3 01       	movw	r30, r6
    379c:	e8 0d       	add	r30, r8
    379e:	f1 1d       	adc	r31, r1
    37a0:	80 81       	ld	r24, Z
    37a2:	b6 01       	movw	r22, r12
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	0e 94 01 1c 	call	0x3802	; 0x3802 <fputc>
    37aa:	81 10       	cpse	r8, r1
    37ac:	f5 cf       	rjmp	.-22     	; 0x3798 <vfprintf+0x384>
    37ae:	22 20       	and	r2, r2
    37b0:	09 f4       	brne	.+2      	; 0x37b4 <vfprintf+0x3a0>
    37b2:	42 ce       	rjmp	.-892    	; 0x3438 <vfprintf+0x24>
    37b4:	b6 01       	movw	r22, r12
    37b6:	80 e2       	ldi	r24, 0x20	; 32
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	0e 94 01 1c 	call	0x3802	; 0x3802 <fputc>
    37be:	2a 94       	dec	r2
    37c0:	f6 cf       	rjmp	.-20     	; 0x37ae <vfprintf+0x39a>
    37c2:	f6 01       	movw	r30, r12
    37c4:	86 81       	ldd	r24, Z+6	; 0x06
    37c6:	97 81       	ldd	r25, Z+7	; 0x07
    37c8:	02 c0       	rjmp	.+4      	; 0x37ce <vfprintf+0x3ba>
    37ca:	8f ef       	ldi	r24, 0xFF	; 255
    37cc:	9f ef       	ldi	r25, 0xFF	; 255
    37ce:	2b 96       	adiw	r28, 0x0b	; 11
    37d0:	e2 e1       	ldi	r30, 0x12	; 18
    37d2:	0c 94 e9 1c 	jmp	0x39d2	; 0x39d2 <__epilogue_restores__>

000037d6 <strnlen_P>:
    37d6:	fc 01       	movw	r30, r24
    37d8:	05 90       	lpm	r0, Z+
    37da:	61 50       	subi	r22, 0x01	; 1
    37dc:	70 40       	sbci	r23, 0x00	; 0
    37de:	01 10       	cpse	r0, r1
    37e0:	d8 f7       	brcc	.-10     	; 0x37d8 <strnlen_P+0x2>
    37e2:	80 95       	com	r24
    37e4:	90 95       	com	r25
    37e6:	8e 0f       	add	r24, r30
    37e8:	9f 1f       	adc	r25, r31
    37ea:	08 95       	ret

000037ec <strnlen>:
    37ec:	fc 01       	movw	r30, r24
    37ee:	61 50       	subi	r22, 0x01	; 1
    37f0:	70 40       	sbci	r23, 0x00	; 0
    37f2:	01 90       	ld	r0, Z+
    37f4:	01 10       	cpse	r0, r1
    37f6:	d8 f7       	brcc	.-10     	; 0x37ee <strnlen+0x2>
    37f8:	80 95       	com	r24
    37fa:	90 95       	com	r25
    37fc:	8e 0f       	add	r24, r30
    37fe:	9f 1f       	adc	r25, r31
    3800:	08 95       	ret

00003802 <fputc>:
    3802:	0f 93       	push	r16
    3804:	1f 93       	push	r17
    3806:	cf 93       	push	r28
    3808:	df 93       	push	r29
    380a:	fb 01       	movw	r30, r22
    380c:	23 81       	ldd	r18, Z+3	; 0x03
    380e:	21 fd       	sbrc	r18, 1
    3810:	03 c0       	rjmp	.+6      	; 0x3818 <fputc+0x16>
    3812:	8f ef       	ldi	r24, 0xFF	; 255
    3814:	9f ef       	ldi	r25, 0xFF	; 255
    3816:	2c c0       	rjmp	.+88     	; 0x3870 <fputc+0x6e>
    3818:	22 ff       	sbrs	r18, 2
    381a:	16 c0       	rjmp	.+44     	; 0x3848 <fputc+0x46>
    381c:	46 81       	ldd	r20, Z+6	; 0x06
    381e:	57 81       	ldd	r21, Z+7	; 0x07
    3820:	24 81       	ldd	r18, Z+4	; 0x04
    3822:	35 81       	ldd	r19, Z+5	; 0x05
    3824:	42 17       	cp	r20, r18
    3826:	53 07       	cpc	r21, r19
    3828:	44 f4       	brge	.+16     	; 0x383a <fputc+0x38>
    382a:	a0 81       	ld	r26, Z
    382c:	b1 81       	ldd	r27, Z+1	; 0x01
    382e:	9d 01       	movw	r18, r26
    3830:	2f 5f       	subi	r18, 0xFF	; 255
    3832:	3f 4f       	sbci	r19, 0xFF	; 255
    3834:	31 83       	std	Z+1, r19	; 0x01
    3836:	20 83       	st	Z, r18
    3838:	8c 93       	st	X, r24
    383a:	26 81       	ldd	r18, Z+6	; 0x06
    383c:	37 81       	ldd	r19, Z+7	; 0x07
    383e:	2f 5f       	subi	r18, 0xFF	; 255
    3840:	3f 4f       	sbci	r19, 0xFF	; 255
    3842:	37 83       	std	Z+7, r19	; 0x07
    3844:	26 83       	std	Z+6, r18	; 0x06
    3846:	14 c0       	rjmp	.+40     	; 0x3870 <fputc+0x6e>
    3848:	8b 01       	movw	r16, r22
    384a:	ec 01       	movw	r28, r24
    384c:	fb 01       	movw	r30, r22
    384e:	00 84       	ldd	r0, Z+8	; 0x08
    3850:	f1 85       	ldd	r31, Z+9	; 0x09
    3852:	e0 2d       	mov	r30, r0
    3854:	09 95       	icall
    3856:	89 2b       	or	r24, r25
    3858:	e1 f6       	brne	.-72     	; 0x3812 <fputc+0x10>
    385a:	d8 01       	movw	r26, r16
    385c:	16 96       	adiw	r26, 0x06	; 6
    385e:	8d 91       	ld	r24, X+
    3860:	9c 91       	ld	r25, X
    3862:	17 97       	sbiw	r26, 0x07	; 7
    3864:	01 96       	adiw	r24, 0x01	; 1
    3866:	17 96       	adiw	r26, 0x07	; 7
    3868:	9c 93       	st	X, r25
    386a:	8e 93       	st	-X, r24
    386c:	16 97       	sbiw	r26, 0x06	; 6
    386e:	ce 01       	movw	r24, r28
    3870:	df 91       	pop	r29
    3872:	cf 91       	pop	r28
    3874:	1f 91       	pop	r17
    3876:	0f 91       	pop	r16
    3878:	08 95       	ret

0000387a <__ultoa_invert>:
    387a:	fa 01       	movw	r30, r20
    387c:	aa 27       	eor	r26, r26
    387e:	28 30       	cpi	r18, 0x08	; 8
    3880:	51 f1       	breq	.+84     	; 0x38d6 <__ultoa_invert+0x5c>
    3882:	20 31       	cpi	r18, 0x10	; 16
    3884:	81 f1       	breq	.+96     	; 0x38e6 <__ultoa_invert+0x6c>
    3886:	e8 94       	clt
    3888:	6f 93       	push	r22
    388a:	6e 7f       	andi	r22, 0xFE	; 254
    388c:	6e 5f       	subi	r22, 0xFE	; 254
    388e:	7f 4f       	sbci	r23, 0xFF	; 255
    3890:	8f 4f       	sbci	r24, 0xFF	; 255
    3892:	9f 4f       	sbci	r25, 0xFF	; 255
    3894:	af 4f       	sbci	r26, 0xFF	; 255
    3896:	b1 e0       	ldi	r27, 0x01	; 1
    3898:	3e d0       	rcall	.+124    	; 0x3916 <__ultoa_invert+0x9c>
    389a:	b4 e0       	ldi	r27, 0x04	; 4
    389c:	3c d0       	rcall	.+120    	; 0x3916 <__ultoa_invert+0x9c>
    389e:	67 0f       	add	r22, r23
    38a0:	78 1f       	adc	r23, r24
    38a2:	89 1f       	adc	r24, r25
    38a4:	9a 1f       	adc	r25, r26
    38a6:	a1 1d       	adc	r26, r1
    38a8:	68 0f       	add	r22, r24
    38aa:	79 1f       	adc	r23, r25
    38ac:	8a 1f       	adc	r24, r26
    38ae:	91 1d       	adc	r25, r1
    38b0:	a1 1d       	adc	r26, r1
    38b2:	6a 0f       	add	r22, r26
    38b4:	71 1d       	adc	r23, r1
    38b6:	81 1d       	adc	r24, r1
    38b8:	91 1d       	adc	r25, r1
    38ba:	a1 1d       	adc	r26, r1
    38bc:	20 d0       	rcall	.+64     	; 0x38fe <__ultoa_invert+0x84>
    38be:	09 f4       	brne	.+2      	; 0x38c2 <__ultoa_invert+0x48>
    38c0:	68 94       	set
    38c2:	3f 91       	pop	r19
    38c4:	2a e0       	ldi	r18, 0x0A	; 10
    38c6:	26 9f       	mul	r18, r22
    38c8:	11 24       	eor	r1, r1
    38ca:	30 19       	sub	r19, r0
    38cc:	30 5d       	subi	r19, 0xD0	; 208
    38ce:	31 93       	st	Z+, r19
    38d0:	de f6       	brtc	.-74     	; 0x3888 <__ultoa_invert+0xe>
    38d2:	cf 01       	movw	r24, r30
    38d4:	08 95       	ret
    38d6:	46 2f       	mov	r20, r22
    38d8:	47 70       	andi	r20, 0x07	; 7
    38da:	40 5d       	subi	r20, 0xD0	; 208
    38dc:	41 93       	st	Z+, r20
    38de:	b3 e0       	ldi	r27, 0x03	; 3
    38e0:	0f d0       	rcall	.+30     	; 0x3900 <__ultoa_invert+0x86>
    38e2:	c9 f7       	brne	.-14     	; 0x38d6 <__ultoa_invert+0x5c>
    38e4:	f6 cf       	rjmp	.-20     	; 0x38d2 <__ultoa_invert+0x58>
    38e6:	46 2f       	mov	r20, r22
    38e8:	4f 70       	andi	r20, 0x0F	; 15
    38ea:	40 5d       	subi	r20, 0xD0	; 208
    38ec:	4a 33       	cpi	r20, 0x3A	; 58
    38ee:	18 f0       	brcs	.+6      	; 0x38f6 <__ultoa_invert+0x7c>
    38f0:	49 5d       	subi	r20, 0xD9	; 217
    38f2:	31 fd       	sbrc	r19, 1
    38f4:	40 52       	subi	r20, 0x20	; 32
    38f6:	41 93       	st	Z+, r20
    38f8:	02 d0       	rcall	.+4      	; 0x38fe <__ultoa_invert+0x84>
    38fa:	a9 f7       	brne	.-22     	; 0x38e6 <__ultoa_invert+0x6c>
    38fc:	ea cf       	rjmp	.-44     	; 0x38d2 <__ultoa_invert+0x58>
    38fe:	b4 e0       	ldi	r27, 0x04	; 4
    3900:	a6 95       	lsr	r26
    3902:	97 95       	ror	r25
    3904:	87 95       	ror	r24
    3906:	77 95       	ror	r23
    3908:	67 95       	ror	r22
    390a:	ba 95       	dec	r27
    390c:	c9 f7       	brne	.-14     	; 0x3900 <__ultoa_invert+0x86>
    390e:	00 97       	sbiw	r24, 0x00	; 0
    3910:	61 05       	cpc	r22, r1
    3912:	71 05       	cpc	r23, r1
    3914:	08 95       	ret
    3916:	9b 01       	movw	r18, r22
    3918:	ac 01       	movw	r20, r24
    391a:	0a 2e       	mov	r0, r26
    391c:	06 94       	lsr	r0
    391e:	57 95       	ror	r21
    3920:	47 95       	ror	r20
    3922:	37 95       	ror	r19
    3924:	27 95       	ror	r18
    3926:	ba 95       	dec	r27
    3928:	c9 f7       	brne	.-14     	; 0x391c <__ultoa_invert+0xa2>
    392a:	62 0f       	add	r22, r18
    392c:	73 1f       	adc	r23, r19
    392e:	84 1f       	adc	r24, r20
    3930:	95 1f       	adc	r25, r21
    3932:	a0 1d       	adc	r26, r0
    3934:	08 95       	ret

00003936 <__divmodsi4>:
    3936:	05 2e       	mov	r0, r21
    3938:	97 fb       	bst	r25, 7
    393a:	1e f4       	brtc	.+6      	; 0x3942 <__divmodsi4+0xc>
    393c:	00 94       	com	r0
    393e:	0e 94 b2 1c 	call	0x3964	; 0x3964 <__negsi2>
    3942:	57 fd       	sbrc	r21, 7
    3944:	07 d0       	rcall	.+14     	; 0x3954 <__divmodsi4_neg2>
    3946:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <__udivmodsi4>
    394a:	07 fc       	sbrc	r0, 7
    394c:	03 d0       	rcall	.+6      	; 0x3954 <__divmodsi4_neg2>
    394e:	4e f4       	brtc	.+18     	; 0x3962 <__divmodsi4_exit>
    3950:	0c 94 b2 1c 	jmp	0x3964	; 0x3964 <__negsi2>

00003954 <__divmodsi4_neg2>:
    3954:	50 95       	com	r21
    3956:	40 95       	com	r20
    3958:	30 95       	com	r19
    395a:	21 95       	neg	r18
    395c:	3f 4f       	sbci	r19, 0xFF	; 255
    395e:	4f 4f       	sbci	r20, 0xFF	; 255
    3960:	5f 4f       	sbci	r21, 0xFF	; 255

00003962 <__divmodsi4_exit>:
    3962:	08 95       	ret

00003964 <__negsi2>:
    3964:	90 95       	com	r25
    3966:	80 95       	com	r24
    3968:	70 95       	com	r23
    396a:	61 95       	neg	r22
    396c:	7f 4f       	sbci	r23, 0xFF	; 255
    396e:	8f 4f       	sbci	r24, 0xFF	; 255
    3970:	9f 4f       	sbci	r25, 0xFF	; 255
    3972:	08 95       	ret

00003974 <__muluhisi3>:
    3974:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <__umulhisi3>
    3978:	a5 9f       	mul	r26, r21
    397a:	90 0d       	add	r25, r0
    397c:	b4 9f       	mul	r27, r20
    397e:	90 0d       	add	r25, r0
    3980:	a4 9f       	mul	r26, r20
    3982:	80 0d       	add	r24, r0
    3984:	91 1d       	adc	r25, r1
    3986:	11 24       	eor	r1, r1
    3988:	08 95       	ret

0000398a <__mulshisi3>:
    398a:	b7 ff       	sbrs	r27, 7
    398c:	0c 94 ba 1c 	jmp	0x3974	; 0x3974 <__muluhisi3>

00003990 <__mulohisi3>:
    3990:	0e 94 ba 1c 	call	0x3974	; 0x3974 <__muluhisi3>
    3994:	82 1b       	sub	r24, r18
    3996:	93 0b       	sbc	r25, r19
    3998:	08 95       	ret

0000399a <__prologue_saves__>:
    399a:	2f 92       	push	r2
    399c:	3f 92       	push	r3
    399e:	4f 92       	push	r4
    39a0:	5f 92       	push	r5
    39a2:	6f 92       	push	r6
    39a4:	7f 92       	push	r7
    39a6:	8f 92       	push	r8
    39a8:	9f 92       	push	r9
    39aa:	af 92       	push	r10
    39ac:	bf 92       	push	r11
    39ae:	cf 92       	push	r12
    39b0:	df 92       	push	r13
    39b2:	ef 92       	push	r14
    39b4:	ff 92       	push	r15
    39b6:	0f 93       	push	r16
    39b8:	1f 93       	push	r17
    39ba:	cf 93       	push	r28
    39bc:	df 93       	push	r29
    39be:	cd b7       	in	r28, 0x3d	; 61
    39c0:	de b7       	in	r29, 0x3e	; 62
    39c2:	ca 1b       	sub	r28, r26
    39c4:	db 0b       	sbc	r29, r27
    39c6:	0f b6       	in	r0, 0x3f	; 63
    39c8:	f8 94       	cli
    39ca:	de bf       	out	0x3e, r29	; 62
    39cc:	0f be       	out	0x3f, r0	; 63
    39ce:	cd bf       	out	0x3d, r28	; 61
    39d0:	09 94       	ijmp

000039d2 <__epilogue_restores__>:
    39d2:	2a 88       	ldd	r2, Y+18	; 0x12
    39d4:	39 88       	ldd	r3, Y+17	; 0x11
    39d6:	48 88       	ldd	r4, Y+16	; 0x10
    39d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    39da:	6e 84       	ldd	r6, Y+14	; 0x0e
    39dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    39de:	8c 84       	ldd	r8, Y+12	; 0x0c
    39e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    39e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    39e4:	b9 84       	ldd	r11, Y+9	; 0x09
    39e6:	c8 84       	ldd	r12, Y+8	; 0x08
    39e8:	df 80       	ldd	r13, Y+7	; 0x07
    39ea:	ee 80       	ldd	r14, Y+6	; 0x06
    39ec:	fd 80       	ldd	r15, Y+5	; 0x05
    39ee:	0c 81       	ldd	r16, Y+4	; 0x04
    39f0:	1b 81       	ldd	r17, Y+3	; 0x03
    39f2:	aa 81       	ldd	r26, Y+2	; 0x02
    39f4:	b9 81       	ldd	r27, Y+1	; 0x01
    39f6:	ce 0f       	add	r28, r30
    39f8:	d1 1d       	adc	r29, r1
    39fa:	0f b6       	in	r0, 0x3f	; 63
    39fc:	f8 94       	cli
    39fe:	de bf       	out	0x3e, r29	; 62
    3a00:	0f be       	out	0x3f, r0	; 63
    3a02:	cd bf       	out	0x3d, r28	; 61
    3a04:	ed 01       	movw	r28, r26
    3a06:	08 95       	ret

00003a08 <__udivmodsi4>:
    3a08:	a1 e2       	ldi	r26, 0x21	; 33
    3a0a:	1a 2e       	mov	r1, r26
    3a0c:	aa 1b       	sub	r26, r26
    3a0e:	bb 1b       	sub	r27, r27
    3a10:	fd 01       	movw	r30, r26
    3a12:	0d c0       	rjmp	.+26     	; 0x3a2e <__udivmodsi4_ep>

00003a14 <__udivmodsi4_loop>:
    3a14:	aa 1f       	adc	r26, r26
    3a16:	bb 1f       	adc	r27, r27
    3a18:	ee 1f       	adc	r30, r30
    3a1a:	ff 1f       	adc	r31, r31
    3a1c:	a2 17       	cp	r26, r18
    3a1e:	b3 07       	cpc	r27, r19
    3a20:	e4 07       	cpc	r30, r20
    3a22:	f5 07       	cpc	r31, r21
    3a24:	20 f0       	brcs	.+8      	; 0x3a2e <__udivmodsi4_ep>
    3a26:	a2 1b       	sub	r26, r18
    3a28:	b3 0b       	sbc	r27, r19
    3a2a:	e4 0b       	sbc	r30, r20
    3a2c:	f5 0b       	sbc	r31, r21

00003a2e <__udivmodsi4_ep>:
    3a2e:	66 1f       	adc	r22, r22
    3a30:	77 1f       	adc	r23, r23
    3a32:	88 1f       	adc	r24, r24
    3a34:	99 1f       	adc	r25, r25
    3a36:	1a 94       	dec	r1
    3a38:	69 f7       	brne	.-38     	; 0x3a14 <__udivmodsi4_loop>
    3a3a:	60 95       	com	r22
    3a3c:	70 95       	com	r23
    3a3e:	80 95       	com	r24
    3a40:	90 95       	com	r25
    3a42:	9b 01       	movw	r18, r22
    3a44:	ac 01       	movw	r20, r24
    3a46:	bd 01       	movw	r22, r26
    3a48:	cf 01       	movw	r24, r30
    3a4a:	08 95       	ret

00003a4c <__umulhisi3>:
    3a4c:	a2 9f       	mul	r26, r18
    3a4e:	b0 01       	movw	r22, r0
    3a50:	b3 9f       	mul	r27, r19
    3a52:	c0 01       	movw	r24, r0
    3a54:	a3 9f       	mul	r26, r19
    3a56:	70 0d       	add	r23, r0
    3a58:	81 1d       	adc	r24, r1
    3a5a:	11 24       	eor	r1, r1
    3a5c:	91 1d       	adc	r25, r1
    3a5e:	b2 9f       	mul	r27, r18
    3a60:	70 0d       	add	r23, r0
    3a62:	81 1d       	adc	r24, r1
    3a64:	11 24       	eor	r1, r1
    3a66:	91 1d       	adc	r25, r1
    3a68:	08 95       	ret

00003a6a <atexit_fini>:
    3a6a:	0e 94 63 00 	call	0xc6	; 0xc6 <atexit_finido>

00003a6e <__do_global_dtors>:
    3a6e:	10 e0       	ldi	r17, 0x00	; 0
    3a70:	c7 e3       	ldi	r28, 0x37	; 55
    3a72:	d0 e0       	ldi	r29, 0x00	; 0
    3a74:	04 c0       	rjmp	.+8      	; 0x3a7e <__do_global_dtors+0x10>
    3a76:	fe 01       	movw	r30, r28
    3a78:	0e 94 88 17 	call	0x2f10	; 0x2f10 <__tablejump2__>
    3a7c:	21 96       	adiw	r28, 0x01	; 1
    3a7e:	c9 33       	cpi	r28, 0x39	; 57
    3a80:	d1 07       	cpc	r29, r17
    3a82:	c9 f7       	brne	.-14     	; 0x3a76 <__do_global_dtors+0x8>
    3a84:	f8 94       	cli

00003a86 <__stop_program>:
    3a86:	ff cf       	rjmp	.-2      	; 0x3a86 <__stop_program>
