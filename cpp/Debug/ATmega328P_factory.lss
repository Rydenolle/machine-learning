
ATmega328P_factory.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018c  00800100  0000200a  0000209e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000200a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  0080028c  0080028c  0000222a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000222a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000225c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000530  00000000  00000000  0000229c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000873a  00000000  00000000  000027cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002a02  00000000  00000000  0000af06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000273e  00000000  00000000  0000d908  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000efc  00000000  00000000  00010048  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000039ad  00000000  00000000  00010f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003d4f  00000000  00000000  000148f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a0  00000000  00000000  00018640  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__dtors_end>
       4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       c:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__vector_3>
      10:	0c 94 13 05 	jmp	0xa26	; 0xa26 <__vector_4>
      14:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__vector_5>
      18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      24:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <__vector_9>
      28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      2c:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__vector_11>
      30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      40:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__vector_16>
      44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

00000068 <__ctors_start>:
      68:	6d 05       	cpc	r22, r13
      6a:	a8 08       	sbc	r10, r8

0000006c <__ctors_end>:
      6c:	74 05       	cpc	r23, r4
      6e:	af 08       	sbc	r10, r15

00000070 <__dtors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d8 e0       	ldi	r29, 0x08	; 8
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ea e0       	ldi	r30, 0x0A	; 10
      84:	f0 e2       	ldi	r31, 0x20	; 32
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	ac 38       	cpi	r26, 0x8C	; 140
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	22 e0       	ldi	r18, 0x02	; 2
      94:	ac e8       	ldi	r26, 0x8C	; 140
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a8 3d       	cpi	r26, 0xD8	; 216
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>

000000a2 <__do_global_ctors>:
      a2:	10 e0       	ldi	r17, 0x00	; 0
      a4:	c6 e3       	ldi	r28, 0x36	; 54
      a6:	d0 e0       	ldi	r29, 0x00	; 0
      a8:	04 c0       	rjmp	.+8      	; 0xb2 <__do_global_ctors+0x10>
      aa:	21 97       	sbiw	r28, 0x01	; 1
      ac:	fe 01       	movw	r30, r28
      ae:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__tablejump2__>
      b2:	c4 33       	cpi	r28, 0x34	; 52
      b4:	d1 07       	cpc	r29, r17
      b6:	c9 f7       	brne	.-14     	; 0xaa <__do_global_ctors+0x8>
      b8:	0e 94 9c 09 	call	0x1338	; 0x1338 <main>
      bc:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <atexit_fini>

000000c0 <__bad_interrupt>:
      c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <atexit_finido>:
      c4:	a0 91 8c 02 	lds	r26, 0x028C	; 0x80028c <__data_end>
      c8:	b0 91 8d 02 	lds	r27, 0x028D	; 0x80028d <__data_end+0x1>
      cc:	10 97       	sbiw	r26, 0x00	; 0
      ce:	69 f0       	breq	.+26     	; 0xea <atexit_finido+0x26>
      d0:	ed 91       	ld	r30, X+
      d2:	fc 91       	ld	r31, X
      d4:	11 97       	sbiw	r26, 0x01	; 1
      d6:	12 96       	adiw	r26, 0x02	; 2
      d8:	8d 91       	ld	r24, X+
      da:	9c 91       	ld	r25, X
      dc:	13 97       	sbiw	r26, 0x03	; 3
      de:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <__data_end+0x1>
      e2:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <__data_end>
      e6:	09 95       	icall
      e8:	ed cf       	rjmp	.-38     	; 0xc4 <atexit_finido>
      ea:	08 95       	ret

000000ec <atexit>:
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	ec 01       	movw	r28, r24
      f2:	84 e0       	ldi	r24, 0x04	; 4
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <malloc>
      fa:	00 97       	sbiw	r24, 0x00	; 0
      fc:	81 f0       	breq	.+32     	; 0x11e <atexit+0x32>
      fe:	fc 01       	movw	r30, r24
     100:	d1 83       	std	Z+1, r29	; 0x01
     102:	c0 83       	st	Z, r28
     104:	20 91 8c 02 	lds	r18, 0x028C	; 0x80028c <__data_end>
     108:	30 91 8d 02 	lds	r19, 0x028D	; 0x80028d <__data_end+0x1>
     10c:	33 83       	std	Z+3, r19	; 0x03
     10e:	22 83       	std	Z+2, r18	; 0x02
     110:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <__data_end+0x1>
     114:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <__data_end>
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	02 c0       	rjmp	.+4      	; 0x122 <atexit+0x36>
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	df 91       	pop	r29
     124:	cf 91       	pop	r28
     126:	08 95       	ret

00000128 <__tcf_0>:
{
public:
    /**
     * @brief Delete the ADC.
     */
    virtual ~AdcInterface() noexcept = default;
     128:	88 e2       	ldi	r24, 0x28	; 40
     12a:	91 e0       	ldi	r25, 0x01	; 1
     12c:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <_ZZN6driver10atmega328p3Adc11getInstanceEvE10myInstance+0x1>
     130:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <_ZZN6driver10atmega328p3Adc11getInstanceEvE10myInstance>
     134:	08 95       	ret

00000136 <_ZNK6driver10atmega328p3Adc10resolutionEv>:
    // Return a reference to the singleton ADC instance, cast to the corresponding interface.
    return myInstance; 
}

// -----------------------------------------------------------------------------
uint8_t Adc::resolution() const noexcept { return AdcParam::Resolution; }
     136:	8a e0       	ldi	r24, 0x0A	; 10
     138:	08 95       	ret

0000013a <_ZNK6driver10atmega328p3Adc8maxValueEv>:

// -----------------------------------------------------------------------------
uint16_t Adc::maxValue() const noexcept { return AdcParam::MaxValue; }
     13a:	8f ef       	ldi	r24, 0xFF	; 255
     13c:	93 e0       	ldi	r25, 0x03	; 3
     13e:	08 95       	ret

00000140 <_ZNK6driver10atmega328p3Adc13supplyVoltageEv>:

// -----------------------------------------------------------------------------
double Adc::supplyVoltage() const noexcept { return AdcParam::SupplyVoltage; }
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	70 e0       	ldi	r23, 0x00	; 0
     144:	80 ea       	ldi	r24, 0xA0	; 160
     146:	90 e4       	ldi	r25, 0x40	; 64
     148:	08 95       	ret

0000014a <_ZNK6driver10atmega328p3Adc4readEh>:

// -----------------------------------------------------------------------------
uint16_t Adc::read(const uint8_t analogPin) const noexcept
{ 
     14a:	0f 93       	push	r16
    return myEnabled ? adcValue(analogPin) : 0U;
     14c:	fc 01       	movw	r30, r24
     14e:	82 81       	ldd	r24, Z+2	; 0x02
     150:	88 23       	and	r24, r24
     152:	09 f4       	brne	.+2      	; 0x156 <_ZNK6driver10atmega328p3Adc4readEh+0xc>
     154:	4a c0       	rjmp	.+148    	; 0x1ea <_ZNK6driver10atmega328p3Adc4readEh+0xa0>
template <typename T>
constexpr bool inRange(const T number, const T min, const T max) noexcept
{
    static_assert(type_traits::is_arithmetic<T>::value, 
        "Range checks are only supported for arithmetic types!");
    return ((min <= number) && (max >= number));
     156:	66 30       	cpi	r22, 0x06	; 6
     158:	10 f4       	brcc	.+4      	; 0x15e <_ZNK6driver10atmega328p3Adc4readEh+0x14>
     15a:	98 2f       	mov	r25, r24
     15c:	01 c0       	rjmp	.+2      	; 0x160 <_ZNK6driver10atmega328p3Adc4readEh+0x16>
     15e:	90 e0       	ldi	r25, 0x00	; 0

// -----------------------------------------------------------------------------
constexpr bool isPinNumberValid(const uint8_t pin) noexcept
{
    return utils::inRange(pin, Adc::Pin::A0, Adc::Pin::A5) 
        || utils::inRange(pin, Adc::Port::C0, Adc::Port::C5);
     160:	91 11       	cpse	r25, r1
     162:	05 c0       	rjmp	.+10     	; 0x16e <_ZNK6driver10atmega328p3Adc4readEh+0x24>
     164:	6e 30       	cpi	r22, 0x0E	; 14
     166:	18 f0       	brcs	.+6      	; 0x16e <_ZNK6driver10atmega328p3Adc4readEh+0x24>
     168:	64 31       	cpi	r22, 0x14	; 20
     16a:	08 f4       	brcc	.+2      	; 0x16e <_ZNK6driver10atmega328p3Adc4readEh+0x24>
     16c:	98 2f       	mov	r25, r24
}

// -----------------------------------------------------------------------------
inline uint16_t adcValue(const uint8_t pin) noexcept
{
    if (!isPinNumberValid(pin)) { return 0U; }
     16e:	99 23       	and	r25, r25
     170:	c9 f1       	breq	.+114    	; 0x1e4 <_ZNK6driver10atmega328p3Adc4readEh+0x9a>
}

// -----------------------------------------------------------------------------
constexpr uint8_t isPinAdjustedForOffset(const uint8_t pin) noexcept
{
    return Adc::Pin::A5 >= pin ? pin : pin - AdcParam::PortOffset;
     172:	66 30       	cpi	r22, 0x06	; 6
     174:	08 f0       	brcs	.+2      	; 0x178 <_ZNK6driver10atmega328p3Adc4readEh+0x2e>
     176:	6e 50       	subi	r22, 0x0E	; 14

// -----------------------------------------------------------------------------
inline uint16_t adcValue(const uint8_t pin) noexcept
{
    if (!isPinNumberValid(pin)) { return 0U; }
    ADMUX = (1U << REFS0) | isPinAdjustedForOffset(pin);
     178:	60 64       	ori	r22, 0x40	; 64
     17a:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
     17e:	ea e7       	ldi	r30, 0x7A	; 122
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	80 81       	ld	r24, Z
     184:	80 68       	ori	r24, 0x80	; 128
     186:	80 83       	st	Z, r24
     188:	80 81       	ld	r24, Z
     18a:	80 64       	ori	r24, 0x40	; 64
     18c:	80 83       	st	Z, r24
     18e:	80 81       	ld	r24, Z
     190:	81 60       	ori	r24, 0x01	; 1
     192:	80 83       	st	Z, r24
     194:	80 81       	ld	r24, Z
     196:	82 60       	ori	r24, 0x02	; 2
     198:	80 83       	st	Z, r24
     19a:	80 81       	ld	r24, Z
     19c:	84 60       	ori	r24, 0x04	; 4
     19e:	80 83       	st	Z, r24
// -----------------------------------------------------------------------------
template <typename T>
constexpr bool read(const volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    return reg & (1ULL << bit);
     1a0:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	40 e0       	ldi	r20, 0x00	; 0
     1a8:	50 e0       	ldi	r21, 0x00	; 0
     1aa:	60 e0       	ldi	r22, 0x00	; 0
     1ac:	70 e0       	ldi	r23, 0x00	; 0
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	04 e0       	ldi	r16, 0x04	; 4
     1b4:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__lshrdi3>
     1b8:	21 70       	andi	r18, 0x01	; 1
    utils::set(ADCSRA, ADEN, ADSC, ADPS0, ADPS1, ADPS2);
    while (!utils::read(ADCSRA, ADIF));
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	40 e0       	ldi	r20, 0x00	; 0
     1be:	50 e0       	ldi	r21, 0x00	; 0
     1c0:	60 e0       	ldi	r22, 0x00	; 0
     1c2:	70 e0       	ldi	r23, 0x00	; 0
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	a0 e0       	ldi	r26, 0x00	; 0
     1ca:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__cmpdi2_s8>
     1ce:	41 f3       	breq	.-48     	; 0x1a0 <_ZNK6driver10atmega328p3Adc4readEh+0x56>
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
     1d0:	ea e7       	ldi	r30, 0x7A	; 122
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	80 61       	ori	r24, 0x10	; 16
     1d8:	80 83       	st	Z, r24
    utils::set(ADCSRA, ADIF);
    return ADC;
     1da:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     1de:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     1e2:	05 c0       	rjmp	.+10     	; 0x1ee <_ZNK6driver10atmega328p3Adc4readEh+0xa4>
}

// -----------------------------------------------------------------------------
inline uint16_t adcValue(const uint8_t pin) noexcept
{
    if (!isPinNumberValid(pin)) { return 0U; }
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <_ZNK6driver10atmega328p3Adc4readEh+0xa4>
double Adc::supplyVoltage() const noexcept { return AdcParam::SupplyVoltage; }

// -----------------------------------------------------------------------------
uint16_t Adc::read(const uint8_t analogPin) const noexcept
{ 
    return myEnabled ? adcValue(analogPin) : 0U;
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	90 e0       	ldi	r25, 0x00	; 0
}
     1ee:	0f 91       	pop	r16
     1f0:	08 95       	ret

000001f2 <_ZNK6driver10atmega328p3Adc9dutyCycleEh>:

// -----------------------------------------------------------------------------
double Adc::dutyCycle(const uint8_t analogPin) const noexcept
{
    return read(analogPin) / static_cast<double>(AdcParam::MaxValue);
     1f2:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZNK6driver10atmega328p3Adc4readEh>
     1f6:	bc 01       	movw	r22, r24
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__floatunsisf>
     200:	20 e0       	ldi	r18, 0x00	; 0
     202:	30 ec       	ldi	r19, 0xC0	; 192
     204:	4f e7       	ldi	r20, 0x7F	; 127
     206:	54 e4       	ldi	r21, 0x44	; 68
     208:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__divsf3>
}
     20c:	08 95       	ret

0000020e <_ZNK6driver10atmega328p3Adc12inputVoltageEh>:

// -----------------------------------------------------------------------------
double Adc::inputVoltage(const uint8_t analogPin) const noexcept
{
    return dutyCycle(analogPin) * AdcParam::SupplyVoltage;
     20e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_ZNK6driver10atmega328p3Adc9dutyCycleEh>
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	40 ea       	ldi	r20, 0xA0	; 160
     218:	50 e4       	ldi	r21, 0x40	; 64
     21a:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsf3>
}
     21e:	08 95       	ret

00000220 <_ZNK6driver10atmega328p3Adc13isInitializedEv>:

// -----------------------------------------------------------------------------
bool Adc::isInitialized() const noexcept { return true; }
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	08 95       	ret

00000224 <_ZNK6driver10atmega328p3Adc9isEnabledEv>:

// -----------------------------------------------------------------------------
bool Adc::isEnabled() const noexcept { return myEnabled; }
     224:	fc 01       	movw	r30, r24
     226:	82 81       	ldd	r24, Z+2	; 0x02
     228:	08 95       	ret

0000022a <_ZN6driver10atmega328p3Adc10setEnabledEb>:

// -----------------------------------------------------------------------------
void Adc::setEnabled(const bool enable) noexcept { myEnabled = enable; }
     22a:	fc 01       	movw	r30, r24
     22c:	62 83       	std	Z+2, r22	; 0x02
     22e:	08 95       	ret

00000230 <_ZN6driver10atmega328p3AdcD1Ev>:
     230:	28 e2       	ldi	r18, 0x28	; 40
     232:	31 e0       	ldi	r19, 0x01	; 1
     234:	fc 01       	movw	r30, r24
     236:	31 83       	std	Z+1, r19	; 0x01
     238:	20 83       	st	Z, r18
     23a:	08 95       	ret

0000023c <_ZN6driver10atmega328p3AdcD0Ev>:
     23c:	28 e2       	ldi	r18, 0x28	; 40
     23e:	31 e0       	ldi	r19, 0x01	; 1
     240:	fc 01       	movw	r30, r24
     242:	31 83       	std	Z+1, r19	; 0x01
     244:	20 83       	st	Z, r18
    Adc& operator=(const Adc&) = delete; // No copy assignment.
    Adc& operator=(Adc&&)      = delete; // No move assignment.

private:
    Adc() noexcept;
    ~Adc() noexcept override = default;
     246:	63 e0       	ldi	r22, 0x03	; 3
     248:	70 e0       	ldi	r23, 0x00	; 0
     24a:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZdlPvj>
     24e:	08 95       	ret

00000250 <_ZN6driver10atmega328p3AdcC1Ev>:

// -----------------------------------------------------------------------------
Adc::Adc() noexcept
    : myEnabled{false}
     250:	22 e4       	ldi	r18, 0x42	; 66
     252:	31 e0       	ldi	r19, 0x01	; 1
     254:	fc 01       	movw	r30, r24
     256:	31 83       	std	Z+1, r19	; 0x01
     258:	20 83       	st	Z, r18
     25a:	12 82       	std	Z+2, r1	; 0x02
{
    read(Pin::A0);
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZNK6driver10atmega328p3Adc4readEh>
     262:	08 95       	ret

00000264 <_ZN6driver10atmega328p3Adc11getInstanceEv>:

// -----------------------------------------------------------------------------
AdcInterface& Adc::getInstance() noexcept
{ 
    // Create and initialize the singleton ADC instance (once only).
    static Adc myInstance{};
     264:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <_ZGVZN6driver10atmega328p3Adc11getInstanceEvE10myInstance>
     268:	81 11       	cpse	r24, r1
     26a:	12 c0       	rjmp	.+36     	; 0x290 <_ZN6driver10atmega328p3Adc11getInstanceEv+0x2c>
     26c:	81 e9       	ldi	r24, 0x91	; 145
     26e:	92 e0       	ldi	r25, 0x02	; 2
     270:	0e 94 76 0c 	call	0x18ec	; 0x18ec <__cxa_guard_acquire>
     274:	89 2b       	or	r24, r25
     276:	61 f0       	breq	.+24     	; 0x290 <_ZN6driver10atmega328p3Adc11getInstanceEv+0x2c>
     278:	8e e8       	ldi	r24, 0x8E	; 142
     27a:	92 e0       	ldi	r25, 0x02	; 2
     27c:	0e 94 28 01 	call	0x250	; 0x250 <_ZN6driver10atmega328p3AdcC1Ev>
     280:	81 e9       	ldi	r24, 0x91	; 145
     282:	92 e0       	ldi	r25, 0x02	; 2
     284:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__cxa_guard_release>
     288:	84 e9       	ldi	r24, 0x94	; 148
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 76 00 	call	0xec	; 0xec <atexit>

    // Return a reference to the singleton ADC instance, cast to the corresponding interface.
    return myInstance; 
}
     290:	8e e8       	ldi	r24, 0x8E	; 142
     292:	92 e0       	ldi	r25, 0x02	; 2
     294:	08 95       	ret

00000296 <__tcf_0>:
{
public:
    /**
     * @brief Delete the EEPROM stream.
     */
    virtual ~EepromInterface() noexcept = default;
     296:	8c e5       	ldi	r24, 0x5C	; 92
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <_ZZN6driver10atmega328p6Eeprom11getInstanceEvE10myInstance+0x1>
     29e:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <_ZZN6driver10atmega328p6Eeprom11getInstanceEvE10myInstance>
     2a2:	08 95       	ret

000002a4 <_ZNK6driver10atmega328p6Eeprom13isInitializedEv>:
    // Return a reference to the singleton EEPROM instance, cast to the corresponding interface.
    return myInstance; 
}

// -----------------------------------------------------------------------------
bool Eeprom::isInitialized() const noexcept { return true; }
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	08 95       	ret

000002a8 <_ZNK6driver10atmega328p6Eeprom9isEnabledEv>:

// -----------------------------------------------------------------------------
bool Eeprom::isEnabled() const noexcept { return myEnabled; }
     2a8:	fc 01       	movw	r30, r24
     2aa:	82 81       	ldd	r24, Z+2	; 0x02
     2ac:	08 95       	ret

000002ae <_ZN6driver10atmega328p6Eeprom10setEnabledEb>:

// -----------------------------------------------------------------------------
void Eeprom::setEnabled(const bool enable) noexcept { myEnabled = enable; }
     2ae:	fc 01       	movw	r30, r24
     2b0:	62 83       	std	Z+2, r22	; 0x02
     2b2:	08 95       	ret

000002b4 <_ZNK6driver10atmega328p6Eeprom14isAddressValidEjh>:
{}

// -----------------------------------------------------------------------------
bool Eeprom::isAddressValid(const uint16_t address, const uint8_t dataSize) const noexcept
{
    return EepromParam::MaxAddress >= address + dataSize;
     2b4:	64 0f       	add	r22, r20
     2b6:	71 1d       	adc	r23, r1
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	61 15       	cp	r22, r1
     2bc:	74 40       	sbci	r23, 0x04	; 4
     2be:	08 f0       	brcs	.+2      	; 0x2c2 <_ZNK6driver10atmega328p6Eeprom14isAddressValidEjh+0xe>
     2c0:	80 e0       	ldi	r24, 0x00	; 0
}
     2c2:	08 95       	ret

000002c4 <_ZNK6driver10atmega328p6Eeprom8readByteEj>:
    utils::globalInterruptEnable();
}

// -----------------------------------------------------------------------------
uint8_t Eeprom::readByte(const uint16_t address) const noexcept
{
     2c4:	0f 93       	push	r16
     2c6:	fb 01       	movw	r30, r22
// -----------------------------------------------------------------------------
template <typename T>
constexpr bool read(const volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    return reg & (1ULL << bit);
     2c8:	2f b3       	in	r18, 0x1f	; 31
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	40 e0       	ldi	r20, 0x00	; 0
     2ce:	50 e0       	ldi	r21, 0x00	; 0
     2d0:	60 e0       	ldi	r22, 0x00	; 0
     2d2:	70 e0       	ldi	r23, 0x00	; 0
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	01 e0       	ldi	r16, 0x01	; 1
     2da:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__lshrdi3>
     2de:	21 70       	andi	r18, 0x01	; 1
    // Wait until EEPROM is ready to read the next byte.
    while (utils::read(EECR, EEPE));
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	40 e0       	ldi	r20, 0x00	; 0
     2e4:	50 e0       	ldi	r21, 0x00	; 0
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	a0 e0       	ldi	r26, 0x00	; 0
     2f0:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__cmpdi2_s8>
     2f4:	49 f7       	brne	.-46     	; 0x2c8 <_ZNK6driver10atmega328p6Eeprom8readByteEj+0x4>

    // Set the address from which to read.
    EEAR = address;
     2f6:	f2 bd       	out	0x22, r31	; 34
     2f8:	e1 bd       	out	0x21, r30	; 33
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
     2fa:	8f b3       	in	r24, 0x1f	; 31
     2fc:	81 60       	ori	r24, 0x01	; 1
     2fe:	8f bb       	out	0x1f, r24	; 31

    // Read and return the value of the given address.
    utils::set(EECR, EERE);
    return EEDR;
     300:	80 b5       	in	r24, 0x20	; 32
}
     302:	0f 91       	pop	r16
     304:	08 95       	ret

00000306 <_ZN6driver10atmega328p6EepromD1Ev>:
     306:	2c e5       	ldi	r18, 0x5C	; 92
     308:	31 e0       	ldi	r19, 0x01	; 1
     30a:	fc 01       	movw	r30, r24
     30c:	31 83       	std	Z+1, r19	; 0x01
     30e:	20 83       	st	Z, r18
     310:	08 95       	ret

00000312 <_ZN6driver10atmega328p6EepromD0Ev>:
     312:	2c e5       	ldi	r18, 0x5C	; 92
     314:	31 e0       	ldi	r19, 0x01	; 1
     316:	fc 01       	movw	r30, r24
     318:	31 83       	std	Z+1, r19	; 0x01
     31a:	20 83       	st	Z, r18
    Eeprom& operator=(const Eeprom&) = delete; // No copy assignment.
    Eeprom& operator=(Eeprom&&)      = delete; // No move assignment.

private: 
    Eeprom() noexcept;
    ~Eeprom() noexcept override = default;
     31c:	63 e0       	ldi	r22, 0x03	; 3
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZdlPvj>
     324:	08 95       	ret

00000326 <_ZNK6driver10atmega328p6Eeprom9writeByteEjh>:
    return EepromParam::MaxAddress >= address + dataSize;
}

// -----------------------------------------------------------------------------
void Eeprom::writeByte(const uint16_t address, const uint8_t data) const noexcept
{
     326:	0f 93       	push	r16
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	eb 01       	movw	r28, r22
     32e:	e4 2f       	mov	r30, r20
// -----------------------------------------------------------------------------
template <typename T>
constexpr bool read(const volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    return reg & (1ULL << bit);
     330:	2f b3       	in	r18, 0x1f	; 31
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	40 e0       	ldi	r20, 0x00	; 0
     336:	50 e0       	ldi	r21, 0x00	; 0
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	01 e0       	ldi	r16, 0x01	; 1
     342:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__lshrdi3>
     346:	21 70       	andi	r18, 0x01	; 1
    // Wait until EEPROM is ready to send the next byte.
    while (utils::read(EECR, EEPE));
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	40 e0       	ldi	r20, 0x00	; 0
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	a0 e0       	ldi	r26, 0x00	; 0
     358:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__cmpdi2_s8>
     35c:	49 f7       	brne	.-46     	; 0x330 <_ZNK6driver10atmega328p6Eeprom9writeByteEjh+0xa>

    // Set the address and data to write.
    EEAR = address;
     35e:	d2 bd       	out	0x22, r29	; 34
     360:	c1 bd       	out	0x21, r28	; 33
    EEDR = data;
     362:	e0 bd       	out	0x20, r30	; 32

    // Perform write, disable interrupts during the write sequence.
    utils::globalInterruptDisable();
     364:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <_ZN5utils22globalInterruptDisableEv>
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
     368:	8f b3       	in	r24, 0x1f	; 31
     36a:	84 60       	ori	r24, 0x04	; 4
     36c:	8f bb       	out	0x1f, r24	; 31
     36e:	8f b3       	in	r24, 0x1f	; 31
     370:	82 60       	ori	r24, 0x02	; 2
     372:	8f bb       	out	0x1f, r24	; 31
    utils::set(EECR, EEMPE);
    utils::set(EECR, EEPE);

    // Re-enable interrupts once the write sequence is complete.
    utils::globalInterruptEnable();
     374:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_ZN5utils21globalInterruptEnableEv>
}
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	0f 91       	pop	r16
     37e:	08 95       	ret

00000380 <_ZN6driver10atmega328p6EepromC1Ev>:
// -----------------------------------------------------------------------------
void Eeprom::setEnabled(const bool enable) noexcept { myEnabled = enable; }

// -----------------------------------------------------------------------------
Eeprom::Eeprom() noexcept
    : myEnabled{false} 
     380:	20 e7       	ldi	r18, 0x70	; 112
     382:	31 e0       	ldi	r19, 0x01	; 1
     384:	fc 01       	movw	r30, r24
     386:	31 83       	std	Z+1, r19	; 0x01
     388:	20 83       	st	Z, r18
     38a:	12 82       	std	Z+2, r1	; 0x02
     38c:	08 95       	ret

0000038e <_ZN6driver10atmega328p6Eeprom11getInstanceEv>:

// -----------------------------------------------------------------------------
EepromInterface& Eeprom::getInstance() noexcept
{
    // Create and initialize the singleton EEPROM instance (once only).
    static Eeprom myInstance{};
     38e:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <_ZGVZN6driver10atmega328p6Eeprom11getInstanceEvE10myInstance>
     392:	81 11       	cpse	r24, r1
     394:	12 c0       	rjmp	.+36     	; 0x3ba <_ZN6driver10atmega328p6Eeprom11getInstanceEv+0x2c>
     396:	8c e9       	ldi	r24, 0x9C	; 156
     398:	92 e0       	ldi	r25, 0x02	; 2
     39a:	0e 94 76 0c 	call	0x18ec	; 0x18ec <__cxa_guard_acquire>
     39e:	89 2b       	or	r24, r25
     3a0:	61 f0       	breq	.+24     	; 0x3ba <_ZN6driver10atmega328p6Eeprom11getInstanceEv+0x2c>
     3a2:	89 e9       	ldi	r24, 0x99	; 153
     3a4:	92 e0       	ldi	r25, 0x02	; 2
     3a6:	0e 94 c0 01 	call	0x380	; 0x380 <_ZN6driver10atmega328p6EepromC1Ev>
     3aa:	8c e9       	ldi	r24, 0x9C	; 156
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__cxa_guard_release>
     3b2:	8b e4       	ldi	r24, 0x4B	; 75
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	0e 94 76 00 	call	0xec	; 0xec <atexit>

    // Return a reference to the singleton EEPROM instance, cast to the corresponding interface.
    return myInstance; 
}
     3ba:	89 e9       	ldi	r24, 0x99	; 153
     3bc:	92 e0       	ldi	r25, 0x02	; 2
     3be:	08 95       	ret

000003c0 <_ZNK6driver10atmega328p4Gpio13isInitializedEv>:
 *        This class is non-copyable and non-movable.
 * 
 * @tparam Size The array size. Must be greater than 0.
 */
template <size_t Size>
class CallbackArray : public Array<void (*)(), Size>
     3c0:	21 e0       	ldi	r18, 0x01	; 1
     3c2:	fc 01       	movw	r30, r24
     3c4:	82 81       	ldd	r24, Z+2	; 0x02
     3c6:	93 81       	ldd	r25, Z+3	; 0x03
     3c8:	89 2b       	or	r24, r25
     3ca:	09 f4       	brne	.+2      	; 0x3ce <_ZNK6driver10atmega328p4Gpio13isInitializedEv+0xe>
     3cc:	20 e0       	ldi	r18, 0x00	; 0
     3ce:	82 2f       	mov	r24, r18
     3d0:	08 95       	ret

000003d2 <_ZNK6driver10atmega328p4Gpio4readEv>:
     3d2:	0f 93       	push	r16
     3d4:	dc 01       	movw	r26, r24
     3d6:	14 96       	adiw	r26, 0x04	; 4
     3d8:	0c 91       	ld	r16, X
     3da:	14 97       	sbiw	r26, 0x04	; 4
     3dc:	12 96       	adiw	r26, 0x02	; 2
     3de:	ed 91       	ld	r30, X+
     3e0:	fc 91       	ld	r31, X
     3e2:	13 97       	sbiw	r26, 0x03	; 3
     3e4:	04 80       	ldd	r0, Z+4	; 0x04
     3e6:	f5 81       	ldd	r31, Z+5	; 0x05
     3e8:	e0 2d       	mov	r30, r0
     3ea:	20 81       	ld	r18, Z
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__lshrdi3>
     3fe:	82 2f       	mov	r24, r18
     400:	81 70       	andi	r24, 0x01	; 1
     402:	0f 91       	pop	r16
     404:	08 95       	ret

00000406 <_ZN6driver10atmega328p4Gpio5writeEb>:
     406:	0f 93       	push	r16
     408:	66 23       	and	r22, r22
     40a:	c9 f0       	breq	.+50     	; 0x43e <_ZN6driver10atmega328p4Gpio5writeEb+0x38>
     40c:	dc 01       	movw	r26, r24
     40e:	14 96       	adiw	r26, 0x04	; 4
     410:	0c 91       	ld	r16, X
     412:	14 97       	sbiw	r26, 0x04	; 4
     414:	12 96       	adiw	r26, 0x02	; 2
     416:	ed 91       	ld	r30, X+
     418:	fc 91       	ld	r31, X
     41a:	13 97       	sbiw	r26, 0x03	; 3
     41c:	02 80       	ldd	r0, Z+2	; 0x02
     41e:	f3 81       	ldd	r31, Z+3	; 0x03
     420:	e0 2d       	mov	r30, r0
     422:	a0 81       	ld	r26, Z
     424:	21 e0       	ldi	r18, 0x01	; 1
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	40 e0       	ldi	r20, 0x00	; 0
     42a:	50 e0       	ldi	r21, 0x00	; 0
     42c:	60 e0       	ldi	r22, 0x00	; 0
     42e:	70 e0       	ldi	r23, 0x00	; 0
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__ashldi3>
     438:	2a 2b       	or	r18, r26
     43a:	20 83       	st	Z, r18
     43c:	15 c0       	rjmp	.+42     	; 0x468 <_ZN6driver10atmega328p4Gpio5writeEb+0x62>
     43e:	fc 01       	movw	r30, r24
     440:	04 81       	ldd	r16, Z+4	; 0x04
     442:	02 80       	ldd	r0, Z+2	; 0x02
     444:	f3 81       	ldd	r31, Z+3	; 0x03
     446:	e0 2d       	mov	r30, r0
     448:	a2 81       	ldd	r26, Z+2	; 0x02
     44a:	b3 81       	ldd	r27, Z+3	; 0x03
     44c:	ec 91       	ld	r30, X
     44e:	21 e0       	ldi	r18, 0x01	; 1
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	40 e0       	ldi	r20, 0x00	; 0
     454:	50 e0       	ldi	r21, 0x00	; 0
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__ashldi3>
     462:	20 95       	com	r18
     464:	e2 23       	and	r30, r18
     466:	ec 93       	st	X, r30
     468:	0f 91       	pop	r16
     46a:	08 95       	ret

0000046c <_ZN6driver10atmega328p4Gpio6toggleEv>:
     46c:	0f 93       	push	r16
     46e:	dc 01       	movw	r26, r24
     470:	14 96       	adiw	r26, 0x04	; 4
     472:	0c 91       	ld	r16, X
     474:	14 97       	sbiw	r26, 0x04	; 4
     476:	12 96       	adiw	r26, 0x02	; 2
     478:	ed 91       	ld	r30, X+
     47a:	fc 91       	ld	r31, X
     47c:	13 97       	sbiw	r26, 0x03	; 3
     47e:	04 80       	ldd	r0, Z+4	; 0x04
     480:	f5 81       	ldd	r31, Z+5	; 0x05
     482:	e0 2d       	mov	r30, r0
     484:	a0 81       	ld	r26, Z
     486:	21 e0       	ldi	r18, 0x01	; 1
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	40 e0       	ldi	r20, 0x00	; 0
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__ashldi3>
     49a:	2a 2b       	or	r18, r26
     49c:	20 83       	st	Z, r18
     49e:	0f 91       	pop	r16
     4a0:	08 95       	ret

000004a2 <_ZN6driver10atmega328p4Gpio21enableInterruptOnPortEb>:
     4a2:	0f 93       	push	r16
     4a4:	66 23       	and	r22, r22
     4a6:	b1 f0       	breq	.+44     	; 0x4d4 <_ZN6driver10atmega328p4Gpio21enableInterruptOnPortEb+0x32>
     4a8:	dc 01       	movw	r26, r24
     4aa:	12 96       	adiw	r26, 0x02	; 2
     4ac:	ed 91       	ld	r30, X+
     4ae:	fc 91       	ld	r31, X
     4b0:	13 97       	sbiw	r26, 0x03	; 3
     4b2:	00 85       	ldd	r16, Z+8	; 0x08
     4b4:	e8 e6       	ldi	r30, 0x68	; 104
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	a0 81       	ld	r26, Z
     4ba:	21 e0       	ldi	r18, 0x01	; 1
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	40 e0       	ldi	r20, 0x00	; 0
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	60 e0       	ldi	r22, 0x00	; 0
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__ashldi3>
     4ce:	2a 2b       	or	r18, r26
     4d0:	20 83       	st	Z, r18
     4d2:	16 c0       	rjmp	.+44     	; 0x500 <_ZN6driver10atmega328p4Gpio21enableInterruptOnPortEb+0x5e>
     4d4:	dc 01       	movw	r26, r24
     4d6:	12 96       	adiw	r26, 0x02	; 2
     4d8:	ed 91       	ld	r30, X+
     4da:	fc 91       	ld	r31, X
     4dc:	13 97       	sbiw	r26, 0x03	; 3
     4de:	00 85       	ldd	r16, Z+8	; 0x08
     4e0:	a8 e6       	ldi	r26, 0x68	; 104
     4e2:	b0 e0       	ldi	r27, 0x00	; 0
     4e4:	ec 91       	ld	r30, X
     4e6:	21 e0       	ldi	r18, 0x01	; 1
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	40 e0       	ldi	r20, 0x00	; 0
     4ec:	50 e0       	ldi	r21, 0x00	; 0
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__ashldi3>
     4fa:	20 95       	com	r18
     4fc:	e2 23       	and	r30, r18
     4fe:	ec 93       	st	X, r30
     500:	0f 91       	pop	r16
     502:	08 95       	ret

00000504 <_ZN6driver10atmega328p4Gpio15enableInterruptEb>:
     504:	0f 93       	push	r16
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	66 23       	and	r22, r22
     50c:	49 f1       	breq	.+82     	; 0x560 <_ZN6driver10atmega328p4Gpio15enableInterruptEb+0x5c>
     50e:	ec 01       	movw	r28, r24
     510:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_ZN5utils21globalInterruptEnableEv>
     514:	ea 81       	ldd	r30, Y+2	; 0x02
     516:	fb 81       	ldd	r31, Y+3	; 0x03
     518:	00 85       	ldd	r16, Z+8	; 0x08
     51a:	e8 e6       	ldi	r30, 0x68	; 104
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	a0 81       	ld	r26, Z
     520:	21 e0       	ldi	r18, 0x01	; 1
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	40 e0       	ldi	r20, 0x00	; 0
     526:	50 e0       	ldi	r21, 0x00	; 0
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__ashldi3>
     534:	2a 2b       	or	r18, r26
     536:	20 83       	st	Z, r18
     538:	0c 81       	ldd	r16, Y+4	; 0x04
     53a:	ea 81       	ldd	r30, Y+2	; 0x02
     53c:	fb 81       	ldd	r31, Y+3	; 0x03
     53e:	06 80       	ldd	r0, Z+6	; 0x06
     540:	f7 81       	ldd	r31, Z+7	; 0x07
     542:	e0 2d       	mov	r30, r0
     544:	a0 81       	ld	r26, Z
     546:	21 e0       	ldi	r18, 0x01	; 1
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	40 e0       	ldi	r20, 0x00	; 0
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	60 e0       	ldi	r22, 0x00	; 0
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__ashldi3>
     55a:	2a 2b       	or	r18, r26
     55c:	20 83       	st	Z, r18
     55e:	18 c0       	rjmp	.+48     	; 0x590 <_ZN6driver10atmega328p4Gpio15enableInterruptEb+0x8c>
     560:	dc 01       	movw	r26, r24
     562:	14 96       	adiw	r26, 0x04	; 4
     564:	0c 91       	ld	r16, X
     566:	14 97       	sbiw	r26, 0x04	; 4
     568:	12 96       	adiw	r26, 0x02	; 2
     56a:	ed 91       	ld	r30, X+
     56c:	fc 91       	ld	r31, X
     56e:	13 97       	sbiw	r26, 0x03	; 3
     570:	a6 81       	ldd	r26, Z+6	; 0x06
     572:	b7 81       	ldd	r27, Z+7	; 0x07
     574:	ec 91       	ld	r30, X
     576:	21 e0       	ldi	r18, 0x01	; 1
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	50 e0       	ldi	r21, 0x00	; 0
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__ashldi3>
     58a:	20 95       	com	r18
     58c:	e2 23       	and	r30, r18
     58e:	ec 93       	st	X, r30
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	0f 91       	pop	r16
     596:	08 95       	ret

00000598 <_ZN6driver10atmega328p4GpioD1Ev>:
     598:	4f 92       	push	r4
     59a:	5f 92       	push	r5
     59c:	6f 92       	push	r6
     59e:	7f 92       	push	r7
     5a0:	8f 92       	push	r8
     5a2:	9f 92       	push	r9
     5a4:	af 92       	push	r10
     5a6:	bf 92       	push	r11
     5a8:	cf 92       	push	r12
     5aa:	df 92       	push	r13
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	ec 01       	movw	r28, r24
     5b8:	88 e9       	ldi	r24, 0x98	; 152
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	99 83       	std	Y+1, r25	; 0x01
     5be:	88 83       	st	Y, r24
     5c0:	0c 81       	ldd	r16, Y+4	; 0x04
     5c2:	ea 81       	ldd	r30, Y+2	; 0x02
     5c4:	fb 81       	ldd	r31, Y+3	; 0x03
     5c6:	a0 81       	ld	r26, Z
     5c8:	b1 81       	ldd	r27, Z+1	; 0x01
     5ca:	ec 91       	ld	r30, X
     5cc:	21 e0       	ldi	r18, 0x01	; 1
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	50 e0       	ldi	r21, 0x00	; 0
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__ashldi3>
     5e0:	20 95       	com	r18
     5e2:	e2 23       	and	r30, r18
     5e4:	ec 93       	st	X, r30
     5e6:	0c 81       	ldd	r16, Y+4	; 0x04
     5e8:	ea 81       	ldd	r30, Y+2	; 0x02
     5ea:	fb 81       	ldd	r31, Y+3	; 0x03
     5ec:	a2 81       	ldd	r26, Z+2	; 0x02
     5ee:	b3 81       	ldd	r27, Z+3	; 0x03
     5f0:	ec 91       	ld	r30, X
     5f2:	21 e0       	ldi	r18, 0x01	; 1
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	40 e0       	ldi	r20, 0x00	; 0
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	60 e0       	ldi	r22, 0x00	; 0
     5fc:	70 e0       	ldi	r23, 0x00	; 0
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__ashldi3>
     606:	20 95       	com	r18
     608:	e2 23       	and	r30, r18
     60a:	ec 93       	st	X, r30
     60c:	0c 81       	ldd	r16, Y+4	; 0x04
     60e:	e4 ea       	ldi	r30, 0xA4	; 164
     610:	f2 e0       	ldi	r31, 0x02	; 2
     612:	40 80       	ld	r4, Z
     614:	51 80       	ldd	r5, Z+1	; 0x01
     616:	62 80       	ldd	r6, Z+2	; 0x02
     618:	73 80       	ldd	r7, Z+3	; 0x03
     61a:	21 e0       	ldi	r18, 0x01	; 1
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	40 e0       	ldi	r20, 0x00	; 0
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__ashldi3>
     62e:	82 2e       	mov	r8, r18
     630:	93 2e       	mov	r9, r19
     632:	a4 2e       	mov	r10, r20
     634:	b5 2e       	mov	r11, r21
     636:	80 94       	com	r8
     638:	90 94       	com	r9
     63a:	a0 94       	com	r10
     63c:	b0 94       	com	r11
     63e:	84 20       	and	r8, r4
     640:	95 20       	and	r9, r5
     642:	a6 20       	and	r10, r6
     644:	b7 20       	and	r11, r7
     646:	80 82       	st	Z, r8
     648:	91 82       	std	Z+1, r9	; 0x01
     64a:	a2 82       	std	Z+2, r10	; 0x02
     64c:	b3 82       	std	Z+3, r11	; 0x03
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	ce 01       	movw	r24, r28
     652:	0e 94 82 02 	call	0x504	; 0x504 <_ZN6driver10atmega328p4Gpio15enableInterruptEb>
     656:	1b 82       	std	Y+3, r1	; 0x03
     658:	1a 82       	std	Y+2, r1	; 0x02
     65a:	84 e8       	ldi	r24, 0x84	; 132
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	99 83       	std	Y+1, r25	; 0x01
     660:	88 83       	st	Y, r24
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	0f 91       	pop	r16
     668:	ff 90       	pop	r15
     66a:	ef 90       	pop	r14
     66c:	df 90       	pop	r13
     66e:	cf 90       	pop	r12
     670:	bf 90       	pop	r11
     672:	af 90       	pop	r10
     674:	9f 90       	pop	r9
     676:	8f 90       	pop	r8
     678:	7f 90       	pop	r7
     67a:	6f 90       	pop	r6
     67c:	5f 90       	pop	r5
     67e:	4f 90       	pop	r4
     680:	08 95       	ret

00000682 <_ZN6driver10atmega328p4GpioD0Ev>:
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	ec 01       	movw	r28, r24
     688:	0e 94 cc 02 	call	0x598	; 0x598 <_ZN6driver10atmega328p4GpioD1Ev>
     68c:	65 e0       	ldi	r22, 0x05	; 5
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	ce 01       	movw	r24, r28
     692:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZdlPvj>
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	08 95       	ret

0000069c <_ZN6driver10atmega328p4Gpio12initHardwareEh>:
     69c:	88 30       	cpi	r24, 0x08	; 8
     69e:	20 f0       	brcs	.+8      	; 0x6a8 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0xc>
     6a0:	8e 30       	cpi	r24, 0x0E	; 14
     6a2:	20 f0       	brcs	.+8      	; 0x6ac <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x10>
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	03 c0       	rjmp	.+6      	; 0x6ae <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x12>
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	01 c0       	rjmp	.+2      	; 0x6ae <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x12>
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	91 11       	cpse	r25, r1
     6b0:	0f c0       	rjmp	.+30     	; 0x6d0 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x34>
     6b2:	8e 30       	cpi	r24, 0x0E	; 14
     6b4:	18 f0       	brcs	.+6      	; 0x6bc <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x20>
     6b6:	84 31       	cpi	r24, 0x14	; 20
     6b8:	08 f4       	brcc	.+2      	; 0x6bc <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x20>
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	91 11       	cpse	r25, r1
     6be:	0b c0       	rjmp	.+22     	; 0x6d6 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x3a>
     6c0:	86 30       	cpi	r24, 0x06	; 6
     6c2:	08 f4       	brcc	.+2      	; 0x6c6 <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x2a>
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	99 23       	and	r25, r25
     6c8:	49 f0       	breq	.+18     	; 0x6dc <_ZN6driver10atmega328p4Gpio12initHardwareEh+0x40>
     6ca:	86 e0       	ldi	r24, 0x06	; 6
     6cc:	91 e0       	ldi	r25, 0x01	; 1
     6ce:	08 95       	ret
     6d0:	8a e1       	ldi	r24, 0x1A	; 26
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	08 95       	ret
     6d6:	80 e1       	ldi	r24, 0x10	; 16
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	08 95       	ret
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	08 95       	ret

000006e2 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE>:
     6e2:	4f 92       	push	r4
     6e4:	5f 92       	push	r5
     6e6:	6f 92       	push	r6
     6e8:	7f 92       	push	r7
     6ea:	8f 92       	push	r8
     6ec:	9f 92       	push	r9
     6ee:	af 92       	push	r10
     6f0:	bf 92       	push	r11
     6f2:	cf 92       	push	r12
     6f4:	df 92       	push	r13
     6f6:	ef 92       	push	r14
     6f8:	ff 92       	push	r15
     6fa:	0f 93       	push	r16
     6fc:	e8 2f       	mov	r30, r24
     6fe:	84 31       	cpi	r24, 0x14	; 20
     700:	d8 f4       	brcc	.+54     	; 0x738 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x56>
     702:	63 30       	cpi	r22, 0x03	; 3
     704:	d8 f4       	brcc	.+54     	; 0x73c <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x5a>
     706:	84 31       	cpi	r24, 0x14	; 20
     708:	a8 f4       	brcc	.+42     	; 0x734 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x52>
     70a:	80 90 a4 02 	lds	r8, 0x02A4	; 0x8002a4 <_ZN6driver10atmega328p12_GLOBAL__N_19GpioParam11pinRegistryE>
     70e:	90 90 a5 02 	lds	r9, 0x02A5	; 0x8002a5 <_ZN6driver10atmega328p12_GLOBAL__N_19GpioParam11pinRegistryE+0x1>
     712:	a0 90 a6 02 	lds	r10, 0x02A6	; 0x8002a6 <_ZN6driver10atmega328p12_GLOBAL__N_19GpioParam11pinRegistryE+0x2>
     716:	b0 90 a7 02 	lds	r11, 0x02A7	; 0x8002a7 <_ZN6driver10atmega328p12_GLOBAL__N_19GpioParam11pinRegistryE+0x3>
     71a:	28 2d       	mov	r18, r8
     71c:	39 2d       	mov	r19, r9
     71e:	4a 2d       	mov	r20, r10
     720:	5b 2d       	mov	r21, r11
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	0e 2f       	mov	r16, r30
     72c:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__lshrdi3>
     730:	21 70       	andi	r18, 0x01	; 1
     732:	05 c0       	rjmp	.+10     	; 0x73e <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x5c>
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	03 c0       	rjmp	.+6      	; 0x73e <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x5c>
     738:	21 e0       	ldi	r18, 0x01	; 1
     73a:	01 c0       	rjmp	.+2      	; 0x73e <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0x5c>
     73c:	21 e0       	ldi	r18, 0x01	; 1
     73e:	21 11       	cpse	r18, r1
     740:	28 c0       	rjmp	.+80     	; 0x792 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0xb0>
     742:	0e 2f       	mov	r16, r30
     744:	8e 2f       	mov	r24, r30
     746:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN6driver10atmega328p4Gpio12initHardwareEh>
     74a:	fc 01       	movw	r30, r24
     74c:	00 97       	sbiw	r24, 0x00	; 0
     74e:	21 f1       	breq	.+72     	; 0x798 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0xb6>
     750:	a4 ea       	ldi	r26, 0xA4	; 164
     752:	b2 e0       	ldi	r27, 0x02	; 2
     754:	4d 90       	ld	r4, X+
     756:	5d 90       	ld	r5, X+
     758:	6d 90       	ld	r6, X+
     75a:	7c 90       	ld	r7, X
     75c:	13 97       	sbiw	r26, 0x03	; 3
     75e:	21 e0       	ldi	r18, 0x01	; 1
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	40 e0       	ldi	r20, 0x00	; 0
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__ashldi3>
     772:	82 2e       	mov	r8, r18
     774:	93 2e       	mov	r9, r19
     776:	a4 2e       	mov	r10, r20
     778:	b5 2e       	mov	r11, r21
     77a:	84 28       	or	r8, r4
     77c:	95 28       	or	r9, r5
     77e:	a6 28       	or	r10, r6
     780:	b7 28       	or	r11, r7
     782:	8d 92       	st	X+, r8
     784:	9d 92       	st	X+, r9
     786:	ad 92       	st	X+, r10
     788:	bc 92       	st	X, r11
     78a:	13 97       	sbiw	r26, 0x03	; 3
     78c:	8e 2f       	mov	r24, r30
     78e:	9f 2f       	mov	r25, r31
     790:	04 c0       	rjmp	.+8      	; 0x79a <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0xb8>
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	01 c0       	rjmp	.+2      	; 0x79a <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE+0xb8>
     798:	9f 2f       	mov	r25, r31
     79a:	0f 91       	pop	r16
     79c:	ff 90       	pop	r15
     79e:	ef 90       	pop	r14
     7a0:	df 90       	pop	r13
     7a2:	cf 90       	pop	r12
     7a4:	bf 90       	pop	r11
     7a6:	af 90       	pop	r10
     7a8:	9f 90       	pop	r9
     7aa:	8f 90       	pop	r8
     7ac:	7f 90       	pop	r7
     7ae:	6f 90       	pop	r6
     7b0:	5f 90       	pop	r5
     7b2:	4f 90       	pop	r4
     7b4:	08 95       	ret

000007b6 <_ZN6driver10atmega328p4Gpio12setDirectionENS1_9DirectionE>:
     7b6:	0f 93       	push	r16
     7b8:	61 30       	cpi	r22, 0x01	; 1
     7ba:	c9 f4       	brne	.+50     	; 0x7ee <_ZN6driver10atmega328p4Gpio12setDirectionENS1_9DirectionE+0x38>
     7bc:	dc 01       	movw	r26, r24
     7be:	14 96       	adiw	r26, 0x04	; 4
     7c0:	0c 91       	ld	r16, X
     7c2:	14 97       	sbiw	r26, 0x04	; 4
     7c4:	12 96       	adiw	r26, 0x02	; 2
     7c6:	ed 91       	ld	r30, X+
     7c8:	fc 91       	ld	r31, X
     7ca:	13 97       	sbiw	r26, 0x03	; 3
     7cc:	02 80       	ldd	r0, Z+2	; 0x02
     7ce:	f3 81       	ldd	r31, Z+3	; 0x03
     7d0:	e0 2d       	mov	r30, r0
     7d2:	a0 81       	ld	r26, Z
     7d4:	21 e0       	ldi	r18, 0x01	; 1
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	40 e0       	ldi	r20, 0x00	; 0
     7da:	50 e0       	ldi	r21, 0x00	; 0
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__ashldi3>
     7e8:	2a 2b       	or	r18, r26
     7ea:	20 83       	st	Z, r18
     7ec:	17 c0       	rjmp	.+46     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     7ee:	62 30       	cpi	r22, 0x02	; 2
     7f0:	a9 f4       	brne	.+42     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     7f2:	fc 01       	movw	r30, r24
     7f4:	04 81       	ldd	r16, Z+4	; 0x04
     7f6:	02 80       	ldd	r0, Z+2	; 0x02
     7f8:	f3 81       	ldd	r31, Z+3	; 0x03
     7fa:	e0 2d       	mov	r30, r0
     7fc:	01 90       	ld	r0, Z+
     7fe:	f0 81       	ld	r31, Z
     800:	e0 2d       	mov	r30, r0
     802:	a0 81       	ld	r26, Z
     804:	21 e0       	ldi	r18, 0x01	; 1
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	40 e0       	ldi	r20, 0x00	; 0
     80a:	50 e0       	ldi	r21, 0x00	; 0
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__ashldi3>
     818:	2a 2b       	or	r18, r26
     81a:	20 83       	st	Z, r18
     81c:	0f 91       	pop	r16
     81e:	08 95       	ret

00000820 <_ZN9container5ArrayIPFvvELj3EEC1Ev>:
     820:	26 e0       	ldi	r18, 0x06	; 6
     822:	fc 01       	movw	r30, r24
     824:	11 92       	st	Z+, r1
     826:	2a 95       	dec	r18
     828:	e9 f7       	brne	.-6      	; 0x824 <_ZN9container5ArrayIPFvvELj3EEC1Ev+0x4>
     82a:	08 95       	ret

0000082c <_ZN9container13CallbackArrayILj3EEC1Ev>:
     82c:	0e 94 10 04 	call	0x820	; 0x820 <_ZN9container5ArrayIPFvvELj3EEC1Ev>
     830:	08 95       	ret

00000832 <_ZNK9container13CallbackArrayILj3EE12isIndexValidEj>:
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	63 30       	cpi	r22, 0x03	; 3
     836:	71 05       	cpc	r23, r1
     838:	08 f0       	brcs	.+2      	; 0x83c <_ZNK9container13CallbackArrayILj3EE12isIndexValidEj+0xa>
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	08 95       	ret

0000083e <_ZN9container13CallbackArrayILj3EE3addEPFvvEj>:
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	8c 01       	movw	r16, r24
     84c:	7b 01       	movw	r14, r22
     84e:	ea 01       	movw	r28, r20
     850:	ba 01       	movw	r22, r20
     852:	0e 94 19 04 	call	0x832	; 0x832 <_ZNK9container13CallbackArrayILj3EE12isIndexValidEj>
     856:	88 23       	and	r24, r24
     858:	21 f0       	breq	.+8      	; 0x862 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x24>
     85a:	e1 14       	cp	r14, r1
     85c:	f1 04       	cpc	r15, r1
     85e:	19 f4       	brne	.+6      	; 0x866 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x28>
     860:	03 c0       	rjmp	.+6      	; 0x868 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x2a>
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	01 c0       	rjmp	.+2      	; 0x868 <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x2a>
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	81 11       	cpse	r24, r1
     86a:	08 c0       	rjmp	.+16     	; 0x87c <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x3e>
     86c:	cc 0f       	add	r28, r28
     86e:	dd 1f       	adc	r29, r29
     870:	c0 0f       	add	r28, r16
     872:	d1 1f       	adc	r29, r17
     874:	f9 82       	std	Y+1, r15	; 0x01
     876:	e8 82       	st	Y, r14
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	01 c0       	rjmp	.+2      	; 0x87e <_ZN9container13CallbackArrayILj3EE3addEPFvvEj+0x40>
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16
     886:	ff 90       	pop	r15
     888:	ef 90       	pop	r14
     88a:	08 95       	ret

0000088c <_ZNK6driver10atmega328p4Gpio11setCallbackEPFvvE>:
     88c:	dc 01       	movw	r26, r24
     88e:	12 96       	adiw	r26, 0x02	; 2
     890:	ed 91       	ld	r30, X+
     892:	fc 91       	ld	r31, X
     894:	13 97       	sbiw	r26, 0x03	; 3
     896:	02 80       	ldd	r0, Z+2	; 0x02
     898:	f3 81       	ldd	r31, Z+3	; 0x03
     89a:	e0 2d       	mov	r30, r0
     89c:	90 81       	ld	r25, Z
     89e:	85 b1       	in	r24, 0x05	; 5
     8a0:	98 13       	cpse	r25, r24
     8a2:	07 c0       	rjmp	.+14     	; 0x8b2 <_ZNK6driver10atmega328p4Gpio11setCallbackEPFvvE+0x26>
     8a4:	40 e0       	ldi	r20, 0x00	; 0
     8a6:	50 e0       	ldi	r21, 0x00	; 0
     8a8:	88 ea       	ldi	r24, 0xA8	; 168
     8aa:	92 e0       	ldi	r25, 0x02	; 2
     8ac:	0e 94 1f 04 	call	0x83e	; 0x83e <_ZN9container13CallbackArrayILj3EE3addEPFvvEj>
     8b0:	08 95       	ret
     8b2:	90 81       	ld	r25, Z
     8b4:	88 b1       	in	r24, 0x08	; 8
     8b6:	98 13       	cpse	r25, r24
     8b8:	07 c0       	rjmp	.+14     	; 0x8c8 <_ZNK6driver10atmega328p4Gpio11setCallbackEPFvvE+0x3c>
     8ba:	41 e0       	ldi	r20, 0x01	; 1
     8bc:	50 e0       	ldi	r21, 0x00	; 0
     8be:	88 ea       	ldi	r24, 0xA8	; 168
     8c0:	92 e0       	ldi	r25, 0x02	; 2
     8c2:	0e 94 1f 04 	call	0x83e	; 0x83e <_ZN9container13CallbackArrayILj3EE3addEPFvvEj>
     8c6:	08 95       	ret
     8c8:	90 81       	ld	r25, Z
     8ca:	8b b1       	in	r24, 0x0b	; 11
     8cc:	98 13       	cpse	r25, r24
     8ce:	06 c0       	rjmp	.+12     	; 0x8dc <_ZNK6driver10atmega328p4Gpio11setCallbackEPFvvE+0x50>
     8d0:	42 e0       	ldi	r20, 0x02	; 2
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	88 ea       	ldi	r24, 0xA8	; 168
     8d6:	92 e0       	ldi	r25, 0x02	; 2
     8d8:	0e 94 1f 04 	call	0x83e	; 0x83e <_ZN9container13CallbackArrayILj3EE3addEPFvvEj>
     8dc:	08 95       	ret

000008de <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE>:
     8de:	ef 92       	push	r14
     8e0:	ff 92       	push	r15
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	8c 01       	movw	r16, r24
     8ec:	c6 2f       	mov	r28, r22
     8ee:	d4 2f       	mov	r29, r20
     8f0:	79 01       	movw	r14, r18
     8f2:	88 e9       	ldi	r24, 0x98	; 152
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	f8 01       	movw	r30, r16
     8f8:	91 83       	std	Z+1, r25	; 0x01
     8fa:	80 83       	st	Z, r24
     8fc:	64 2f       	mov	r22, r20
     8fe:	8c 2f       	mov	r24, r28
     900:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_ZN6driver10atmega328p4Gpio7reserveEhNS1_9DirectionE>
     904:	9c 01       	movw	r18, r24
     906:	f8 01       	movw	r30, r16
     908:	93 83       	std	Z+3, r25	; 0x03
     90a:	82 83       	std	Z+2, r24	; 0x02
     90c:	c8 30       	cpi	r28, 0x08	; 8
     90e:	20 f0       	brcs	.+8      	; 0x918 <__stack+0x19>
     910:	ce 30       	cpi	r28, 0x0E	; 14
     912:	20 f0       	brcs	.+8      	; 0x91c <__stack+0x1d>
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	03 c0       	rjmp	.+6      	; 0x91e <__stack+0x1f>
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	01 c0       	rjmp	.+2      	; 0x91e <__stack+0x1f>
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	99 23       	and	r25, r25
     920:	11 f0       	breq	.+4      	; 0x926 <__stack+0x27>
     922:	c8 50       	subi	r28, 0x08	; 8
     924:	0f c0       	rjmp	.+30     	; 0x944 <__stack+0x45>
     926:	ce 30       	cpi	r28, 0x0E	; 14
     928:	18 f0       	brcs	.+6      	; 0x930 <__stack+0x31>
     92a:	c4 31       	cpi	r28, 0x14	; 20
     92c:	08 f4       	brcc	.+2      	; 0x930 <__stack+0x31>
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	99 23       	and	r25, r25
     932:	11 f0       	breq	.+4      	; 0x938 <__stack+0x39>
     934:	ce 50       	subi	r28, 0x0E	; 14
     936:	06 c0       	rjmp	.+12     	; 0x944 <__stack+0x45>
     938:	c6 30       	cpi	r28, 0x06	; 6
     93a:	08 f4       	brcc	.+2      	; 0x93e <__stack+0x3f>
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	91 11       	cpse	r25, r1
     940:	01 c0       	rjmp	.+2      	; 0x944 <__stack+0x45>
     942:	cf ef       	ldi	r28, 0xFF	; 255
     944:	f8 01       	movw	r30, r16
     946:	c4 83       	std	Z+4, r28	; 0x04
     948:	23 2b       	or	r18, r19
     94a:	59 f0       	breq	.+22     	; 0x962 <__stack+0x63>
     94c:	6d 2f       	mov	r22, r29
     94e:	c8 01       	movw	r24, r16
     950:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN6driver10atmega328p4Gpio12setDirectionENS1_9DirectionE>
     954:	e1 14       	cp	r14, r1
     956:	f1 04       	cpc	r15, r1
     958:	21 f0       	breq	.+8      	; 0x962 <__stack+0x63>
     95a:	b7 01       	movw	r22, r14
     95c:	c8 01       	movw	r24, r16
     95e:	0e 94 46 04 	call	0x88c	; 0x88c <_ZNK6driver10atmega328p4Gpio11setCallbackEPFvvE>
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	ff 90       	pop	r15
     96c:	ef 90       	pop	r14
     96e:	08 95       	ret

00000970 <_ZNK9container13CallbackArrayILj3EE17isCallbackDefinedEj>:
     970:	66 0f       	add	r22, r22
     972:	77 1f       	adc	r23, r23
     974:	86 0f       	add	r24, r22
     976:	97 1f       	adc	r25, r23
     978:	fc 01       	movw	r30, r24
     97a:	20 81       	ld	r18, Z
     97c:	31 81       	ldd	r19, Z+1	; 0x01
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	23 2b       	or	r18, r19
     982:	09 f4       	brne	.+2      	; 0x986 <_ZNK9container13CallbackArrayILj3EE17isCallbackDefinedEj+0x16>
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	08 95       	ret

00000988 <_ZN9container13CallbackArrayILj3EE6invokeEj>:
     988:	ef 92       	push	r14
     98a:	ff 92       	push	r15
     98c:	1f 93       	push	r17
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	7c 01       	movw	r14, r24
     994:	eb 01       	movw	r28, r22
     996:	0e 94 19 04 	call	0x832	; 0x832 <_ZNK9container13CallbackArrayILj3EE12isIndexValidEj>
     99a:	18 2f       	mov	r17, r24
     99c:	88 23       	and	r24, r24
     99e:	41 f0       	breq	.+16     	; 0x9b0 <_ZN9container13CallbackArrayILj3EE6invokeEj+0x28>
     9a0:	be 01       	movw	r22, r28
     9a2:	c7 01       	movw	r24, r14
     9a4:	0e 94 b8 04 	call	0x970	; 0x970 <_ZNK9container13CallbackArrayILj3EE17isCallbackDefinedEj>
     9a8:	88 23       	and	r24, r24
     9aa:	19 f0       	breq	.+6      	; 0x9b2 <_ZN9container13CallbackArrayILj3EE6invokeEj+0x2a>
     9ac:	10 e0       	ldi	r17, 0x00	; 0
     9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <_ZN9container13CallbackArrayILj3EE6invokeEj+0x2a>
     9b0:	11 e0       	ldi	r17, 0x01	; 1
     9b2:	11 11       	cpse	r17, r1
     9b4:	09 c0       	rjmp	.+18     	; 0x9c8 <_ZN9container13CallbackArrayILj3EE6invokeEj+0x40>
     9b6:	cc 0f       	add	r28, r28
     9b8:	dd 1f       	adc	r29, r29
     9ba:	ce 0d       	add	r28, r14
     9bc:	df 1d       	adc	r29, r15
     9be:	e8 81       	ld	r30, Y
     9c0:	f9 81       	ldd	r31, Y+1	; 0x01
     9c2:	09 95       	icall
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	01 c0       	rjmp	.+2      	; 0x9ca <_ZN9container13CallbackArrayILj3EE6invokeEj+0x42>
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	ff 90       	pop	r15
     9d2:	ef 90       	pop	r14
     9d4:	08 95       	ret

000009d6 <__vector_3>:
     9d6:	1f 92       	push	r1
     9d8:	0f 92       	push	r0
     9da:	0f b6       	in	r0, 0x3f	; 63
     9dc:	0f 92       	push	r0
     9de:	11 24       	eor	r1, r1
     9e0:	2f 93       	push	r18
     9e2:	3f 93       	push	r19
     9e4:	4f 93       	push	r20
     9e6:	5f 93       	push	r21
     9e8:	6f 93       	push	r22
     9ea:	7f 93       	push	r23
     9ec:	8f 93       	push	r24
     9ee:	9f 93       	push	r25
     9f0:	af 93       	push	r26
     9f2:	bf 93       	push	r27
     9f4:	ef 93       	push	r30
     9f6:	ff 93       	push	r31
     9f8:	60 e0       	ldi	r22, 0x00	; 0
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	88 ea       	ldi	r24, 0xA8	; 168
     9fe:	92 e0       	ldi	r25, 0x02	; 2
     a00:	0e 94 c4 04 	call	0x988	; 0x988 <_ZN9container13CallbackArrayILj3EE6invokeEj>
     a04:	ff 91       	pop	r31
     a06:	ef 91       	pop	r30
     a08:	bf 91       	pop	r27
     a0a:	af 91       	pop	r26
     a0c:	9f 91       	pop	r25
     a0e:	8f 91       	pop	r24
     a10:	7f 91       	pop	r23
     a12:	6f 91       	pop	r22
     a14:	5f 91       	pop	r21
     a16:	4f 91       	pop	r20
     a18:	3f 91       	pop	r19
     a1a:	2f 91       	pop	r18
     a1c:	0f 90       	pop	r0
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	0f 90       	pop	r0
     a22:	1f 90       	pop	r1
     a24:	18 95       	reti

00000a26 <__vector_4>:
     a26:	1f 92       	push	r1
     a28:	0f 92       	push	r0
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	0f 92       	push	r0
     a2e:	11 24       	eor	r1, r1
     a30:	2f 93       	push	r18
     a32:	3f 93       	push	r19
     a34:	4f 93       	push	r20
     a36:	5f 93       	push	r21
     a38:	6f 93       	push	r22
     a3a:	7f 93       	push	r23
     a3c:	8f 93       	push	r24
     a3e:	9f 93       	push	r25
     a40:	af 93       	push	r26
     a42:	bf 93       	push	r27
     a44:	ef 93       	push	r30
     a46:	ff 93       	push	r31
     a48:	61 e0       	ldi	r22, 0x01	; 1
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	88 ea       	ldi	r24, 0xA8	; 168
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	0e 94 c4 04 	call	0x988	; 0x988 <_ZN9container13CallbackArrayILj3EE6invokeEj>
     a54:	ff 91       	pop	r31
     a56:	ef 91       	pop	r30
     a58:	bf 91       	pop	r27
     a5a:	af 91       	pop	r26
     a5c:	9f 91       	pop	r25
     a5e:	8f 91       	pop	r24
     a60:	7f 91       	pop	r23
     a62:	6f 91       	pop	r22
     a64:	5f 91       	pop	r21
     a66:	4f 91       	pop	r20
     a68:	3f 91       	pop	r19
     a6a:	2f 91       	pop	r18
     a6c:	0f 90       	pop	r0
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	0f 90       	pop	r0
     a72:	1f 90       	pop	r1
     a74:	18 95       	reti

00000a76 <__vector_5>:
     a76:	1f 92       	push	r1
     a78:	0f 92       	push	r0
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	0f 92       	push	r0
     a7e:	11 24       	eor	r1, r1
     a80:	2f 93       	push	r18
     a82:	3f 93       	push	r19
     a84:	4f 93       	push	r20
     a86:	5f 93       	push	r21
     a88:	6f 93       	push	r22
     a8a:	7f 93       	push	r23
     a8c:	8f 93       	push	r24
     a8e:	9f 93       	push	r25
     a90:	af 93       	push	r26
     a92:	bf 93       	push	r27
     a94:	ef 93       	push	r30
     a96:	ff 93       	push	r31
     a98:	62 e0       	ldi	r22, 0x02	; 2
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	88 ea       	ldi	r24, 0xA8	; 168
     a9e:	92 e0       	ldi	r25, 0x02	; 2
     aa0:	0e 94 c4 04 	call	0x988	; 0x988 <_ZN9container13CallbackArrayILj3EE6invokeEj>
     aa4:	ff 91       	pop	r31
     aa6:	ef 91       	pop	r30
     aa8:	bf 91       	pop	r27
     aaa:	af 91       	pop	r26
     aac:	9f 91       	pop	r25
     aae:	8f 91       	pop	r24
     ab0:	7f 91       	pop	r23
     ab2:	6f 91       	pop	r22
     ab4:	5f 91       	pop	r21
     ab6:	4f 91       	pop	r20
     ab8:	3f 91       	pop	r19
     aba:	2f 91       	pop	r18
     abc:	0f 90       	pop	r0
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	0f 90       	pop	r0
     ac2:	1f 90       	pop	r1
     ac4:	18 95       	reti

00000ac6 <_Z41__static_initialization_and_destruction_0ii>:

// -----------------------------------------------------------------------------
ISR (PCINT2_vect) { invokeCallback(CallbackIndex::PortD); }

} // namespace atmega328p
} // namespace driver
     ac6:	01 97       	sbiw	r24, 0x01	; 1
     ac8:	39 f4       	brne	.+14     	; 0xad8 <_Z41__static_initialization_and_destruction_0ii+0x12>
     aca:	6f 3f       	cpi	r22, 0xFF	; 255
     acc:	7f 4f       	sbci	r23, 0xFF	; 255
     ace:	21 f4       	brne	.+8      	; 0xad8 <_Z41__static_initialization_and_destruction_0ii+0x12>
    /** Pin registry (1 = reserved, 0 = free). */
    static uint32_t pinRegistry;
};

/** Pointers to callbacks. */
container::CallbackArray<GpioParam::IoPortCount> GpioParam::callbacks{};
     ad0:	88 ea       	ldi	r24, 0xA8	; 168
     ad2:	92 e0       	ldi	r25, 0x02	; 2
     ad4:	0e 94 16 04 	call	0x82c	; 0x82c <_ZN9container13CallbackArrayILj3EEC1Ev>
     ad8:	08 95       	ret

00000ada <_GLOBAL__sub_I__ZN6driver10atmega328p4Gpio9myHwPortBE>:

// -----------------------------------------------------------------------------
ISR (PCINT2_vect) { invokeCallback(CallbackIndex::PortD); }

} // namespace atmega328p
} // namespace driver
     ada:	6f ef       	ldi	r22, 0xFF	; 255
     adc:	7f ef       	ldi	r23, 0xFF	; 255
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 94 63 05 	call	0xac6	; 0xac6 <_Z41__static_initialization_and_destruction_0ii>
     ae6:	08 95       	ret

00000ae8 <_GLOBAL__sub_D__ZN6driver10atmega328p4Gpio9myHwPortBE>:
     ae8:	6f ef       	ldi	r22, 0xFF	; 255
     aea:	7f ef       	ldi	r23, 0xFF	; 255
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0e 94 63 05 	call	0xac6	; 0xac6 <_Z41__static_initialization_and_destruction_0ii>
     af4:	08 95       	ret

00000af6 <_ZN6driver10atmega328p12_GLOBAL__N_112transmitCharEc>:
    static constexpr char NewLine{'\n'};
};

// -----------------------------------------------------------------------------
void transmitChar(const char character) noexcept
{
     af6:	0f 93       	push	r16
     af8:	e8 2f       	mov	r30, r24
// -----------------------------------------------------------------------------
template <typename T>
constexpr bool read(const volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    return reg & (1ULL << bit);
     afa:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	40 e0       	ldi	r20, 0x00	; 0
     b02:	50 e0       	ldi	r21, 0x00	; 0
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	05 e0       	ldi	r16, 0x05	; 5
     b0e:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__lshrdi3>
     b12:	21 70       	andi	r18, 0x01	; 1
    // Wait until the previous character has been sent.
    while (!utils::read(UCSR0A, UDRE0));
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	40 e0       	ldi	r20, 0x00	; 0
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__cmpdi2_s8>
     b28:	41 f3       	breq	.-48     	; 0xafa <_ZN6driver10atmega328p12_GLOBAL__N_112transmitCharEc+0x4>

    // Put the new character in the transmission register.
    UDR0 = character;
     b2a:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
     b2e:	0f 91       	pop	r16
     b30:	08 95       	ret

00000b32 <__tcf_0>:
{
public:
    /**
     * @brief Delete the serial device.
     */
    virtual ~SerialInterface() noexcept = default;
     b32:	8c ea       	ldi	r24, 0xAC	; 172
     b34:	91 e0       	ldi	r25, 0x01	; 1
     b36:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <_ZZN6driver10atmega328p6Serial11getInstanceEvE10myInstance+0x1>
     b3a:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <_ZZN6driver10atmega328p6Serial11getInstanceEvE10myInstance>
     b3e:	08 95       	ret

00000b40 <_ZNK6driver10atmega328p6Serial12baudRate_bpsEv>:
    // Return a reference to the singleton serial instance, cast to the corresponding interface.
    return myInstance; 
}

// -----------------------------------------------------------------------------
uint32_t Serial::baudRate_bps() const { return Param::BaudRate_bps; }
     b40:	60 e8       	ldi	r22, 0x80	; 128
     b42:	75 e2       	ldi	r23, 0x25	; 37
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	08 95       	ret

00000b4a <_ZNK6driver10atmega328p6Serial13isInitializedEv>:

// -----------------------------------------------------------------------------
bool Serial::isInitialized() const noexcept { return true; }
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	08 95       	ret

00000b4e <_ZNK6driver10atmega328p6Serial9isEnabledEv>:

// -----------------------------------------------------------------------------
bool Serial::isEnabled() const noexcept { return myEnabled; }
     b4e:	fc 01       	movw	r30, r24
     b50:	82 81       	ldd	r24, Z+2	; 0x02
     b52:	08 95       	ret

00000b54 <_ZN6driver10atmega328p6Serial10setEnabledEb>:

// -----------------------------------------------------------------------------
void Serial::setEnabled(const bool enable) noexcept { myEnabled = enable; }
     b54:	fc 01       	movw	r30, r24
     b56:	62 83       	std	Z+2, r22	; 0x02
     b58:	08 95       	ret

00000b5a <_ZNK6driver10atmega328p6Serial5printEPKc>:
    UDR0 = Param::CarriageReturn;
}

// -----------------------------------------------------------------------------
void Serial::print(const char* message) const noexcept
{
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	eb 01       	movw	r28, r22
    // Terminate the function if serial transmission isn't enabled.
    if (!myEnabled) { return; }
     b60:	fc 01       	movw	r30, r24
     b62:	82 81       	ldd	r24, Z+2	; 0x02
     b64:	88 23       	and	r24, r24
     b66:	69 f0       	breq	.+26     	; 0xb82 <_ZNK6driver10atmega328p6Serial5printEPKc+0x28>

    // Transmit each character of the string one by one.
    for (const char* it{message}; *it; ++it)
     b68:	88 81       	ld	r24, Y
     b6a:	88 23       	and	r24, r24
     b6c:	51 f0       	breq	.+20     	; 0xb82 <_ZNK6driver10atmega328p6Serial5printEPKc+0x28>
    {
        transmitChar(*it);
     b6e:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN6driver10atmega328p12_GLOBAL__N_112transmitCharEc>
        
        // Send new line characters instead of carriage returns.
        if (Param::CarriageReturn == *it) 
     b72:	88 81       	ld	r24, Y
     b74:	8d 30       	cpi	r24, 0x0D	; 13
     b76:	19 f4       	brne	.+6      	; 0xb7e <_ZNK6driver10atmega328p6Serial5printEPKc+0x24>
        { 
            transmitChar(Param::NewLine); 
     b78:	8a e0       	ldi	r24, 0x0A	; 10
     b7a:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN6driver10atmega328p12_GLOBAL__N_112transmitCharEc>
{
    // Terminate the function if serial transmission isn't enabled.
    if (!myEnabled) { return; }

    // Transmit each character of the string one by one.
    for (const char* it{message}; *it; ++it)
     b7e:	21 96       	adiw	r28, 0x01	; 1
     b80:	f3 cf       	rjmp	.-26     	; 0xb68 <_ZNK6driver10atmega328p6Serial5printEPKc+0xe>
        if (Param::CarriageReturn == *it) 
        { 
            transmitChar(Param::NewLine); 
        }
    }
}
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	08 95       	ret

00000b88 <_ZN6driver10atmega328p6SerialD1Ev>:
     b88:	2c ea       	ldi	r18, 0xAC	; 172
     b8a:	31 e0       	ldi	r19, 0x01	; 1
     b8c:	fc 01       	movw	r30, r24
     b8e:	31 83       	std	Z+1, r19	; 0x01
     b90:	20 83       	st	Z, r18
     b92:	08 95       	ret

00000b94 <_ZN6driver10atmega328p6SerialD0Ev>:
     b94:	2c ea       	ldi	r18, 0xAC	; 172
     b96:	31 e0       	ldi	r19, 0x01	; 1
     b98:	fc 01       	movw	r30, r24
     b9a:	31 83       	std	Z+1, r19	; 0x01
     b9c:	20 83       	st	Z, r18
    Serial() noexcept;

    /**
     * @brief Delete the serial device.
     */
    ~Serial() noexcept override = default;
     b9e:	63 e0       	ldi	r22, 0x03	; 3
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZdlPvj>
     ba6:	08 95       	ret

00000ba8 <_ZN6driver10atmega328p6SerialC1Ev>:
// -----------------------------------------------------------------------------
void Serial::setEnabled(const bool enable) noexcept { myEnabled = enable; }

// -----------------------------------------------------------------------------
Serial::Serial() noexcept 
    : myEnabled{false}
     ba8:	2e eb       	ldi	r18, 0xBE	; 190
     baa:	31 e0       	ldi	r19, 0x01	; 1
     bac:	fc 01       	movw	r30, r24
     bae:	31 83       	std	Z+1, r19	; 0x01
     bb0:	20 83       	st	Z, r18
     bb2:	12 82       	std	Z+2, r1	; 0x02
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
     bb4:	e1 ec       	ldi	r30, 0xC1	; 193
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	88 60       	ori	r24, 0x08	; 8
     bbc:	80 83       	st	Z, r24
     bbe:	e2 ec       	ldi	r30, 0xC2	; 194
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	82 60       	ori	r24, 0x02	; 2
     bc6:	80 83       	st	Z, r24
     bc8:	80 81       	ld	r24, Z
     bca:	84 60       	ori	r24, 0x04	; 4
     bcc:	80 83       	st	Z, r24

    // Set the data size to eight bits per byte.
    utils::set(UCSR0C, UCSZ00, UCSZ01);

    // Set the baud rate to 9600 kbps.
    UBRR0 = baudRateValue;
     bce:	87 e6       	ldi	r24, 0x67	; 103
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     bd6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

    // Send carriage return to align the first message left.
    UDR0 = Param::CarriageReturn;
     bda:	8d e0       	ldi	r24, 0x0D	; 13
     bdc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     be0:	08 95       	ret

00000be2 <_ZN6driver10atmega328p6Serial11getInstanceEv>:

// -----------------------------------------------------------------------------
SerialInterface& Serial::getInstance() noexcept
{ 
    // Create and initialize the singleton serial instance (once only).
    static Serial myInstance{};
     be2:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <_ZGVZN6driver10atmega328p6Serial11getInstanceEvE10myInstance>
     be6:	81 11       	cpse	r24, r1
     be8:	12 c0       	rjmp	.+36     	; 0xc0e <_ZN6driver10atmega328p6Serial11getInstanceEv+0x2c>
     bea:	81 eb       	ldi	r24, 0xB1	; 177
     bec:	92 e0       	ldi	r25, 0x02	; 2
     bee:	0e 94 76 0c 	call	0x18ec	; 0x18ec <__cxa_guard_acquire>
     bf2:	89 2b       	or	r24, r25
     bf4:	61 f0       	breq	.+24     	; 0xc0e <_ZN6driver10atmega328p6Serial11getInstanceEv+0x2c>
     bf6:	8e ea       	ldi	r24, 0xAE	; 174
     bf8:	92 e0       	ldi	r25, 0x02	; 2
     bfa:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6driver10atmega328p6SerialC1Ev>
     bfe:	81 eb       	ldi	r24, 0xB1	; 177
     c00:	92 e0       	ldi	r25, 0x02	; 2
     c02:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__cxa_guard_release>
     c06:	89 e9       	ldi	r24, 0x99	; 153
     c08:	95 e0       	ldi	r25, 0x05	; 5
     c0a:	0e 94 76 00 	call	0xec	; 0xec <atexit>

    // Return a reference to the singleton serial instance, cast to the corresponding interface.
    return myInstance; 
}
     c0e:	8e ea       	ldi	r24, 0xAE	; 174
     c10:	92 e0       	ldi	r25, 0x02	; 2
     c12:	08 95       	ret

00000c14 <_ZNK6driver10atmega328p5Timer13isInitializedEv>:
     c14:	21 e0       	ldi	r18, 0x01	; 1
     c16:	fc 01       	movw	r30, r24
     c18:	82 81       	ldd	r24, Z+2	; 0x02
     c1a:	93 81       	ldd	r25, Z+3	; 0x03
     c1c:	89 2b       	or	r24, r25
     c1e:	09 f4       	brne	.+2      	; 0xc22 <_ZNK6driver10atmega328p5Timer13isInitializedEv+0xe>
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	82 2f       	mov	r24, r18
     c24:	08 95       	ret

00000c26 <_ZNK6driver10atmega328p5Timer9isEnabledEv>:
     c26:	fc 01       	movw	r30, r24
     c28:	80 85       	ldd	r24, Z+8	; 0x08
     c2a:	08 95       	ret

00000c2c <_ZN6driver10atmega328p5Timer11hasTimedOutEv>:
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	fc 01       	movw	r30, r24
     c32:	90 85       	ldd	r25, Z+8	; 0x08
     c34:	99 23       	and	r25, r25
     c36:	81 f0       	breq	.+32     	; 0xc58 <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x2c>
     c38:	a2 81       	ldd	r26, Z+2	; 0x02
     c3a:	b3 81       	ldd	r27, Z+3	; 0x03
     c3c:	0d 91       	ld	r16, X+
     c3e:	1d 91       	ld	r17, X+
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	44 81       	ldd	r20, Z+4	; 0x04
     c46:	55 81       	ldd	r21, Z+5	; 0x05
     c48:	66 81       	ldd	r22, Z+6	; 0x06
     c4a:	77 81       	ldd	r23, Z+7	; 0x07
     c4c:	04 17       	cp	r16, r20
     c4e:	15 07       	cpc	r17, r21
     c50:	26 07       	cpc	r18, r22
     c52:	37 07       	cpc	r19, r23
     c54:	18 f4       	brcc	.+6      	; 0xc5c <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x30>
     c56:	03 c0       	rjmp	.+6      	; 0xc5e <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x32>
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	01 c0       	rjmp	.+2      	; 0xc5e <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x32>
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	91 11       	cpse	r25, r1
     c60:	09 c0       	rjmp	.+18     	; 0xc74 <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x48>
     c62:	02 80       	ldd	r0, Z+2	; 0x02
     c64:	f3 81       	ldd	r31, Z+3	; 0x03
     c66:	e0 2d       	mov	r30, r0
     c68:	10 82       	st	Z, r1
     c6a:	11 82       	std	Z+1, r1	; 0x01
     c6c:	12 82       	std	Z+2, r1	; 0x02
     c6e:	13 82       	std	Z+3, r1	; 0x03
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	01 c0       	rjmp	.+2      	; 0xc76 <_ZN6driver10atmega328p5Timer11hasTimedOutEv+0x4a>
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	1f 91       	pop	r17
     c78:	0f 91       	pop	r16
     c7a:	08 95       	ret

00000c7c <_ZNK6driver10atmega328p5Timer10timeout_msEv>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	64 81       	ldd	r22, Z+4	; 0x04
     c80:	75 81       	ldd	r23, Z+5	; 0x05
     c82:	86 81       	ldd	r24, Z+6	; 0x06
     c84:	97 81       	ldd	r25, Z+7	; 0x07
     c86:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__floatunsisf>
     c8a:	2f e6       	ldi	r18, 0x6F	; 111
     c8c:	32 e1       	ldi	r19, 0x12	; 18
     c8e:	43 e0       	ldi	r20, 0x03	; 3
     c90:	5e e3       	ldi	r21, 0x3E	; 62
     c92:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsf3>
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	40 e0       	ldi	r20, 0x00	; 0
     c9c:	5f e3       	ldi	r21, 0x3F	; 63
     c9e:	0e 94 84 0c 	call	0x1908	; 0x1908 <__addsf3>
     ca2:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <__fixunssfsi>
     ca6:	08 95       	ret

00000ca8 <_ZN6driver10atmega328p5Timer4stopEv>:
     ca8:	dc 01       	movw	r26, r24
     caa:	12 96       	adiw	r26, 0x02	; 2
     cac:	ed 91       	ld	r30, X+
     cae:	fc 91       	ld	r31, X
     cb0:	13 97       	sbiw	r26, 0x03	; 3
     cb2:	04 80       	ldd	r0, Z+4	; 0x04
     cb4:	f5 81       	ldd	r31, Z+5	; 0x05
     cb6:	e0 2d       	mov	r30, r0
     cb8:	10 82       	st	Z, r1
     cba:	18 96       	adiw	r26, 0x08	; 8
     cbc:	1c 92       	st	X, r1
     cbe:	08 95       	ret

00000cc0 <_ZN6driver10atmega328p5Timer13setTimeout_msEm>:
     cc0:	cf 92       	push	r12
     cc2:	df 92       	push	r13
     cc4:	ef 92       	push	r14
     cc6:	ff 92       	push	r15
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	ec 01       	movw	r28, r24
     cce:	6a 01       	movw	r12, r20
     cd0:	7b 01       	movw	r14, r22
     cd2:	45 2b       	or	r20, r21
     cd4:	46 2b       	or	r20, r22
     cd6:	47 2b       	or	r20, r23
     cd8:	11 f4       	brne	.+4      	; 0xcde <_ZN6driver10atmega328p5Timer13setTimeout_msEm+0x1e>
     cda:	0e 94 54 06 	call	0xca8	; 0xca8 <_ZN6driver10atmega328p5Timer4stopEv>
     cde:	c1 14       	cp	r12, r1
     ce0:	d1 04       	cpc	r13, r1
     ce2:	e1 04       	cpc	r14, r1
     ce4:	f1 04       	cpc	r15, r1
     ce6:	99 f0       	breq	.+38     	; 0xd0e <_ZN6driver10atmega328p5Timer13setTimeout_msEm+0x4e>
     ce8:	c7 01       	movw	r24, r14
     cea:	b6 01       	movw	r22, r12
     cec:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__floatunsisf>
     cf0:	2f e6       	ldi	r18, 0x6F	; 111
     cf2:	32 e1       	ldi	r19, 0x12	; 18
     cf4:	43 e0       	ldi	r20, 0x03	; 3
     cf6:	5e e3       	ldi	r21, 0x3E	; 62
     cf8:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__divsf3>
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	40 e0       	ldi	r20, 0x00	; 0
     d02:	5f e3       	ldi	r21, 0x3F	; 63
     d04:	0e 94 84 0c 	call	0x1908	; 0x1908 <__addsf3>
     d08:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <__fixunssfsi>
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <_ZN6driver10atmega328p5Timer13setTimeout_msEm+0x54>
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	cb 01       	movw	r24, r22
     d14:	6c 83       	std	Y+4, r22	; 0x04
     d16:	7d 83       	std	Y+5, r23	; 0x05
     d18:	8e 83       	std	Y+6, r24	; 0x06
     d1a:	9f 83       	std	Y+7, r25	; 0x07
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	ff 90       	pop	r15
     d22:	ef 90       	pop	r14
     d24:	df 90       	pop	r13
     d26:	cf 90       	pop	r12
     d28:	08 95       	ret

00000d2a <_ZN6driver10atmega328p5Timer5startEv>:
     d2a:	0f 93       	push	r16
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	fc 01       	movw	r30, r24
     d32:	44 81       	ldd	r20, Z+4	; 0x04
     d34:	55 81       	ldd	r21, Z+5	; 0x05
     d36:	66 81       	ldd	r22, Z+6	; 0x06
     d38:	77 81       	ldd	r23, Z+7	; 0x07
     d3a:	45 2b       	or	r20, r21
     d3c:	46 2b       	or	r20, r22
     d3e:	47 2b       	or	r20, r23
     d40:	c1 f0       	breq	.+48     	; 0xd72 <_ZN6driver10atmega328p5Timer5startEv+0x48>
     d42:	ec 01       	movw	r28, r24
     d44:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_ZN5utils21globalInterruptEnableEv>
     d48:	ea 81       	ldd	r30, Y+2	; 0x02
     d4a:	fb 81       	ldd	r31, Y+3	; 0x03
     d4c:	06 81       	ldd	r16, Z+6	; 0x06
     d4e:	04 80       	ldd	r0, Z+4	; 0x04
     d50:	f5 81       	ldd	r31, Z+5	; 0x05
     d52:	e0 2d       	mov	r30, r0
     d54:	a0 81       	ld	r26, Z
     d56:	21 e0       	ldi	r18, 0x01	; 1
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__ashldi3>
     d6a:	2a 2b       	or	r18, r26
     d6c:	20 83       	st	Z, r18
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	88 87       	std	Y+8, r24	; 0x08
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	0f 91       	pop	r16
     d78:	08 95       	ret

00000d7a <_ZN6driver10atmega328p5Timer6toggleEv>:
     d7a:	fc 01       	movw	r30, r24
     d7c:	20 85       	ldd	r18, Z+8	; 0x08
     d7e:	22 23       	and	r18, r18
     d80:	19 f0       	breq	.+6      	; 0xd88 <_ZN6driver10atmega328p5Timer6toggleEv+0xe>
     d82:	0e 94 54 06 	call	0xca8	; 0xca8 <_ZN6driver10atmega328p5Timer4stopEv>
     d86:	08 95       	ret
     d88:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6driver10atmega328p5Timer5startEv>
     d8c:	08 95       	ret

00000d8e <_ZN6driver10atmega328p5Timer7restartEv>:
     d8e:	dc 01       	movw	r26, r24
     d90:	12 96       	adiw	r26, 0x02	; 2
     d92:	ed 91       	ld	r30, X+
     d94:	fc 91       	ld	r31, X
     d96:	13 97       	sbiw	r26, 0x03	; 3
     d98:	10 82       	st	Z, r1
     d9a:	11 82       	std	Z+1, r1	; 0x01
     d9c:	12 82       	std	Z+2, r1	; 0x02
     d9e:	13 82       	std	Z+3, r1	; 0x03
     da0:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6driver10atmega328p5Timer5startEv>
     da4:	08 95       	ret

00000da6 <_ZN6driver10atmega328p5Timer9incrementEv>:
     da6:	fc 01       	movw	r30, r24
     da8:	80 85       	ldd	r24, Z+8	; 0x08
     daa:	88 23       	and	r24, r24
     dac:	79 f0       	breq	.+30     	; 0xdcc <_ZN6driver10atmega328p5Timer9incrementEv+0x26>
     dae:	02 80       	ldd	r0, Z+2	; 0x02
     db0:	f3 81       	ldd	r31, Z+3	; 0x03
     db2:	e0 2d       	mov	r30, r0
     db4:	40 81       	ld	r20, Z
     db6:	51 81       	ldd	r21, Z+1	; 0x01
     db8:	62 81       	ldd	r22, Z+2	; 0x02
     dba:	73 81       	ldd	r23, Z+3	; 0x03
     dbc:	4f 5f       	subi	r20, 0xFF	; 255
     dbe:	5f 4f       	sbci	r21, 0xFF	; 255
     dc0:	6f 4f       	sbci	r22, 0xFF	; 255
     dc2:	7f 4f       	sbci	r23, 0xFF	; 255
     dc4:	40 83       	st	Z, r20
     dc6:	51 83       	std	Z+1, r21	; 0x01
     dc8:	62 83       	std	Z+2, r22	; 0x02
     dca:	73 83       	std	Z+3, r23	; 0x03
     dcc:	08 95       	ret

00000dce <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_>:
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	d9 f0       	breq	.+54     	; 0xe08 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x3a>
     dd2:	dc 01       	movw	r26, r24
     dd4:	14 96       	adiw	r26, 0x04	; 4
     dd6:	ed 91       	ld	r30, X+
     dd8:	fc 91       	ld	r31, X
     dda:	15 97       	sbiw	r26, 0x05	; 5
     ddc:	10 82       	st	Z, r1
     dde:	17 96       	adiw	r26, 0x07	; 7
     de0:	2c 91       	ld	r18, X
     de2:	21 30       	cpi	r18, 0x01	; 1
     de4:	31 f0       	breq	.+12     	; 0xdf2 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x24>
     de6:	18 f0       	brcs	.+6      	; 0xdee <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x20>
     de8:	22 30       	cpi	r18, 0x02	; 2
     dea:	51 f0       	breq	.+20     	; 0xe00 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x32>
     dec:	0b c0       	rjmp	.+22     	; 0xe04 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x36>
     dee:	15 bc       	out	0x25, r1	; 37
     df0:	09 c0       	rjmp	.+18     	; 0xe04 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x36>
     df2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     df6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     dfa:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_+0x36>
     e00:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     e04:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <free>
     e08:	08 95       	ret

00000e0a <_ZN6driver10atmega328p5Timer8Hardware4initEh>:
     e0a:	cf 93       	push	r28
     e0c:	c8 2f       	mov	r28, r24
     e0e:	88 e0       	ldi	r24, 0x08	; 8
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <malloc>
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	a9 f1       	breq	.+106    	; 0xe84 <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x7a>
     e1a:	c1 30       	cpi	r28, 0x01	; 1
     e1c:	69 f0       	breq	.+26     	; 0xe38 <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x2e>
     e1e:	18 f0       	brcs	.+6      	; 0xe26 <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x1c>
     e20:	c2 30       	cpi	r28, 0x02	; 2
     e22:	d9 f0       	breq	.+54     	; 0xe5a <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x50>
     e24:	24 c0       	rjmp	.+72     	; 0xe6e <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x64>
     e26:	2e e6       	ldi	r18, 0x6E	; 110
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	fc 01       	movw	r30, r24
     e2c:	35 83       	std	Z+5, r19	; 0x05
     e2e:	24 83       	std	Z+4, r18	; 0x04
     e30:	16 82       	std	Z+6, r1	; 0x06
     e32:	22 e0       	ldi	r18, 0x02	; 2
     e34:	25 bd       	out	0x25, r18	; 37
     e36:	20 c0       	rjmp	.+64     	; 0xe78 <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x6e>
     e38:	2f e6       	ldi	r18, 0x6F	; 111
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	fc 01       	movw	r30, r24
     e3e:	35 83       	std	Z+5, r19	; 0x05
     e40:	24 83       	std	Z+4, r18	; 0x04
     e42:	21 e0       	ldi	r18, 0x01	; 1
     e44:	26 83       	std	Z+6, r18	; 0x06
     e46:	2a e0       	ldi	r18, 0x0A	; 10
     e48:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	31 e0       	ldi	r19, 0x01	; 1
     e50:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     e54:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     e58:	0f c0       	rjmp	.+30     	; 0xe78 <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x6e>
     e5a:	20 e7       	ldi	r18, 0x70	; 112
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	fc 01       	movw	r30, r24
     e60:	35 83       	std	Z+5, r19	; 0x05
     e62:	24 83       	std	Z+4, r18	; 0x04
     e64:	16 82       	std	Z+6, r1	; 0x06
     e66:	22 e0       	ldi	r18, 0x02	; 2
     e68:	20 93 b1 00 	sts	0x00B1, r18	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     e6c:	05 c0       	rjmp	.+10     	; 0xe78 <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x6e>
     e6e:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <free>
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	06 c0       	rjmp	.+12     	; 0xe84 <_ZN6driver10atmega328p5Timer8Hardware4initEh+0x7a>
     e78:	fc 01       	movw	r30, r24
     e7a:	10 82       	st	Z, r1
     e7c:	11 82       	std	Z+1, r1	; 0x01
     e7e:	12 82       	std	Z+2, r1	; 0x02
     e80:	13 82       	std	Z+3, r1	; 0x03
     e82:	c7 83       	std	Z+7, r28	; 0x07
     e84:	cf 91       	pop	r28
     e86:	08 95       	ret

00000e88 <_ZN6driver10atmega328p5Timer8Hardware7reserveEv>:
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	83 30       	cpi	r24, 0x03	; 3
     e8c:	78 f4       	brcc	.+30     	; 0xeac <_ZN6driver10atmega328p5Timer8Hardware7reserveEv+0x24>
     e8e:	e8 2f       	mov	r30, r24
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	ee 0f       	add	r30, r30
     e94:	ff 1f       	adc	r31, r31
     e96:	e1 54       	subi	r30, 0x41	; 65
     e98:	fd 4f       	sbci	r31, 0xFD	; 253
     e9a:	20 81       	ld	r18, Z
     e9c:	31 81       	ldd	r19, Z+1	; 0x01
     e9e:	23 2b       	or	r18, r19
     ea0:	19 f4       	brne	.+6      	; 0xea8 <_ZN6driver10atmega328p5Timer8Hardware7reserveEv+0x20>
     ea2:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6driver10atmega328p5Timer8Hardware4initEh>
     ea6:	08 95       	ret
     ea8:	8f 5f       	subi	r24, 0xFF	; 255
     eaa:	ef cf       	rjmp	.-34     	; 0xe8a <_ZN6driver10atmega328p5Timer8Hardware7reserveEv+0x2>
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	08 95       	ret

00000eb2 <_ZNK6driver10atmega328p5Timer11addCallbackEPFvvE>:
     eb2:	dc 01       	movw	r26, r24
     eb4:	12 96       	adiw	r26, 0x02	; 2
     eb6:	ed 91       	ld	r30, X+
     eb8:	fc 91       	ld	r31, X
     eba:	13 97       	sbiw	r26, 0x03	; 3
     ebc:	47 81       	ldd	r20, Z+7	; 0x07
     ebe:	50 e0       	ldi	r21, 0x00	; 0
     ec0:	89 eb       	ldi	r24, 0xB9	; 185
     ec2:	92 e0       	ldi	r25, 0x02	; 2
     ec4:	0e 94 1f 04 	call	0x83e	; 0x83e <_ZN9container13CallbackArrayILj3EE3addEPFvvEj>
     ec8:	08 95       	ret

00000eca <_ZN6driver10atmega328p5TimerC1EmPFvvEb>:
     eca:	8f 92       	push	r8
     ecc:	9f 92       	push	r9
     ece:	af 92       	push	r10
     ed0:	bf 92       	push	r11
     ed2:	cf 92       	push	r12
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	ec 01       	movw	r28, r24
     ee2:	4a 01       	movw	r8, r20
     ee4:	5b 01       	movw	r10, r22
     ee6:	79 01       	movw	r14, r18
     ee8:	8a ee       	ldi	r24, 0xEA	; 234
     eea:	91 e0       	ldi	r25, 0x01	; 1
     eec:	99 83       	std	Y+1, r25	; 0x01
     eee:	88 83       	st	Y, r24
     ef0:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN6driver10atmega328p5Timer8Hardware7reserveEv>
     ef4:	6c 01       	movw	r12, r24
     ef6:	9b 83       	std	Y+3, r25	; 0x03
     ef8:	8a 83       	std	Y+2, r24	; 0x02
     efa:	81 14       	cp	r8, r1
     efc:	91 04       	cpc	r9, r1
     efe:	a1 04       	cpc	r10, r1
     f00:	b1 04       	cpc	r11, r1
     f02:	99 f0       	breq	.+38     	; 0xf2a <_ZN6driver10atmega328p5TimerC1EmPFvvEb+0x60>
     f04:	c5 01       	movw	r24, r10
     f06:	b4 01       	movw	r22, r8
     f08:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__floatunsisf>
     f0c:	2f e6       	ldi	r18, 0x6F	; 111
     f0e:	32 e1       	ldi	r19, 0x12	; 18
     f10:	43 e0       	ldi	r20, 0x03	; 3
     f12:	5e e3       	ldi	r21, 0x3E	; 62
     f14:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__divsf3>
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	5f e3       	ldi	r21, 0x3F	; 63
     f20:	0e 94 84 0c 	call	0x1908	; 0x1908 <__addsf3>
     f24:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <__fixunssfsi>
     f28:	03 c0       	rjmp	.+6      	; 0xf30 <_ZN6driver10atmega328p5TimerC1EmPFvvEb+0x66>
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	cb 01       	movw	r24, r22
     f30:	6c 83       	std	Y+4, r22	; 0x04
     f32:	7d 83       	std	Y+5, r23	; 0x05
     f34:	8e 83       	std	Y+6, r24	; 0x06
     f36:	9f 83       	std	Y+7, r25	; 0x07
     f38:	18 86       	std	Y+8, r1	; 0x08
     f3a:	c1 14       	cp	r12, r1
     f3c:	d1 04       	cpc	r13, r1
     f3e:	99 f0       	breq	.+38     	; 0xf66 <_ZN6driver10atmega328p5TimerC1EmPFvvEb+0x9c>
     f40:	d6 01       	movw	r26, r12
     f42:	17 96       	adiw	r26, 0x07	; 7
     f44:	ec 91       	ld	r30, X
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	ee 0f       	add	r30, r30
     f4a:	ff 1f       	adc	r31, r31
     f4c:	e1 54       	subi	r30, 0x41	; 65
     f4e:	fd 4f       	sbci	r31, 0xFD	; 253
     f50:	d1 83       	std	Z+1, r29	; 0x01
     f52:	c0 83       	st	Z, r28
     f54:	b7 01       	movw	r22, r14
     f56:	ce 01       	movw	r24, r28
     f58:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZNK6driver10atmega328p5Timer11addCallbackEPFvvE>
     f5c:	00 23       	and	r16, r16
     f5e:	19 f0       	breq	.+6      	; 0xf66 <_ZN6driver10atmega328p5TimerC1EmPFvvEb+0x9c>
     f60:	ce 01       	movw	r24, r28
     f62:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6driver10atmega328p5Timer5startEv>
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	0f 91       	pop	r16
     f6c:	ff 90       	pop	r15
     f6e:	ef 90       	pop	r14
     f70:	df 90       	pop	r13
     f72:	cf 90       	pop	r12
     f74:	bf 90       	pop	r11
     f76:	af 90       	pop	r10
     f78:	9f 90       	pop	r9
     f7a:	8f 90       	pop	r8
     f7c:	08 95       	ret

00000f7e <_ZN9container13CallbackArrayILj3EE6removeEj>:
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	8c 01       	movw	r16, r24
     f88:	eb 01       	movw	r28, r22
     f8a:	0e 94 19 04 	call	0x832	; 0x832 <_ZNK9container13CallbackArrayILj3EE12isIndexValidEj>
     f8e:	88 23       	and	r24, r24
     f90:	31 f0       	breq	.+12     	; 0xf9e <_ZN9container13CallbackArrayILj3EE6removeEj+0x20>
     f92:	cc 0f       	add	r28, r28
     f94:	dd 1f       	adc	r29, r29
     f96:	c0 0f       	add	r28, r16
     f98:	d1 1f       	adc	r29, r17
     f9a:	19 82       	std	Y+1, r1	; 0x01
     f9c:	18 82       	st	Y, r1
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	1f 91       	pop	r17
     fa4:	0f 91       	pop	r16
     fa6:	08 95       	ret

00000fa8 <_ZNK6driver10atmega328p5Timer14removeCallbackEv>:
     fa8:	dc 01       	movw	r26, r24
     faa:	12 96       	adiw	r26, 0x02	; 2
     fac:	ed 91       	ld	r30, X+
     fae:	fc 91       	ld	r31, X
     fb0:	13 97       	sbiw	r26, 0x03	; 3
     fb2:	67 81       	ldd	r22, Z+7	; 0x07
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	89 eb       	ldi	r24, 0xB9	; 185
     fb8:	92 e0       	ldi	r25, 0x02	; 2
     fba:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_ZN9container13CallbackArrayILj3EE6removeEj>
     fbe:	08 95       	ret

00000fc0 <_ZN6driver10atmega328p5TimerD1Ev>:
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	ec 01       	movw	r28, r24
     fc6:	8a ee       	ldi	r24, 0xEA	; 234
     fc8:	91 e0       	ldi	r25, 0x01	; 1
     fca:	99 83       	std	Y+1, r25	; 0x01
     fcc:	88 83       	st	Y, r24
     fce:	ce 01       	movw	r24, r28
     fd0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_ZNK6driver10atmega328p5Timer14removeCallbackEv>
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	9b 81       	ldd	r25, Y+3	; 0x03
     fd8:	dc 01       	movw	r26, r24
     fda:	17 96       	adiw	r26, 0x07	; 7
     fdc:	ec 91       	ld	r30, X
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	ee 0f       	add	r30, r30
     fe2:	ff 1f       	adc	r31, r31
     fe4:	e1 54       	subi	r30, 0x41	; 65
     fe6:	fd 4f       	sbci	r31, 0xFD	; 253
     fe8:	11 82       	std	Z+1, r1	; 0x01
     fea:	10 82       	st	Z, r1
     fec:	0e 94 e7 06 	call	0xdce	; 0xdce <_ZN6driver10atmega328p5Timer8Hardware7releaseEPS2_>
     ff0:	80 ed       	ldi	r24, 0xD0	; 208
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	99 83       	std	Y+1, r25	; 0x01
     ff6:	88 83       	st	Y, r24
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	08 95       	ret

00000ffe <_ZN6driver10atmega328p5TimerD0Ev>:
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	ec 01       	movw	r28, r24
    1004:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <_ZN6driver10atmega328p5TimerD1Ev>
    1008:	69 e0       	ldi	r22, 0x09	; 9
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	ce 01       	movw	r24, r28
    100e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZdlPvj>
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	08 95       	ret

00001018 <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh>:
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	cf 93       	push	r28
    101e:	83 30       	cpi	r24, 0x03	; 3
    1020:	d0 f4       	brcc	.+52     	; 0x1056 <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh+0x3e>
    1022:	e8 2f       	mov	r30, r24
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	ee 0f       	add	r30, r30
    1028:	ff 1f       	adc	r31, r31
    102a:	e1 54       	subi	r30, 0x41	; 65
    102c:	fd 4f       	sbci	r31, 0xFD	; 253
    102e:	00 81       	ld	r16, Z
    1030:	11 81       	ldd	r17, Z+1	; 0x01
    1032:	01 15       	cp	r16, r1
    1034:	11 05       	cpc	r17, r1
    1036:	79 f0       	breq	.+30     	; 0x1056 <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh+0x3e>
    1038:	c8 2f       	mov	r28, r24
    103a:	c8 01       	movw	r24, r16
    103c:	0e 94 d3 06 	call	0xda6	; 0xda6 <_ZN6driver10atmega328p5Timer9incrementEv>
    1040:	c8 01       	movw	r24, r16
    1042:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN6driver10atmega328p5Timer11hasTimedOutEv>
    1046:	88 23       	and	r24, r24
    1048:	31 f0       	breq	.+12     	; 0x1056 <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh+0x3e>
    104a:	6c 2f       	mov	r22, r28
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	89 eb       	ldi	r24, 0xB9	; 185
    1050:	92 e0       	ldi	r25, 0x02	; 2
    1052:	0e 94 c4 04 	call	0x988	; 0x988 <_ZN9container13CallbackArrayILj3EE6invokeEj>
    1056:	cf 91       	pop	r28
    1058:	1f 91       	pop	r17
    105a:	0f 91       	pop	r16
    105c:	08 95       	ret

0000105e <__vector_16>:
    105e:	1f 92       	push	r1
    1060:	0f 92       	push	r0
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	0f 92       	push	r0
    1066:	11 24       	eor	r1, r1
    1068:	2f 93       	push	r18
    106a:	3f 93       	push	r19
    106c:	4f 93       	push	r20
    106e:	5f 93       	push	r21
    1070:	6f 93       	push	r22
    1072:	7f 93       	push	r23
    1074:	8f 93       	push	r24
    1076:	9f 93       	push	r25
    1078:	af 93       	push	r26
    107a:	bf 93       	push	r27
    107c:	ef 93       	push	r30
    107e:	ff 93       	push	r31
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	0e 94 0c 08 	call	0x1018	; 0x1018 <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh>
    1086:	ff 91       	pop	r31
    1088:	ef 91       	pop	r30
    108a:	bf 91       	pop	r27
    108c:	af 91       	pop	r26
    108e:	9f 91       	pop	r25
    1090:	8f 91       	pop	r24
    1092:	7f 91       	pop	r23
    1094:	6f 91       	pop	r22
    1096:	5f 91       	pop	r21
    1098:	4f 91       	pop	r20
    109a:	3f 91       	pop	r19
    109c:	2f 91       	pop	r18
    109e:	0f 90       	pop	r0
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	0f 90       	pop	r0
    10a4:	1f 90       	pop	r1
    10a6:	18 95       	reti

000010a8 <__vector_11>:
    10a8:	1f 92       	push	r1
    10aa:	0f 92       	push	r0
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	0f 92       	push	r0
    10b0:	11 24       	eor	r1, r1
    10b2:	2f 93       	push	r18
    10b4:	3f 93       	push	r19
    10b6:	4f 93       	push	r20
    10b8:	5f 93       	push	r21
    10ba:	6f 93       	push	r22
    10bc:	7f 93       	push	r23
    10be:	8f 93       	push	r24
    10c0:	9f 93       	push	r25
    10c2:	af 93       	push	r26
    10c4:	bf 93       	push	r27
    10c6:	ef 93       	push	r30
    10c8:	ff 93       	push	r31
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	0e 94 0c 08 	call	0x1018	; 0x1018 <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh>
    10d0:	ff 91       	pop	r31
    10d2:	ef 91       	pop	r30
    10d4:	bf 91       	pop	r27
    10d6:	af 91       	pop	r26
    10d8:	9f 91       	pop	r25
    10da:	8f 91       	pop	r24
    10dc:	7f 91       	pop	r23
    10de:	6f 91       	pop	r22
    10e0:	5f 91       	pop	r21
    10e2:	4f 91       	pop	r20
    10e4:	3f 91       	pop	r19
    10e6:	2f 91       	pop	r18
    10e8:	0f 90       	pop	r0
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	0f 90       	pop	r0
    10ee:	1f 90       	pop	r1
    10f0:	18 95       	reti

000010f2 <__vector_9>:
    10f2:	1f 92       	push	r1
    10f4:	0f 92       	push	r0
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	0f 92       	push	r0
    10fa:	11 24       	eor	r1, r1
    10fc:	2f 93       	push	r18
    10fe:	3f 93       	push	r19
    1100:	4f 93       	push	r20
    1102:	5f 93       	push	r21
    1104:	6f 93       	push	r22
    1106:	7f 93       	push	r23
    1108:	8f 93       	push	r24
    110a:	9f 93       	push	r25
    110c:	af 93       	push	r26
    110e:	bf 93       	push	r27
    1110:	ef 93       	push	r30
    1112:	ff 93       	push	r31
    1114:	82 e0       	ldi	r24, 0x02	; 2
    1116:	0e 94 0c 08 	call	0x1018	; 0x1018 <_ZN6driver10atmega328p12_GLOBAL__N_114invokeCallbackEh>
    111a:	ff 91       	pop	r31
    111c:	ef 91       	pop	r30
    111e:	bf 91       	pop	r27
    1120:	af 91       	pop	r26
    1122:	9f 91       	pop	r25
    1124:	8f 91       	pop	r24
    1126:	7f 91       	pop	r23
    1128:	6f 91       	pop	r22
    112a:	5f 91       	pop	r21
    112c:	4f 91       	pop	r20
    112e:	3f 91       	pop	r19
    1130:	2f 91       	pop	r18
    1132:	0f 90       	pop	r0
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	0f 90       	pop	r0
    1138:	1f 90       	pop	r1
    113a:	18 95       	reti

0000113c <_Z41__static_initialization_and_destruction_0ii>:

// -----------------------------------------------------------------------------
ISR (TIMER2_OVF_vect) { invokeCallback(TimerIndex::timer2); }

} // namespace atmega328p
} // namespace driver
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	39 f4       	brne	.+14     	; 0x114e <_Z41__static_initialization_and_destruction_0ii+0x12>
    1140:	6f 3f       	cpi	r22, 0xFF	; 255
    1142:	7f 4f       	sbci	r23, 0xFF	; 255
    1144:	21 f4       	brne	.+8      	; 0x114e <_Z41__static_initialization_and_destruction_0ii+0x12>

/** Array holding pointers to TimerParam::timers. */
Timer* TimerParam::TimerParam::timers[TimerParam::circuitCount]{};  

/** Array holding pointers to callbacks. */
CallbackArray<TimerParam::circuitCount> TimerParam::callbacks{};
    1146:	89 eb       	ldi	r24, 0xB9	; 185
    1148:	92 e0       	ldi	r25, 0x02	; 2
    114a:	0e 94 16 04 	call	0x82c	; 0x82c <_ZN9container13CallbackArrayILj3EEC1Ev>
    114e:	08 95       	ret

00001150 <_GLOBAL__sub_I__ZN6driver10atmega328p5TimerC2EmPFvvEb>:

// -----------------------------------------------------------------------------
ISR (TIMER2_OVF_vect) { invokeCallback(TimerIndex::timer2); }

} // namespace atmega328p
} // namespace driver
    1150:	6f ef       	ldi	r22, 0xFF	; 255
    1152:	7f ef       	ldi	r23, 0xFF	; 255
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	0e 94 9e 08 	call	0x113c	; 0x113c <_Z41__static_initialization_and_destruction_0ii>
    115c:	08 95       	ret

0000115e <_GLOBAL__sub_D__ZN6driver10atmega328p5TimerC2EmPFvvEb>:
    115e:	6f ef       	ldi	r22, 0xFF	; 255
    1160:	7f ef       	ldi	r23, 0xFF	; 255
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	0e 94 9e 08 	call	0x113c	; 0x113c <_Z41__static_initialization_and_destruction_0ii>
    116a:	08 95       	ret

0000116c <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE>:
}
    
// -----------------------------------------------------------------------------
uint8_t timeoutValue(const Watchdog::Timeout timeout) noexcept
{
    switch (timeout)
    116c:	81 15       	cp	r24, r1
    116e:	21 e0       	ldi	r18, 0x01	; 1
    1170:	92 07       	cpc	r25, r18
    1172:	51 f1       	breq	.+84     	; 0x11c8 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x5c>
    1174:	70 f4       	brcc	.+28     	; 0x1192 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x26>
    1176:	80 32       	cpi	r24, 0x20	; 32
    1178:	91 05       	cpc	r25, r1
    117a:	a1 f1       	breq	.+104    	; 0x11e4 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x78>
    117c:	18 f4       	brcc	.+6      	; 0x1184 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x18>
    117e:	40 97       	sbiw	r24, 0x10	; 16
    1180:	e9 f0       	breq	.+58     	; 0x11bc <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x50>
    1182:	2e c0       	rjmp	.+92     	; 0x11e0 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x74>
    1184:	80 34       	cpi	r24, 0x40	; 64
    1186:	91 05       	cpc	r25, r1
    1188:	d9 f0       	breq	.+54     	; 0x11c0 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x54>
    118a:	80 38       	cpi	r24, 0x80	; 128
    118c:	91 05       	cpc	r25, r1
    118e:	d1 f0       	breq	.+52     	; 0x11c4 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x58>
    1190:	27 c0       	rjmp	.+78     	; 0x11e0 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x74>
    1192:	81 15       	cp	r24, r1
    1194:	28 e0       	ldi	r18, 0x08	; 8
    1196:	92 07       	cpc	r25, r18
    1198:	e9 f0       	breq	.+58     	; 0x11d4 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x68>
    119a:	40 f4       	brcc	.+16     	; 0x11ac <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x40>
    119c:	81 15       	cp	r24, r1
    119e:	22 e0       	ldi	r18, 0x02	; 2
    11a0:	92 07       	cpc	r25, r18
    11a2:	a1 f0       	breq	.+40     	; 0x11cc <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x60>
    11a4:	81 15       	cp	r24, r1
    11a6:	94 40       	sbci	r25, 0x04	; 4
    11a8:	99 f0       	breq	.+38     	; 0x11d0 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x64>
    11aa:	1a c0       	rjmp	.+52     	; 0x11e0 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x74>
    11ac:	81 15       	cp	r24, r1
    11ae:	20 e1       	ldi	r18, 0x10	; 16
    11b0:	92 07       	cpc	r25, r18
    11b2:	91 f0       	breq	.+36     	; 0x11d8 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x6c>
    11b4:	81 15       	cp	r24, r1
    11b6:	90 42       	sbci	r25, 0x20	; 32
    11b8:	89 f0       	breq	.+34     	; 0x11dc <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x70>
    11ba:	12 c0       	rjmp	.+36     	; 0x11e0 <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE+0x74>
    {
        case Watchdog::Timeout::Duration16ms:
            return 0U;
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	08 95       	ret
        case Watchdog::Timeout::Duration32ms:
            return (1U << WDP0);
        case Watchdog::Timeout::Duration64ms:
            return (1U << WDP1);
    11c0:	82 e0       	ldi	r24, 0x02	; 2
    11c2:	08 95       	ret
        case Watchdog::Timeout::Duration128ms:
            return (1U << WDP1) | (1U << WDP0);
    11c4:	83 e0       	ldi	r24, 0x03	; 3
    11c6:	08 95       	ret
        case Watchdog::Timeout::Duration256ms:
            return (1U << WDP2);
    11c8:	84 e0       	ldi	r24, 0x04	; 4
    11ca:	08 95       	ret
        case Watchdog::Timeout::Duration512ms:
            return (1U << WDP2) | (1U << WDP0);
    11cc:	85 e0       	ldi	r24, 0x05	; 5
    11ce:	08 95       	ret
        case Watchdog::Timeout::Duration1024ms:
            return (1U << WDP2) | (1U << WDP1);
    11d0:	86 e0       	ldi	r24, 0x06	; 6
    11d2:	08 95       	ret
        case Watchdog::Timeout::Duration2048ms:
            return (1U << WDP2) | (1U << WDP1) | (1U << WDP0);
    11d4:	87 e0       	ldi	r24, 0x07	; 7
    11d6:	08 95       	ret
        case Watchdog::Timeout::Duration4096ms:
            return (1U << WDP3);
    11d8:	80 e2       	ldi	r24, 0x20	; 32
    11da:	08 95       	ret
        case Watchdog::Timeout::Duration8192ms:
            return (1U << WDP3) | (1U << WDP0);
    11dc:	81 e2       	ldi	r24, 0x21	; 33
    11de:	08 95       	ret
        default:
            return 0xFFU;
    11e0:	8f ef       	ldi	r24, 0xFF	; 255
    11e2:	08 95       	ret
    switch (timeout)
    {
        case Watchdog::Timeout::Duration16ms:
            return 0U;
        case Watchdog::Timeout::Duration32ms:
            return (1U << WDP0);
    11e4:	81 e0       	ldi	r24, 0x01	; 1
        case Watchdog::Timeout::Duration8192ms:
            return (1U << WDP3) | (1U << WDP0);
        default:
            return 0xFFU;
    }
}
    11e6:	08 95       	ret

000011e8 <__tcf_0>:
{
public:
    /**
     * @brief Delete the watchdog timer.
     */
    virtual ~WatchdogInterface() noexcept = default;
    11e8:	84 e0       	ldi	r24, 0x04	; 4
    11ea:	92 e0       	ldi	r25, 0x02	; 2
    11ec:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <_ZZN6driver10atmega328p8Watchdog11getInstanceEvE10myInstance+0x1>
    11f0:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <_ZZN6driver10atmega328p8Watchdog11getInstanceEvE10myInstance>
    11f4:	08 95       	ret

000011f6 <_ZNK6driver10atmega328p8Watchdog13isInitializedEv>:
    // Return a reference to the singleton watchdog instance, cast to the corresponding interface.
    return myInstance; 
}

// -----------------------------------------------------------------------------
bool Watchdog::isInitialized() const noexcept { return true; }
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	08 95       	ret

000011fa <_ZNK6driver10atmega328p8Watchdog9isEnabledEv>:

// -----------------------------------------------------------------------------
bool Watchdog::isEnabled() const noexcept { return myEnabled; }
    11fa:	fc 01       	movw	r30, r24
    11fc:	84 81       	ldd	r24, Z+4	; 0x04
    11fe:	08 95       	ret

00001200 <_ZNK6driver10atmega328p8Watchdog9timeoutMsEv>:
    // Re-enable interrupts once the write sequence is complete.
    utils::globalInterruptEnable();
}

// -----------------------------------------------------------------------------
uint16_t Watchdog::timeoutMs() const noexcept { return static_cast<uint16_t>(myTimeout); }
    1200:	fc 01       	movw	r30, r24
    1202:	82 81       	ldd	r24, Z+2	; 0x02
    1204:	93 81       	ldd	r25, Z+3	; 0x03
    1206:	08 95       	ret

00001208 <_ZN6driver10atmega328p8WatchdogD1Ev>:
    1208:	24 e0       	ldi	r18, 0x04	; 4
    120a:	32 e0       	ldi	r19, 0x02	; 2
    120c:	fc 01       	movw	r30, r24
    120e:	31 83       	std	Z+1, r19	; 0x01
    1210:	20 83       	st	Z, r18
    1212:	08 95       	ret

00001214 <_ZN6driver10atmega328p8WatchdogD0Ev>:
    1214:	24 e0       	ldi	r18, 0x04	; 4
    1216:	32 e0       	ldi	r19, 0x02	; 2
    1218:	fc 01       	movw	r30, r24
    121a:	31 83       	std	Z+1, r19	; 0x01
    121c:	20 83       	st	Z, r18
    Watchdog& operator=(const Watchdog&) = delete; // No copy assignment.
    Watchdog& operator=(Watchdog&&)      = delete; // No move assignment.

private:
    Watchdog() noexcept;
    ~Watchdog() noexcept override = default;
    121e:	65 e0       	ldi	r22, 0x05	; 5
    1220:	70 e0       	ldi	r23, 0x00	; 0
    1222:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZdlPvj>
    1226:	08 95       	ret

00001228 <_ZN6driver10atmega328p8Watchdog5resetEv>:

// -----------------------------------------------------------------------------
void Watchdog::reset() noexcept 
{ 
    // Disable interrupts during the reset process.
    utils::globalInterruptDisable();
    1228:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <_ZN5utils22globalInterruptDisableEv>

    // Reset the watchdog and clear the corresponding reset flag.
    asm("WDR");
    122c:	a8 95       	wdr
// -----------------------------------------------------------------------------
template <typename T>
constexpr void clear(volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg &= ~(1ULL << bit);
    122e:	84 b7       	in	r24, 0x34	; 52
    1230:	87 7f       	andi	r24, 0xF7	; 247
    1232:	84 bf       	out	0x34, r24	; 52
    utils::clear(MCUSR, WDRF);

    // Re-enable interrupts once the reset process is complete.
    utils::globalInterruptEnable();
    1234:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_ZN5utils21globalInterruptEnableEv>
    1238:	08 95       	ret

0000123a <_ZN6driver10atmega328p8Watchdog10setEnabledEb>:
// -----------------------------------------------------------------------------
bool Watchdog::isEnabled() const noexcept { return myEnabled; }

// -----------------------------------------------------------------------------
void Watchdog::setEnabled(const bool enable) noexcept
{
    123a:	cf 93       	push	r28
    123c:	c6 2f       	mov	r28, r22
    // Reset the watchdog to prevent a timeout during the enablement update.
    reset();
    123e:	0e 94 14 09 	call	0x1228	; 0x1228 <_ZN6driver10atmega328p8Watchdog5resetEv>

    // Update the enablement status, disable interrupts during the write sequence.
    utils::globalInterruptDisable();
    1242:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <_ZN5utils22globalInterruptDisableEv>
// -----------------------------------------------------------------------------
template <typename T>
constexpr void set(volatile T& reg, const uint8_t bit) noexcept
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg |= (1ULL << bit);
    1246:	e0 e6       	ldi	r30, 0x60	; 96
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	80 61       	ori	r24, 0x10	; 16
    124e:	80 83       	st	Z, r24
    1250:	80 81       	ld	r24, Z
    1252:	88 60       	ori	r24, 0x08	; 8
    1254:	80 83       	st	Z, r24
    utils::set(WDTCSR, WDCE, WDE);
    if (enable) { utils::set(WDTCSR, WDE); }
    1256:	cc 23       	and	r28, r28
    1258:	21 f0       	breq	.+8      	; 0x1262 <_ZN6driver10atmega328p8Watchdog10setEnabledEb+0x28>
    125a:	80 81       	ld	r24, Z
    125c:	88 60       	ori	r24, 0x08	; 8
    125e:	80 83       	st	Z, r24
    1260:	05 c0       	rjmp	.+10     	; 0x126c <_ZN6driver10atmega328p8Watchdog10setEnabledEb+0x32>
// -----------------------------------------------------------------------------
template <typename T>
constexpr void clear(volatile T& reg, const uint8_t bit) noexcept  
{
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit operation!");
    reg &= ~(1ULL << bit);
    1262:	e0 e6       	ldi	r30, 0x60	; 96
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	87 7f       	andi	r24, 0xF7	; 247
    126a:	80 83       	st	Z, r24
    else { utils::clear(WDTCSR, WDE); }

    // Re-enable interrupts once the write sequence is complete.
    utils::globalInterruptEnable();
    126c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_ZN5utils21globalInterruptEnableEv>
}
    1270:	cf 91       	pop	r28
    1272:	08 95       	ret

00001274 <_ZN6driver10atmega328p8Watchdog10setTimeoutENS1_7TimeoutE>:
    utils::globalInterruptEnable();
}

// -----------------------------------------------------------------------------
bool Watchdog::setTimeout(const Timeout timeout) noexcept
{
    1274:	ff 92       	push	r15
    1276:	0f 93       	push	r16
    1278:	1f 93       	push	r17
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    // Return false if the timeout is invalid.
    if (!isTimeoutValid(timeout)) { return false; }
    127e:	61 30       	cpi	r22, 0x01	; 1
    1280:	20 e2       	ldi	r18, 0x20	; 32
    1282:	72 07       	cpc	r23, r18
    1284:	b8 f4       	brcc	.+46     	; 0x12b4 <_ZN6driver10atmega328p8Watchdog10setTimeoutENS1_7TimeoutE+0x40>
    1286:	eb 01       	movw	r28, r22
    1288:	8c 01       	movw	r16, r24

    // Calculate the timeout value before the timed write sequence.
    const auto value{timeoutValue(timeout)};
    128a:	cb 01       	movw	r24, r22
    128c:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN6driver10atmega328p12_GLOBAL__N_112timeoutValueENS0_8Watchdog7TimeoutE>
    1290:	f8 2e       	mov	r15, r24

    // Update the watchdog timeout, disable interrupts during the write sequence.
    utils::globalInterruptDisable();
    1292:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <_ZN5utils22globalInterruptDisableEv>
    WDTCSR |= (1UL << WDCE) | (1UL << WDE);
    1296:	e0 e6       	ldi	r30, 0x60	; 96
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	88 61       	ori	r24, 0x18	; 24
    129e:	80 83       	st	Z, r24
    WDTCSR = value;
    12a0:	f0 82       	st	Z, r15
    utils::globalInterruptEnable();
    12a2:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_ZN5utils21globalInterruptEnableEv>

    // Re-enable interrupts once the write sequence is complete.
    utils::globalInterruptEnable();
    12a6:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_ZN5utils21globalInterruptEnableEv>

    // Store the new timeout and return true to indicate success.
    myTimeout = timeout;
    12aa:	f8 01       	movw	r30, r16
    12ac:	d3 83       	std	Z+3, r29	; 0x03
    12ae:	c2 83       	std	Z+2, r28	; 0x02
    return true;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	01 c0       	rjmp	.+2      	; 0x12b6 <_ZN6driver10atmega328p8Watchdog10setTimeoutENS1_7TimeoutE+0x42>

// -----------------------------------------------------------------------------
bool Watchdog::setTimeout(const Timeout timeout) noexcept
{
    // Return false if the timeout is invalid.
    if (!isTimeoutValid(timeout)) { return false; }
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    utils::globalInterruptEnable();

    // Store the new timeout and return true to indicate success.
    myTimeout = timeout;
    return true;
} 
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	ff 90       	pop	r15
    12c0:	08 95       	ret

000012c2 <_ZN6driver10atmega328p8WatchdogC1Ev>:

// -----------------------------------------------------------------------------
Watchdog::Watchdog() noexcept
    : myTimeout{}
    , myEnabled{false}
    12c2:	26 e1       	ldi	r18, 0x16	; 22
    12c4:	32 e0       	ldi	r19, 0x02	; 2
    12c6:	fc 01       	movw	r30, r24
    12c8:	31 83       	std	Z+1, r19	; 0x01
    12ca:	20 83       	st	Z, r18
    12cc:	13 82       	std	Z+3, r1	; 0x03
    12ce:	12 82       	std	Z+2, r1	; 0x02
    12d0:	14 82       	std	Z+4, r1	; 0x04
{
    // Set the default timeout.
    setTimeout(WatchdogParam::DefaultTimeout);
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	74 e0       	ldi	r23, 0x04	; 4
    12d6:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN6driver10atmega328p8Watchdog10setTimeoutENS1_7TimeoutE>
    12da:	08 95       	ret

000012dc <_ZN6driver10atmega328p8Watchdog11getInstanceEv>:

// -----------------------------------------------------------------------------
WatchdogInterface& Watchdog::getInstance() noexcept
{
    // Create and initialize the singleton watchdog timer instance (once only).
    static Watchdog myInstance{};
    12dc:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <_ZGVZN6driver10atmega328p8Watchdog11getInstanceEvE10myInstance>
    12e0:	81 11       	cpse	r24, r1
    12e2:	12 c0       	rjmp	.+36     	; 0x1308 <_ZN6driver10atmega328p8Watchdog11getInstanceEv+0x2c>
    12e4:	8a ec       	ldi	r24, 0xCA	; 202
    12e6:	92 e0       	ldi	r25, 0x02	; 2
    12e8:	0e 94 76 0c 	call	0x18ec	; 0x18ec <__cxa_guard_acquire>
    12ec:	89 2b       	or	r24, r25
    12ee:	61 f0       	breq	.+24     	; 0x1308 <_ZN6driver10atmega328p8Watchdog11getInstanceEv+0x2c>
    12f0:	85 ec       	ldi	r24, 0xC5	; 197
    12f2:	92 e0       	ldi	r25, 0x02	; 2
    12f4:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN6driver10atmega328p8WatchdogC1Ev>
    12f8:	8a ec       	ldi	r24, 0xCA	; 202
    12fa:	92 e0       	ldi	r25, 0x02	; 2
    12fc:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__cxa_guard_release>
    1300:	84 ef       	ldi	r24, 0xF4	; 244
    1302:	98 e0       	ldi	r25, 0x08	; 8
    1304:	0e 94 76 00 	call	0xec	; 0xec <atexit>

    // Return a reference to the singleton watchdog instance, cast to the corresponding interface.
    return myInstance; 
}
    1308:	85 ec       	ldi	r24, 0xC5	; 197
    130a:	92 e0       	ldi	r25, 0x02	; 2
    130c:	08 95       	ret

0000130e <_ZN12_GLOBAL__N_119toggleTimerCallbackEv>:
/**
 * @brief Callback for the toggle timer.
 * 
 *        This callback is invoked whenever the toggle timer elapses.
 */
void toggleTimerCallback() noexcept { mySys->handleToggleTimerInterrupt(); }
    130e:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <_ZN12_GLOBAL__N_15mySysE>
    1312:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <_ZN12_GLOBAL__N_15mySysE+0x1>
    1316:	0e 94 83 0a 	call	0x1506	; 0x1506 <_ZN6target6System26handleToggleTimerInterruptEv>
    131a:	08 95       	ret

0000131c <_ZN12_GLOBAL__N_121debounceTimerCallbackEv>:
/**
 * @brief Callback for the debounce timer.
 * 
 *        This callback is invoked whenever the debounce timer elapses.
 */
void debounceTimerCallback() noexcept { mySys->handleDebounceTimerInterrupt(); }
    131c:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <_ZN12_GLOBAL__N_15mySysE>
    1320:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <_ZN12_GLOBAL__N_15mySysE+0x1>
    1324:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <_ZN6target6System28handleDebounceTimerInterruptEv>
    1328:	08 95       	ret

0000132a <_ZN12_GLOBAL__N_114buttonCallbackEv>:
target::System* mySys{nullptr};

/**
 * @brief Callback for the button.
 */
void buttonCallback() noexcept { mySys->handleButtonInterrupt(); }
    132a:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <_ZN12_GLOBAL__N_15mySysE>
    132e:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <_ZN12_GLOBAL__N_15mySysE+0x1>
    1332:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <_ZN6target6System21handleButtonInterruptEv>
    1336:	08 95       	ret

00001338 <main>:
 * @brief Initialize and run the system on the target MCU.
 * 
 * @return 0 on termination of the program (should never occur).
 */
int main()
{
    1338:	6f 92       	push	r6
    133a:	7f 92       	push	r7
    133c:	8f 92       	push	r8
    133e:	9f 92       	push	r9
    1340:	af 92       	push	r10
    1342:	bf 92       	push	r11
    1344:	cf 92       	push	r12
    1346:	df 92       	push	r13
    1348:	ef 92       	push	r14
    134a:	ff 92       	push	r15
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	ac 97       	sbiw	r28, 0x2c	; 44
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    // Initialize the GPIO devices.
    Gpio led{8U, Gpio::Direction::Output};
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	42 e0       	ldi	r20, 0x02	; 2
    136a:	68 e0       	ldi	r22, 0x08	; 8
    136c:	ce 01       	movw	r24, r28
    136e:	01 96       	adiw	r24, 0x01	; 1
    1370:	0e 94 6f 04 	call	0x8de	; 0x8de <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE>
    Gpio button{13U, Gpio::Direction::InputPullup, buttonCallback};
    1374:	25 e9       	ldi	r18, 0x95	; 149
    1376:	39 e0       	ldi	r19, 0x09	; 9
    1378:	41 e0       	ldi	r20, 0x01	; 1
    137a:	6d e0       	ldi	r22, 0x0D	; 13
    137c:	ce 01       	movw	r24, r28
    137e:	06 96       	adiw	r24, 0x06	; 6
    1380:	0e 94 6f 04 	call	0x8de	; 0x8de <_ZN6driver10atmega328p4GpioC1EhNS1_9DirectionEPFvvE>

    // Initialize the timers.
    Timer debounceTimer{300U, debounceTimerCallback};
    1384:	00 e0       	ldi	r16, 0x00	; 0
    1386:	2e e8       	ldi	r18, 0x8E	; 142
    1388:	39 e0       	ldi	r19, 0x09	; 9
    138a:	4c e2       	ldi	r20, 0x2C	; 44
    138c:	51 e0       	ldi	r21, 0x01	; 1
    138e:	60 e0       	ldi	r22, 0x00	; 0
    1390:	70 e0       	ldi	r23, 0x00	; 0
    1392:	ce 01       	movw	r24, r28
    1394:	0b 96       	adiw	r24, 0x0b	; 11
    1396:	0e 94 65 07 	call	0xeca	; 0xeca <_ZN6driver10atmega328p5TimerC1EmPFvvEb>
    Timer toggleTimer{100U, toggleTimerCallback};
    139a:	27 e8       	ldi	r18, 0x87	; 135
    139c:	39 e0       	ldi	r19, 0x09	; 9
    139e:	44 e6       	ldi	r20, 0x64	; 100
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	ce 01       	movw	r24, r28
    13a8:	44 96       	adiw	r24, 0x14	; 20
    13aa:	0e 94 65 07 	call	0xeca	; 0xeca <_ZN6driver10atmega328p5TimerC1EmPFvvEb>

    // Obtain a reference to the singleton serial device instance.
    auto& serial{Serial::getInstance()};
    13ae:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <_ZN6driver10atmega328p6Serial11getInstanceEv>
    13b2:	7c 01       	movw	r14, r24

    // Obtain a reference to the singleton watchdog timer instance.
    auto& watchdog{Watchdog::getInstance()};
    13b4:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_ZN6driver10atmega328p8Watchdog11getInstanceEv>
    13b8:	6c 01       	movw	r12, r24

    // Obtain a reference to the singleton EEPROM instance.
    auto& eeprom{Eeprom::getInstance()};
    13ba:	0e 94 c7 01 	call	0x38e	; 0x38e <_ZN6driver10atmega328p6Eeprom11getInstanceEv>
    13be:	5c 01       	movw	r10, r24

    // Obtain a reference to the singleton ADC instance.
    auto& adc{Adc::getInstance()};
    13c0:	0e 94 32 01 	call	0x264	; 0x264 <_ZN6driver10atmega328p3Adc11getInstanceEv>

    // Initialize the system with the given hardware.
    target::System system{led, button, debounceTimer, toggleTimer, serial, watchdog, eeprom, adc};
    13c4:	3e 01       	movw	r6, r28
    13c6:	2d e1       	ldi	r18, 0x1D	; 29
    13c8:	62 0e       	add	r6, r18
    13ca:	71 1c       	adc	r7, r1
    13cc:	4c 01       	movw	r8, r24
    13ce:	8e 01       	movw	r16, r28
    13d0:	0c 5e       	subi	r16, 0xEC	; 236
    13d2:	1f 4f       	sbci	r17, 0xFF	; 255
    13d4:	9e 01       	movw	r18, r28
    13d6:	25 5f       	subi	r18, 0xF5	; 245
    13d8:	3f 4f       	sbci	r19, 0xFF	; 255
    13da:	ae 01       	movw	r20, r28
    13dc:	4a 5f       	subi	r20, 0xFA	; 250
    13de:	5f 4f       	sbci	r21, 0xFF	; 255
    13e0:	be 01       	movw	r22, r28
    13e2:	6f 5f       	subi	r22, 0xFF	; 255
    13e4:	7f 4f       	sbci	r23, 0xFF	; 255
    13e6:	c3 01       	movw	r24, r6
    13e8:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZN6target6SystemC1ERN6driver13GpioInterfaceES3_RNS1_14TimerInterfaceES5_RNS1_15SerialInterfaceERNS1_17WatchdogInterfaceERNS1_15EepromInterfaceERNS1_12AdcInterfaceE>
    mySys = &system;
    13ec:	70 92 d3 02 	sts	0x02D3, r7	; 0x8002d3 <_ZN12_GLOBAL__N_15mySysE+0x1>
    13f0:	60 92 d2 02 	sts	0x02D2, r6	; 0x8002d2 <_ZN12_GLOBAL__N_15mySysE>

    // Run the system perpetually on the target MCU.
    mySys->run();
    13f4:	c3 01       	movw	r24, r6
    13f6:	0e 94 98 0a 	call	0x1530	; 0x1530 <_ZN6target6System3runEv>

    // Obtain a reference to the singleton ADC instance.
    auto& adc{Adc::getInstance()};

    // Initialize the system with the given hardware.
    target::System system{led, button, debounceTimer, toggleTimer, serial, watchdog, eeprom, adc};
    13fa:	c3 01       	movw	r24, r6
    13fc:	0e 94 26 0a 	call	0x144c	; 0x144c <_ZN6target6SystemD1Ev>
    Gpio led{8U, Gpio::Direction::Output};
    Gpio button{13U, Gpio::Direction::InputPullup, buttonCallback};

    // Initialize the timers.
    Timer debounceTimer{300U, debounceTimerCallback};
    Timer toggleTimer{100U, toggleTimerCallback};
    1400:	c8 01       	movw	r24, r16
    1402:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <_ZN6driver10atmega328p5TimerD1Ev>
    // Initialize the GPIO devices.
    Gpio led{8U, Gpio::Direction::Output};
    Gpio button{13U, Gpio::Direction::InputPullup, buttonCallback};

    // Initialize the timers.
    Timer debounceTimer{300U, debounceTimerCallback};
    1406:	ce 01       	movw	r24, r28
    1408:	0b 96       	adiw	r24, 0x0b	; 11
    140a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <_ZN6driver10atmega328p5TimerD1Ev>
 */
int main()
{
    // Initialize the GPIO devices.
    Gpio led{8U, Gpio::Direction::Output};
    Gpio button{13U, Gpio::Direction::InputPullup, buttonCallback};
    140e:	ce 01       	movw	r24, r28
    1410:	06 96       	adiw	r24, 0x06	; 6
    1412:	0e 94 cc 02 	call	0x598	; 0x598 <_ZN6driver10atmega328p4GpioD1Ev>
 * @return 0 on termination of the program (should never occur).
 */
int main()
{
    // Initialize the GPIO devices.
    Gpio led{8U, Gpio::Direction::Output};
    1416:	ce 01       	movw	r24, r28
    1418:	01 96       	adiw	r24, 0x01	; 1
    141a:	0e 94 cc 02 	call	0x598	; 0x598 <_ZN6driver10atmega328p4GpioD1Ev>
    // Run the system perpetually on the target MCU.
    mySys->run();

    // This point should never be reached; the system is intended to run indefinitely on the target MCU.
    return 0;
}
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	ac 96       	adiw	r28, 0x2c	; 44
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	ff 90       	pop	r15
    1438:	ef 90       	pop	r14
    143a:	df 90       	pop	r13
    143c:	cf 90       	pop	r12
    143e:	bf 90       	pop	r11
    1440:	af 90       	pop	r10
    1442:	9f 90       	pop	r9
    1444:	8f 90       	pop	r8
    1446:	7f 90       	pop	r7
    1448:	6f 90       	pop	r6
    144a:	08 95       	ret

0000144c <_ZN6target6SystemD1Ev>:
}

// -----------------------------------------------------------------------------
void System::enableSerialTransmission(const bool enable) noexcept
{
    mySerial.setEnabled(enable);
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	ec 01       	movw	r28, r24
    1452:	88 81       	ld	r24, Y
    1454:	99 81       	ldd	r25, Y+1	; 0x01
    1456:	dc 01       	movw	r26, r24
    1458:	ed 91       	ld	r30, X+
    145a:	fc 91       	ld	r31, X
    145c:	00 84       	ldd	r0, Z+8	; 0x08
    145e:	f1 85       	ldd	r31, Z+9	; 0x09
    1460:	e0 2d       	mov	r30, r0
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	09 95       	icall
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	9b 81       	ldd	r25, Y+3	; 0x03
    146a:	dc 01       	movw	r26, r24
    146c:	ed 91       	ld	r30, X+
    146e:	fc 91       	ld	r31, X
    1470:	04 84       	ldd	r0, Z+12	; 0x0c
    1472:	f5 85       	ldd	r31, Z+13	; 0x0d
    1474:	e0 2d       	mov	r30, r0
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	09 95       	icall
    147a:	8c 81       	ldd	r24, Y+4	; 0x04
    147c:	9d 81       	ldd	r25, Y+5	; 0x05
    147e:	dc 01       	movw	r26, r24
    1480:	ed 91       	ld	r30, X+
    1482:	fc 91       	ld	r31, X
    1484:	00 88       	ldd	r0, Z+16	; 0x10
    1486:	f1 89       	ldd	r31, Z+17	; 0x11
    1488:	e0 2d       	mov	r30, r0
    148a:	09 95       	icall
    148c:	8e 81       	ldd	r24, Y+6	; 0x06
    148e:	9f 81       	ldd	r25, Y+7	; 0x07
    1490:	dc 01       	movw	r26, r24
    1492:	ed 91       	ld	r30, X+
    1494:	fc 91       	ld	r31, X
    1496:	00 88       	ldd	r0, Z+16	; 0x10
    1498:	f1 89       	ldd	r31, Z+17	; 0x11
    149a:	e0 2d       	mov	r30, r0
    149c:	09 95       	icall
    149e:	8a 85       	ldd	r24, Y+10	; 0x0a
    14a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    14a2:	dc 01       	movw	r26, r24
    14a4:	ed 91       	ld	r30, X+
    14a6:	fc 91       	ld	r31, X
    14a8:	00 84       	ldd	r0, Z+8	; 0x08
    14aa:	f1 85       	ldd	r31, Z+9	; 0x09
    14ac:	e0 2d       	mov	r30, r0
    14ae:	60 e0       	ldi	r22, 0x00	; 0
    14b0:	09 95       	icall
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	08 95       	ret

000014b8 <_ZN6target6System28handleDebounceTimerInterruptEv>:
    if (myButton.read()) { handleButtonPressed(); }
}

// -----------------------------------------------------------------------------
void System::handleDebounceTimerInterrupt() noexcept
{
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	ec 01       	movw	r28, r24
    myDebounceTimer.stop();
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	9d 81       	ldd	r25, Y+5	; 0x05
    14c2:	dc 01       	movw	r26, r24
    14c4:	ed 91       	ld	r30, X+
    14c6:	fc 91       	ld	r31, X
    14c8:	00 88       	ldd	r0, Z+16	; 0x10
    14ca:	f1 89       	ldd	r31, Z+17	; 0x11
    14cc:	e0 2d       	mov	r30, r0
    14ce:	09 95       	icall
    myButton.enableInterruptOnPort(true);
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	9b 81       	ldd	r25, Y+3	; 0x03
    14d4:	dc 01       	movw	r26, r24
    14d6:	ed 91       	ld	r30, X+
    14d8:	fc 91       	ld	r31, X
    14da:	06 84       	ldd	r0, Z+14	; 0x0e
    14dc:	f7 85       	ldd	r31, Z+15	; 0x0f
    14de:	e0 2d       	mov	r30, r0
    14e0:	61 e0       	ldi	r22, 0x01	; 1
    14e2:	09 95       	icall
}
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	08 95       	ret

000014ea <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>:

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
{
    if (nullptr == format) { return false; }
    14ea:	61 15       	cp	r22, r1
    14ec:	71 05       	cpc	r23, r1
    14ee:	49 f0       	breq	.+18     	; 0x1502 <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_+0x18>
        char buffer[length]{'\0'};
        (void) snprintf(buffer, length, format, args...);
        print(buffer);
    }
    // Print the string.
    else { print(format); }
    14f0:	dc 01       	movw	r26, r24
    14f2:	ed 91       	ld	r30, X+
    14f4:	fc 91       	ld	r31, X
    14f6:	04 84       	ldd	r0, Z+12	; 0x0c
    14f8:	f5 85       	ldd	r31, Z+13	; 0x0d
    14fa:	e0 2d       	mov	r30, r0
    14fc:	09 95       	icall
    return true;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	08 95       	ret

// -----------------------------------------------------------------------------
template <typename... Args>
bool SerialInterface::printf(const char* format, const Args&... args) const noexcept
{
    if (nullptr == format) { return false; }
    1502:	80 e0       	ldi	r24, 0x00	; 0
        print(buffer);
    }
    // Print the string.
    else { print(format); }
    return true;
}
    1504:	08 95       	ret

00001506 <_ZN6target6System26handleToggleTimerInterruptEv>:

// -----------------------------------------------------------------------------
void System::handleToggleTimerInterrupt() noexcept 
{ 
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	ec 01       	movw	r28, r24
    mySerial.printf("Toggling the LED!\n");
    150c:	64 e2       	ldi	r22, 0x24	; 36
    150e:	72 e0       	ldi	r23, 0x02	; 2
    1510:	88 85       	ldd	r24, Y+8	; 0x08
    1512:	99 85       	ldd	r25, Y+9	; 0x09
    1514:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
    myLed.toggle(); 
    1518:	88 81       	ld	r24, Y
    151a:	99 81       	ldd	r25, Y+1	; 0x01
    151c:	dc 01       	movw	r26, r24
    151e:	ed 91       	ld	r30, X+
    1520:	fc 91       	ld	r31, X
    1522:	02 84       	ldd	r0, Z+10	; 0x0a
    1524:	f3 85       	ldd	r31, Z+11	; 0x0b
    1526:	e0 2d       	mov	r30, r0
    1528:	09 95       	icall
}
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	08 95       	ret

00001530 <_ZN6target6System3runEv>:

// -----------------------------------------------------------------------------
void System::run() noexcept
{
    1530:	ec 01       	movw	r28, r24
    mySerial.printf("Running the system!\n");
    1532:	67 e3       	ldi	r22, 0x37	; 55
    1534:	72 e0       	ldi	r23, 0x02	; 2
    1536:	88 85       	ldd	r24, Y+8	; 0x08
    1538:	99 85       	ldd	r25, Y+9	; 0x09
    153a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
    
    while (1)
    {
        myWatchdog.reset();
    153e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1540:	9b 85       	ldd	r25, Y+11	; 0x0b
    1542:	dc 01       	movw	r26, r24
    1544:	ed 91       	ld	r30, X+
    1546:	fc 91       	ld	r31, X
    1548:	04 84       	ldd	r0, Z+12	; 0x0c
    154a:	f5 85       	ldd	r31, Z+13	; 0x0d
    154c:	e0 2d       	mov	r30, r0
    154e:	09 95       	icall
    1550:	f6 cf       	rjmp	.-20     	; 0x153e <_ZN6target6System3runEv+0xe>

00001552 <_ZNK6driver15EepromInterface5writeIbEEbjRKT_>:
    virtual uint8_t readByte(const uint16_t address) const = 0;
};

// -----------------------------------------------------------------------------
template <typename T>
bool EepromInterface::write(const uint16_t address, const T& data) const noexcept
    1552:	df 92       	push	r13
    1554:	ef 92       	push	r14
    1556:	ff 92       	push	r15
    1558:	0f 93       	push	r16
    155a:	1f 93       	push	r17
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	ec 01       	movw	r28, r24
    1562:	8b 01       	movw	r16, r22
    1564:	7a 01       	movw	r14, r20
    // Generate a compiler error if the given type isn't of unsigned type.
    static_assert(type_traits::is_unsigned<T>::value, 
        "EEPROM write only supported for unsigned data types!");

    // Return false is the given address in invalid or if the EEPROM stream isn't enabled.
    if (!isAddressValid(address, sizeof(T)) || !isEnabled()) { return false; }
    1566:	e8 81       	ld	r30, Y
    1568:	f9 81       	ldd	r31, Y+1	; 0x01
    156a:	02 84       	ldd	r0, Z+10	; 0x0a
    156c:	f3 85       	ldd	r31, Z+11	; 0x0b
    156e:	e0 2d       	mov	r30, r0
    1570:	41 e0       	ldi	r20, 0x01	; 1
    1572:	09 95       	icall
    1574:	d8 2e       	mov	r13, r24
    1576:	88 23       	and	r24, r24
    1578:	59 f0       	breq	.+22     	; 0x1590 <_ZNK6driver15EepromInterface5writeIbEEbjRKT_+0x3e>
    157a:	e8 81       	ld	r30, Y
    157c:	f9 81       	ldd	r31, Y+1	; 0x01
    157e:	06 80       	ldd	r0, Z+6	; 0x06
    1580:	f7 81       	ldd	r31, Z+7	; 0x07
    1582:	e0 2d       	mov	r30, r0
    1584:	ce 01       	movw	r24, r28
    1586:	09 95       	icall
    1588:	88 23       	and	r24, r24
    158a:	21 f0       	breq	.+8      	; 0x1594 <_ZNK6driver15EepromInterface5writeIbEEbjRKT_+0x42>
    158c:	d1 2c       	mov	r13, r1
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <_ZNK6driver15EepromInterface5writeIbEEbjRKT_+0x42>
    1590:	dd 24       	eor	r13, r13
    1592:	d3 94       	inc	r13
    1594:	d1 10       	cpse	r13, r1
    1596:	1e c0       	rjmp	.+60     	; 0x15d4 <_ZNK6driver15EepromInterface5writeIbEEbjRKT_+0x82>
    
    // Write each byte to EEPROM, one at a time.
    for (uint8_t i{}; i < sizeof(T); ++i)
    1598:	d1 10       	cpse	r13, r1
    159a:	1e c0       	rjmp	.+60     	; 0x15d8 <_ZNK6driver15EepromInterface5writeIbEEbjRKT_+0x86>
    {
        writeByte(address + i, static_cast<uint8_t>(data >> (8U * i)));
    159c:	e8 81       	ld	r30, Y
    159e:	f9 81       	ldd	r31, Y+1	; 0x01
    15a0:	04 84       	ldd	r0, Z+12	; 0x0c
    15a2:	f5 85       	ldd	r31, Z+13	; 0x0d
    15a4:	e0 2d       	mov	r30, r0
    15a6:	6d 2d       	mov	r22, r13
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	d7 01       	movw	r26, r14
    15ac:	4c 91       	ld	r20, X
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	cb 01       	movw	r24, r22
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <_ZNK6driver15EepromInterface5writeIbEEbjRKT_+0x72>
    15c0:	55 95       	asr	r21
    15c2:	47 95       	ror	r20
    15c4:	8a 95       	dec	r24
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <_ZNK6driver15EepromInterface5writeIbEEbjRKT_+0x6e>
    15c8:	60 0f       	add	r22, r16
    15ca:	71 1f       	adc	r23, r17
    15cc:	ce 01       	movw	r24, r28
    15ce:	09 95       	icall

    // Return false is the given address in invalid or if the EEPROM stream isn't enabled.
    if (!isAddressValid(address, sizeof(T)) || !isEnabled()) { return false; }
    
    // Write each byte to EEPROM, one at a time.
    for (uint8_t i{}; i < sizeof(T); ++i)
    15d0:	d3 94       	inc	r13
    15d2:	e2 cf       	rjmp	.-60     	; 0x1598 <_ZNK6driver15EepromInterface5writeIbEEbjRKT_+0x46>
    // Generate a compiler error if the given type isn't of unsigned type.
    static_assert(type_traits::is_unsigned<T>::value, 
        "EEPROM write only supported for unsigned data types!");

    // Return false is the given address in invalid or if the EEPROM stream isn't enabled.
    if (!isAddressValid(address, sizeof(T)) || !isEnabled()) { return false; }
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	01 c0       	rjmp	.+2      	; 0x15da <_ZNK6driver15EepromInterface5writeIbEEbjRKT_+0x88>
    for (uint8_t i{}; i < sizeof(T); ++i)
    {
        writeByte(address + i, static_cast<uint8_t>(data >> (8U * i)));
    }
    // Return true to indicate success.
    return true;
    15d8:	81 e0       	ldi	r24, 0x01	; 1
}
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	ff 90       	pop	r15
    15e4:	ef 90       	pop	r14
    15e6:	df 90       	pop	r13
    15e8:	08 95       	ret

000015ea <_ZN6target6System21writeLedStateToEepromEv>:
    }
}

// -----------------------------------------------------------------------------
void System::writeLedStateToEeprom() noexcept
{ 
    15ea:	0f 93       	push	r16
    15ec:	1f 93       	push	r17
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	1f 92       	push	r1
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	8c 01       	movw	r16, r24
    myEeprom.write(LedState::address, myToggleTimer.isEnabled());
    15fa:	dc 01       	movw	r26, r24
    15fc:	16 96       	adiw	r26, 0x06	; 6
    15fe:	8d 91       	ld	r24, X+
    1600:	9c 91       	ld	r25, X
    1602:	17 97       	sbiw	r26, 0x07	; 7
    1604:	dc 01       	movw	r26, r24
    1606:	ed 91       	ld	r30, X+
    1608:	fc 91       	ld	r31, X
    160a:	06 80       	ldd	r0, Z+6	; 0x06
    160c:	f7 81       	ldd	r31, Z+7	; 0x07
    160e:	e0 2d       	mov	r30, r0
    1610:	09 95       	icall
    1612:	89 83       	std	Y+1, r24	; 0x01
    1614:	ae 01       	movw	r20, r28
    1616:	4f 5f       	subi	r20, 0xFF	; 255
    1618:	5f 4f       	sbci	r21, 0xFF	; 255
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	f8 01       	movw	r30, r16
    1620:	84 85       	ldd	r24, Z+12	; 0x0c
    1622:	95 85       	ldd	r25, Z+13	; 0x0d
    1624:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZNK6driver15EepromInterface5writeIbEEbjRKT_>
}
    1628:	0f 90       	pop	r0
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	08 95       	ret

00001634 <_ZN6target6System19handleButtonPressedEv>:
    }
}

// -----------------------------------------------------------------------------
void System::handleButtonPressed() noexcept
{
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
    1638:	ec 01       	movw	r28, r24
    mySerial.printf("Button pressed!\n");
    163a:	6c e4       	ldi	r22, 0x4C	; 76
    163c:	72 e0       	ldi	r23, 0x02	; 2
    163e:	88 85       	ldd	r24, Y+8	; 0x08
    1640:	99 85       	ldd	r25, Y+9	; 0x09
    1642:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
    myToggleTimer.toggle();
    1646:	8e 81       	ldd	r24, Y+6	; 0x06
    1648:	9f 81       	ldd	r25, Y+7	; 0x07
    164a:	dc 01       	movw	r26, r24
    164c:	ed 91       	ld	r30, X+
    164e:	fc 91       	ld	r31, X
    1650:	02 88       	ldd	r0, Z+18	; 0x12
    1652:	f3 89       	ldd	r31, Z+19	; 0x13
    1654:	e0 2d       	mov	r30, r0
    1656:	09 95       	icall
    writeLedStateToEeprom();
    1658:	ce 01       	movw	r24, r28
    165a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <_ZN6target6System21writeLedStateToEepromEv>

    if (myToggleTimer.isEnabled()) { mySerial.printf("Toggle timer enabled!\n"); }
    165e:	8e 81       	ldd	r24, Y+6	; 0x06
    1660:	9f 81       	ldd	r25, Y+7	; 0x07
    1662:	dc 01       	movw	r26, r24
    1664:	ed 91       	ld	r30, X+
    1666:	fc 91       	ld	r31, X
    1668:	06 80       	ldd	r0, Z+6	; 0x06
    166a:	f7 81       	ldd	r31, Z+7	; 0x07
    166c:	e0 2d       	mov	r30, r0
    166e:	09 95       	icall
    1670:	88 23       	and	r24, r24
    1672:	39 f0       	breq	.+14     	; 0x1682 <_ZN6target6System19handleButtonPressedEv+0x4e>
    1674:	6d e5       	ldi	r22, 0x5D	; 93
    1676:	72 e0       	ldi	r23, 0x02	; 2
    1678:	88 85       	ldd	r24, Y+8	; 0x08
    167a:	99 85       	ldd	r25, Y+9	; 0x09
    167c:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
    1680:	10 c0       	rjmp	.+32     	; 0x16a2 <_ZN6target6System19handleButtonPressedEv+0x6e>
    else
    {
        mySerial.printf("Toggle timer disabled!\n");
    1682:	64 e7       	ldi	r22, 0x74	; 116
    1684:	72 e0       	ldi	r23, 0x02	; 2
    1686:	88 85       	ldd	r24, Y+8	; 0x08
    1688:	99 85       	ldd	r25, Y+9	; 0x09
    168a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
        myLed.write(false);
    168e:	88 81       	ld	r24, Y
    1690:	99 81       	ldd	r25, Y+1	; 0x01
    1692:	dc 01       	movw	r26, r24
    1694:	ed 91       	ld	r30, X+
    1696:	fc 91       	ld	r31, X
    1698:	00 84       	ldd	r0, Z+8	; 0x08
    169a:	f1 85       	ldd	r31, Z+9	; 0x09
    169c:	e0 2d       	mov	r30, r0
    169e:	60 e0       	ldi	r22, 0x00	; 0
    16a0:	09 95       	icall
    }
}
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	08 95       	ret

000016a8 <_ZN6target6System21handleButtonInterruptEv>:
    mySerial.setEnabled(enable);
}

// -----------------------------------------------------------------------------
void System::handleButtonInterrupt() noexcept
{
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	ec 01       	movw	r28, r24
    myButton.enableInterruptOnPort(false);
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	9b 81       	ldd	r25, Y+3	; 0x03
    16b2:	dc 01       	movw	r26, r24
    16b4:	ed 91       	ld	r30, X+
    16b6:	fc 91       	ld	r31, X
    16b8:	06 84       	ldd	r0, Z+14	; 0x0e
    16ba:	f7 85       	ldd	r31, Z+15	; 0x0f
    16bc:	e0 2d       	mov	r30, r0
    16be:	60 e0       	ldi	r22, 0x00	; 0
    16c0:	09 95       	icall
    myDebounceTimer.start();
    16c2:	8c 81       	ldd	r24, Y+4	; 0x04
    16c4:	9d 81       	ldd	r25, Y+5	; 0x05
    16c6:	dc 01       	movw	r26, r24
    16c8:	ed 91       	ld	r30, X+
    16ca:	fc 91       	ld	r31, X
    16cc:	06 84       	ldd	r0, Z+14	; 0x0e
    16ce:	f7 85       	ldd	r31, Z+15	; 0x0f
    16d0:	e0 2d       	mov	r30, r0
    16d2:	09 95       	icall
    if (myButton.read()) { handleButtonPressed(); }
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	9b 81       	ldd	r25, Y+3	; 0x03
    16d8:	dc 01       	movw	r26, r24
    16da:	ed 91       	ld	r30, X+
    16dc:	fc 91       	ld	r31, X
    16de:	06 80       	ldd	r0, Z+6	; 0x06
    16e0:	f7 81       	ldd	r31, Z+7	; 0x07
    16e2:	e0 2d       	mov	r30, r0
    16e4:	09 95       	icall
    16e6:	88 23       	and	r24, r24
    16e8:	19 f0       	breq	.+6      	; 0x16f0 <_ZN6target6System21handleButtonInterruptEv+0x48>
    16ea:	ce 01       	movw	r24, r28
    16ec:	0e 94 1a 0b 	call	0x1634	; 0x1634 <_ZN6target6System19handleButtonPressedEv>
}
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	08 95       	ret

000016f6 <_ZNK6driver15EepromInterface4readIhEEbjRT_>:

// -----------------------------------------------------------------------------
template <typename T>
bool EepromInterface::read(const uint16_t address, T& data) const noexcept
    16f6:	af 92       	push	r10
    16f8:	bf 92       	push	r11
    16fa:	df 92       	push	r13
    16fc:	ef 92       	push	r14
    16fe:	ff 92       	push	r15
    1700:	0f 93       	push	r16
    1702:	1f 93       	push	r17
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	ec 01       	movw	r28, r24
    170a:	7b 01       	movw	r14, r22
    170c:	8a 01       	movw	r16, r20
    // Generate a compiler error if the given type isn't of unsigned type.
    static_assert(type_traits::is_unsigned<T>::value, 
        "EEPROM read only supported for unsigned data types!");

    // Return false is the given address in invalid or if the EEPROM stream isn't enabled.
    if (!isAddressValid(address, sizeof(T)) || !isEnabled()) { return false; }
    170e:	e8 81       	ld	r30, Y
    1710:	f9 81       	ldd	r31, Y+1	; 0x01
    1712:	02 84       	ldd	r0, Z+10	; 0x0a
    1714:	f3 85       	ldd	r31, Z+11	; 0x0b
    1716:	e0 2d       	mov	r30, r0
    1718:	41 e0       	ldi	r20, 0x01	; 1
    171a:	09 95       	icall
    171c:	d8 2e       	mov	r13, r24
    171e:	88 23       	and	r24, r24
    1720:	59 f0       	breq	.+22     	; 0x1738 <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x42>
    1722:	e8 81       	ld	r30, Y
    1724:	f9 81       	ldd	r31, Y+1	; 0x01
    1726:	06 80       	ldd	r0, Z+6	; 0x06
    1728:	f7 81       	ldd	r31, Z+7	; 0x07
    172a:	e0 2d       	mov	r30, r0
    172c:	ce 01       	movw	r24, r28
    172e:	09 95       	icall
    1730:	88 23       	and	r24, r24
    1732:	21 f0       	breq	.+8      	; 0x173c <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x46>
    1734:	d1 2c       	mov	r13, r1
    1736:	02 c0       	rjmp	.+4      	; 0x173c <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x46>
    1738:	dd 24       	eor	r13, r13
    173a:	d3 94       	inc	r13
    173c:	d1 10       	cpse	r13, r1
    173e:	22 c0       	rjmp	.+68     	; 0x1784 <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x8e>
    data = {};
    1740:	f8 01       	movw	r30, r16
    1742:	10 82       	st	Z, r1

    // Read each byte from EEPROM, one at a type.
    for (uint8_t i{}; i < sizeof(T); ++i) 
    1744:	d1 10       	cpse	r13, r1
    1746:	20 c0       	rjmp	.+64     	; 0x1788 <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x92>
    { 
        data |= static_cast<T>(readByte(address + i) << (8U * i));
    1748:	ad 2c       	mov	r10, r13
    174a:	b1 2c       	mov	r11, r1
    174c:	b7 01       	movw	r22, r14
    174e:	6a 0d       	add	r22, r10
    1750:	7b 1d       	adc	r23, r11
    1752:	e8 81       	ld	r30, Y
    1754:	f9 81       	ldd	r31, Y+1	; 0x01
    1756:	06 84       	ldd	r0, Z+14	; 0x0e
    1758:	f7 85       	ldd	r31, Z+15	; 0x0f
    175a:	e0 2d       	mov	r30, r0
    175c:	ce 01       	movw	r24, r28
    175e:	09 95       	icall
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	aa 0c       	add	r10, r10
    1764:	bb 1c       	adc	r11, r11
    1766:	aa 0c       	add	r10, r10
    1768:	bb 1c       	adc	r11, r11
    176a:	aa 0c       	add	r10, r10
    176c:	bb 1c       	adc	r11, r11
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x7e>
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	aa 94       	dec	r10
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x7a>
    1778:	f8 01       	movw	r30, r16
    177a:	90 81       	ld	r25, Z
    177c:	89 2b       	or	r24, r25
    177e:	80 83       	st	Z, r24
    // Return false is the given address in invalid or if the EEPROM stream isn't enabled.
    if (!isAddressValid(address, sizeof(T)) || !isEnabled()) { return false; }
    data = {};

    // Read each byte from EEPROM, one at a type.
    for (uint8_t i{}; i < sizeof(T); ++i) 
    1780:	d3 94       	inc	r13
    1782:	e0 cf       	rjmp	.-64     	; 0x1744 <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x4e>
    // Generate a compiler error if the given type isn't of unsigned type.
    static_assert(type_traits::is_unsigned<T>::value, 
        "EEPROM read only supported for unsigned data types!");

    // Return false is the given address in invalid or if the EEPROM stream isn't enabled.
    if (!isAddressValid(address, sizeof(T)) || !isEnabled()) { return false; }
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	01 c0       	rjmp	.+2      	; 0x178a <_ZNK6driver15EepromInterface4readIhEEbjRT_+0x94>
    for (uint8_t i{}; i < sizeof(T); ++i) 
    { 
        data |= static_cast<T>(readByte(address + i) << (8U * i));
    }
    // Return true to indicate success.
    return true;
    1788:	81 e0       	ldi	r24, 0x01	; 1
}
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	1f 91       	pop	r17
    1790:	0f 91       	pop	r16
    1792:	ff 90       	pop	r15
    1794:	ef 90       	pop	r14
    1796:	df 90       	pop	r13
    1798:	bf 90       	pop	r11
    179a:	af 90       	pop	r10
    179c:	08 95       	ret

0000179e <_ZNK6target6System22readLedStateFromEepromEv>:
    myEeprom.write(LedState::address, myToggleTimer.isEnabled());
}

// -----------------------------------------------------------------------------
bool System::readLedStateFromEeprom() const noexcept
{
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	1f 92       	push	r1
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    uint8_t state{};
    17a8:	19 82       	std	Y+1, r1	; 0x01
    return myEeprom.read(LedState::address, state) ? LedState::enabled == state : false;
    17aa:	ae 01       	movw	r20, r28
    17ac:	4f 5f       	subi	r20, 0xFF	; 255
    17ae:	5f 4f       	sbci	r21, 0xFF	; 255
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	fc 01       	movw	r30, r24
    17b6:	84 85       	ldd	r24, Z+12	; 0x0c
    17b8:	95 85       	ldd	r25, Z+13	; 0x0d
    17ba:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZNK6driver15EepromInterface4readIhEEbjRT_>
    17be:	88 23       	and	r24, r24
    17c0:	29 f0       	breq	.+10     	; 0x17cc <_ZNK6target6System22readLedStateFromEepromEv+0x2e>
    17c2:	99 81       	ldd	r25, Y+1	; 0x01
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	91 30       	cpi	r25, 0x01	; 1
    17c8:	09 f0       	breq	.+2      	; 0x17cc <_ZNK6target6System22readLedStateFromEepromEv+0x2e>
    17ca:	80 e0       	ldi	r24, 0x00	; 0
}
    17cc:	0f 90       	pop	r0
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	08 95       	ret

000017d4 <_ZN6target6System21checkLedStateInEepromEv>:
    }
}

// -----------------------------------------------------------------------------
void System::checkLedStateInEeprom() noexcept
{
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	ec 01       	movw	r28, r24
    if (readLedStateFromEeprom())
    17da:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZNK6target6System22readLedStateFromEepromEv>
    17de:	88 23       	and	r24, r24
    17e0:	79 f0       	breq	.+30     	; 0x1800 <_ZN6target6System21checkLedStateInEepromEv+0x2c>
    {
        myToggleTimer.start();
    17e2:	8e 81       	ldd	r24, Y+6	; 0x06
    17e4:	9f 81       	ldd	r25, Y+7	; 0x07
    17e6:	dc 01       	movw	r26, r24
    17e8:	ed 91       	ld	r30, X+
    17ea:	fc 91       	ld	r31, X
    17ec:	06 84       	ldd	r0, Z+14	; 0x0e
    17ee:	f7 85       	ldd	r31, Z+15	; 0x0f
    17f0:	e0 2d       	mov	r30, r0
    17f2:	09 95       	icall
        mySerial.printf("Toggle timer enabled!\n");
    17f4:	6d e5       	ldi	r22, 0x5D	; 93
    17f6:	72 e0       	ldi	r23, 0x02	; 2
    17f8:	88 85       	ldd	r24, Y+8	; 0x08
    17fa:	99 85       	ldd	r25, Y+9	; 0x09
    17fc:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZNK6driver15SerialInterface6printfIIEEEbPKcDpRKT_>
    }
}
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	08 95       	ret

00001806 <_ZN6target6SystemC1ERN6driver13GpioInterfaceES3_RNS1_14TimerInterfaceES5_RNS1_15SerialInterfaceERNS1_17WatchdogInterfaceERNS1_15EepromInterfaceERNS1_12AdcInterfaceE>:
    /** Enabled state value in EEPROM. */
    static constexpr uint8_t enabled{1U};
};

// -----------------------------------------------------------------------------
System::System(driver::GpioInterface& led, driver::GpioInterface& button,
    1806:	6f 92       	push	r6
    1808:	7f 92       	push	r7
    180a:	8f 92       	push	r8
    180c:	9f 92       	push	r9
    180e:	af 92       	push	r10
    1810:	bf 92       	push	r11
    1812:	cf 92       	push	r12
    1814:	df 92       	push	r13
    1816:	ef 92       	push	r14
    1818:	ff 92       	push	r15
    181a:	0f 93       	push	r16
    181c:	1f 93       	push	r17
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	3c 01       	movw	r6, r24
    1828:	ca 01       	movw	r24, r20
    , myDebounceTimer{debounceTimer}
    , myToggleTimer{toggleTimer}
    , mySerial{serial}
    , myWatchdog{watchdog}
    , myEeprom{eeprom}
    , myAdc{adc}
    182a:	d3 01       	movw	r26, r6
    182c:	11 96       	adiw	r26, 0x01	; 1
    182e:	7c 93       	st	X, r23
    1830:	6e 93       	st	-X, r22
    1832:	13 96       	adiw	r26, 0x03	; 3
    1834:	5c 93       	st	X, r21
    1836:	4e 93       	st	-X, r20
    1838:	12 97       	sbiw	r26, 0x02	; 2
    183a:	15 96       	adiw	r26, 0x05	; 5
    183c:	3c 93       	st	X, r19
    183e:	2e 93       	st	-X, r18
    1840:	14 97       	sbiw	r26, 0x04	; 4
    1842:	17 96       	adiw	r26, 0x07	; 7
    1844:	1c 93       	st	X, r17
    1846:	0e 93       	st	-X, r16
    1848:	16 97       	sbiw	r26, 0x06	; 6
    184a:	19 96       	adiw	r26, 0x09	; 9
    184c:	fc 92       	st	X, r15
    184e:	ee 92       	st	-X, r14
    1850:	18 97       	sbiw	r26, 0x08	; 8
    1852:	1b 96       	adiw	r26, 0x0b	; 11
    1854:	dc 92       	st	X, r13
    1856:	ce 92       	st	-X, r12
    1858:	1a 97       	sbiw	r26, 0x0a	; 10
    185a:	1d 96       	adiw	r26, 0x0d	; 13
    185c:	bc 92       	st	X, r11
    185e:	ae 92       	st	-X, r10
    1860:	1c 97       	sbiw	r26, 0x0c	; 12
    1862:	1f 96       	adiw	r26, 0x0f	; 15
    1864:	9c 92       	st	X, r9
    1866:	8e 92       	st	-X, r8
    1868:	1e 97       	sbiw	r26, 0x0e	; 14
{
    myButton.enableInterrupt(true);
    186a:	da 01       	movw	r26, r20
    186c:	ed 91       	ld	r30, X+
    186e:	fc 91       	ld	r31, X
    1870:	04 84       	ldd	r0, Z+12	; 0x0c
    1872:	f5 85       	ldd	r31, Z+13	; 0x0d
    1874:	e0 2d       	mov	r30, r0
    1876:	61 e0       	ldi	r22, 0x01	; 1
    1878:	09 95       	icall
    mySerial.setEnabled(true);
    187a:	f3 01       	movw	r30, r6
    187c:	80 85       	ldd	r24, Z+8	; 0x08
    187e:	91 85       	ldd	r25, Z+9	; 0x09
    1880:	dc 01       	movw	r26, r24
    1882:	ed 91       	ld	r30, X+
    1884:	fc 91       	ld	r31, X
    1886:	02 84       	ldd	r0, Z+10	; 0x0a
    1888:	f3 85       	ldd	r31, Z+11	; 0x0b
    188a:	e0 2d       	mov	r30, r0
    188c:	61 e0       	ldi	r22, 0x01	; 1
    188e:	09 95       	icall
    myWatchdog.setEnabled(true);
    1890:	f3 01       	movw	r30, r6
    1892:	82 85       	ldd	r24, Z+10	; 0x0a
    1894:	93 85       	ldd	r25, Z+11	; 0x0b
    1896:	dc 01       	movw	r26, r24
    1898:	ed 91       	ld	r30, X+
    189a:	fc 91       	ld	r31, X
    189c:	00 84       	ldd	r0, Z+8	; 0x08
    189e:	f1 85       	ldd	r31, Z+9	; 0x09
    18a0:	e0 2d       	mov	r30, r0
    18a2:	61 e0       	ldi	r22, 0x01	; 1
    18a4:	09 95       	icall
    myEeprom.setEnabled(true);
    18a6:	f3 01       	movw	r30, r6
    18a8:	84 85       	ldd	r24, Z+12	; 0x0c
    18aa:	95 85       	ldd	r25, Z+13	; 0x0d
    18ac:	dc 01       	movw	r26, r24
    18ae:	ed 91       	ld	r30, X+
    18b0:	fc 91       	ld	r31, X
    18b2:	00 84       	ldd	r0, Z+8	; 0x08
    18b4:	f1 85       	ldd	r31, Z+9	; 0x09
    18b6:	e0 2d       	mov	r30, r0
    18b8:	61 e0       	ldi	r22, 0x01	; 1
    18ba:	09 95       	icall
    checkLedStateInEeprom();
    18bc:	c3 01       	movw	r24, r6
    18be:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZN6target6System21checkLedStateInEepromEv>
}
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	1f 91       	pop	r17
    18c8:	0f 91       	pop	r16
    18ca:	ff 90       	pop	r15
    18cc:	ef 90       	pop	r14
    18ce:	df 90       	pop	r13
    18d0:	cf 90       	pop	r12
    18d2:	bf 90       	pop	r11
    18d4:	af 90       	pop	r10
    18d6:	9f 90       	pop	r9
    18d8:	8f 90       	pop	r8
    18da:	7f 90       	pop	r7
    18dc:	6f 90       	pop	r6
    18de:	08 95       	ret

000018e0 <_ZN5utils21globalInterruptEnableEv>:
        _delay_us(1U);
    }
}

// -----------------------------------------------------------------------------
void globalInterruptEnable() noexcept { asm("SEI"); }
    18e0:	78 94       	sei
    18e2:	08 95       	ret

000018e4 <_ZN5utils22globalInterruptDisableEv>:

// -----------------------------------------------------------------------------
void globalInterruptDisable() noexcept { asm("CLI"); }
    18e4:	f8 94       	cli
    18e6:	08 95       	ret

000018e8 <_ZdlPvj>:

/**
 * @note Definitions required to satisfy the linker when using C++ interfaces and static local 
 *       variables in embedded projects. 
 */
void operator delete(void*, unsigned int) noexcept {}
    18e8:	08 95       	ret

000018ea <__cxa_pure_virtual>:
extern "C" void __cxa_pure_virtual() {}
    18ea:	08 95       	ret

000018ec <__cxa_guard_acquire>:
extern "C" int __cxa_guard_acquire (volatile void *g) { return !*(char *)g; }
    18ec:	fc 01       	movw	r30, r24
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	20 81       	ld	r18, Z
    18f4:	22 23       	and	r18, r18
    18f6:	11 f0       	breq	.+4      	; 0x18fc <__cxa_guard_acquire+0x10>
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	08 95       	ret

000018fe <__cxa_guard_release>:
extern "C" void __cxa_guard_release (volatile void *g) { *(char *)g = 1; }
    18fe:	21 e0       	ldi	r18, 0x01	; 1
    1900:	fc 01       	movw	r30, r24
    1902:	20 83       	st	Z, r18
    1904:	08 95       	ret

00001906 <__subsf3>:
    1906:	50 58       	subi	r21, 0x80	; 128

00001908 <__addsf3>:
    1908:	bb 27       	eor	r27, r27
    190a:	aa 27       	eor	r26, r26
    190c:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__addsf3x>
    1910:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <__fp_round>
    1914:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__fp_pscA>
    1918:	38 f0       	brcs	.+14     	; 0x1928 <__addsf3+0x20>
    191a:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__fp_pscB>
    191e:	20 f0       	brcs	.+8      	; 0x1928 <__addsf3+0x20>
    1920:	39 f4       	brne	.+14     	; 0x1930 <__addsf3+0x28>
    1922:	9f 3f       	cpi	r25, 0xFF	; 255
    1924:	19 f4       	brne	.+6      	; 0x192c <__addsf3+0x24>
    1926:	26 f4       	brtc	.+8      	; 0x1930 <__addsf3+0x28>
    1928:	0c 94 d4 0d 	jmp	0x1ba8	; 0x1ba8 <__fp_nan>
    192c:	0e f4       	brtc	.+2      	; 0x1930 <__addsf3+0x28>
    192e:	e0 95       	com	r30
    1930:	e7 fb       	bst	r30, 7
    1932:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__fp_inf>

00001936 <__addsf3x>:
    1936:	e9 2f       	mov	r30, r25
    1938:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__fp_split3>
    193c:	58 f3       	brcs	.-42     	; 0x1914 <__addsf3+0xc>
    193e:	ba 17       	cp	r27, r26
    1940:	62 07       	cpc	r22, r18
    1942:	73 07       	cpc	r23, r19
    1944:	84 07       	cpc	r24, r20
    1946:	95 07       	cpc	r25, r21
    1948:	20 f0       	brcs	.+8      	; 0x1952 <__addsf3x+0x1c>
    194a:	79 f4       	brne	.+30     	; 0x196a <__addsf3x+0x34>
    194c:	a6 f5       	brtc	.+104    	; 0x19b6 <__addsf3x+0x80>
    194e:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <__fp_zero>
    1952:	0e f4       	brtc	.+2      	; 0x1956 <__addsf3x+0x20>
    1954:	e0 95       	com	r30
    1956:	0b 2e       	mov	r0, r27
    1958:	ba 2f       	mov	r27, r26
    195a:	a0 2d       	mov	r26, r0
    195c:	0b 01       	movw	r0, r22
    195e:	b9 01       	movw	r22, r18
    1960:	90 01       	movw	r18, r0
    1962:	0c 01       	movw	r0, r24
    1964:	ca 01       	movw	r24, r20
    1966:	a0 01       	movw	r20, r0
    1968:	11 24       	eor	r1, r1
    196a:	ff 27       	eor	r31, r31
    196c:	59 1b       	sub	r21, r25
    196e:	99 f0       	breq	.+38     	; 0x1996 <__addsf3x+0x60>
    1970:	59 3f       	cpi	r21, 0xF9	; 249
    1972:	50 f4       	brcc	.+20     	; 0x1988 <__addsf3x+0x52>
    1974:	50 3e       	cpi	r21, 0xE0	; 224
    1976:	68 f1       	brcs	.+90     	; 0x19d2 <__addsf3x+0x9c>
    1978:	1a 16       	cp	r1, r26
    197a:	f0 40       	sbci	r31, 0x00	; 0
    197c:	a2 2f       	mov	r26, r18
    197e:	23 2f       	mov	r18, r19
    1980:	34 2f       	mov	r19, r20
    1982:	44 27       	eor	r20, r20
    1984:	58 5f       	subi	r21, 0xF8	; 248
    1986:	f3 cf       	rjmp	.-26     	; 0x196e <__addsf3x+0x38>
    1988:	46 95       	lsr	r20
    198a:	37 95       	ror	r19
    198c:	27 95       	ror	r18
    198e:	a7 95       	ror	r26
    1990:	f0 40       	sbci	r31, 0x00	; 0
    1992:	53 95       	inc	r21
    1994:	c9 f7       	brne	.-14     	; 0x1988 <__addsf3x+0x52>
    1996:	7e f4       	brtc	.+30     	; 0x19b6 <__addsf3x+0x80>
    1998:	1f 16       	cp	r1, r31
    199a:	ba 0b       	sbc	r27, r26
    199c:	62 0b       	sbc	r22, r18
    199e:	73 0b       	sbc	r23, r19
    19a0:	84 0b       	sbc	r24, r20
    19a2:	ba f0       	brmi	.+46     	; 0x19d2 <__addsf3x+0x9c>
    19a4:	91 50       	subi	r25, 0x01	; 1
    19a6:	a1 f0       	breq	.+40     	; 0x19d0 <__addsf3x+0x9a>
    19a8:	ff 0f       	add	r31, r31
    19aa:	bb 1f       	adc	r27, r27
    19ac:	66 1f       	adc	r22, r22
    19ae:	77 1f       	adc	r23, r23
    19b0:	88 1f       	adc	r24, r24
    19b2:	c2 f7       	brpl	.-16     	; 0x19a4 <__addsf3x+0x6e>
    19b4:	0e c0       	rjmp	.+28     	; 0x19d2 <__addsf3x+0x9c>
    19b6:	ba 0f       	add	r27, r26
    19b8:	62 1f       	adc	r22, r18
    19ba:	73 1f       	adc	r23, r19
    19bc:	84 1f       	adc	r24, r20
    19be:	48 f4       	brcc	.+18     	; 0x19d2 <__addsf3x+0x9c>
    19c0:	87 95       	ror	r24
    19c2:	77 95       	ror	r23
    19c4:	67 95       	ror	r22
    19c6:	b7 95       	ror	r27
    19c8:	f7 95       	ror	r31
    19ca:	9e 3f       	cpi	r25, 0xFE	; 254
    19cc:	08 f0       	brcs	.+2      	; 0x19d0 <__addsf3x+0x9a>
    19ce:	b0 cf       	rjmp	.-160    	; 0x1930 <__addsf3+0x28>
    19d0:	93 95       	inc	r25
    19d2:	88 0f       	add	r24, r24
    19d4:	08 f0       	brcs	.+2      	; 0x19d8 <__addsf3x+0xa2>
    19d6:	99 27       	eor	r25, r25
    19d8:	ee 0f       	add	r30, r30
    19da:	97 95       	ror	r25
    19dc:	87 95       	ror	r24
    19de:	08 95       	ret

000019e0 <__divsf3>:
    19e0:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__divsf3x>
    19e4:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <__fp_round>
    19e8:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__fp_pscB>
    19ec:	58 f0       	brcs	.+22     	; 0x1a04 <__divsf3+0x24>
    19ee:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__fp_pscA>
    19f2:	40 f0       	brcs	.+16     	; 0x1a04 <__divsf3+0x24>
    19f4:	29 f4       	brne	.+10     	; 0x1a00 <__divsf3+0x20>
    19f6:	5f 3f       	cpi	r21, 0xFF	; 255
    19f8:	29 f0       	breq	.+10     	; 0x1a04 <__divsf3+0x24>
    19fa:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__fp_inf>
    19fe:	51 11       	cpse	r21, r1
    1a00:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__fp_szero>
    1a04:	0c 94 d4 0d 	jmp	0x1ba8	; 0x1ba8 <__fp_nan>

00001a08 <__divsf3x>:
    1a08:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__fp_split3>
    1a0c:	68 f3       	brcs	.-38     	; 0x19e8 <__divsf3+0x8>

00001a0e <__divsf3_pse>:
    1a0e:	99 23       	and	r25, r25
    1a10:	b1 f3       	breq	.-20     	; 0x19fe <__divsf3+0x1e>
    1a12:	55 23       	and	r21, r21
    1a14:	91 f3       	breq	.-28     	; 0x19fa <__divsf3+0x1a>
    1a16:	95 1b       	sub	r25, r21
    1a18:	55 0b       	sbc	r21, r21
    1a1a:	bb 27       	eor	r27, r27
    1a1c:	aa 27       	eor	r26, r26
    1a1e:	62 17       	cp	r22, r18
    1a20:	73 07       	cpc	r23, r19
    1a22:	84 07       	cpc	r24, r20
    1a24:	38 f0       	brcs	.+14     	; 0x1a34 <__divsf3_pse+0x26>
    1a26:	9f 5f       	subi	r25, 0xFF	; 255
    1a28:	5f 4f       	sbci	r21, 0xFF	; 255
    1a2a:	22 0f       	add	r18, r18
    1a2c:	33 1f       	adc	r19, r19
    1a2e:	44 1f       	adc	r20, r20
    1a30:	aa 1f       	adc	r26, r26
    1a32:	a9 f3       	breq	.-22     	; 0x1a1e <__divsf3_pse+0x10>
    1a34:	35 d0       	rcall	.+106    	; 0x1aa0 <__divsf3_pse+0x92>
    1a36:	0e 2e       	mov	r0, r30
    1a38:	3a f0       	brmi	.+14     	; 0x1a48 <__divsf3_pse+0x3a>
    1a3a:	e0 e8       	ldi	r30, 0x80	; 128
    1a3c:	32 d0       	rcall	.+100    	; 0x1aa2 <__divsf3_pse+0x94>
    1a3e:	91 50       	subi	r25, 0x01	; 1
    1a40:	50 40       	sbci	r21, 0x00	; 0
    1a42:	e6 95       	lsr	r30
    1a44:	00 1c       	adc	r0, r0
    1a46:	ca f7       	brpl	.-14     	; 0x1a3a <__divsf3_pse+0x2c>
    1a48:	2b d0       	rcall	.+86     	; 0x1aa0 <__divsf3_pse+0x92>
    1a4a:	fe 2f       	mov	r31, r30
    1a4c:	29 d0       	rcall	.+82     	; 0x1aa0 <__divsf3_pse+0x92>
    1a4e:	66 0f       	add	r22, r22
    1a50:	77 1f       	adc	r23, r23
    1a52:	88 1f       	adc	r24, r24
    1a54:	bb 1f       	adc	r27, r27
    1a56:	26 17       	cp	r18, r22
    1a58:	37 07       	cpc	r19, r23
    1a5a:	48 07       	cpc	r20, r24
    1a5c:	ab 07       	cpc	r26, r27
    1a5e:	b0 e8       	ldi	r27, 0x80	; 128
    1a60:	09 f0       	breq	.+2      	; 0x1a64 <__divsf3_pse+0x56>
    1a62:	bb 0b       	sbc	r27, r27
    1a64:	80 2d       	mov	r24, r0
    1a66:	bf 01       	movw	r22, r30
    1a68:	ff 27       	eor	r31, r31
    1a6a:	93 58       	subi	r25, 0x83	; 131
    1a6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a6e:	3a f0       	brmi	.+14     	; 0x1a7e <__divsf3_pse+0x70>
    1a70:	9e 3f       	cpi	r25, 0xFE	; 254
    1a72:	51 05       	cpc	r21, r1
    1a74:	78 f0       	brcs	.+30     	; 0x1a94 <__divsf3_pse+0x86>
    1a76:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__fp_inf>
    1a7a:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__fp_szero>
    1a7e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a80:	e4 f3       	brlt	.-8      	; 0x1a7a <__divsf3_pse+0x6c>
    1a82:	98 3e       	cpi	r25, 0xE8	; 232
    1a84:	d4 f3       	brlt	.-12     	; 0x1a7a <__divsf3_pse+0x6c>
    1a86:	86 95       	lsr	r24
    1a88:	77 95       	ror	r23
    1a8a:	67 95       	ror	r22
    1a8c:	b7 95       	ror	r27
    1a8e:	f7 95       	ror	r31
    1a90:	9f 5f       	subi	r25, 0xFF	; 255
    1a92:	c9 f7       	brne	.-14     	; 0x1a86 <__divsf3_pse+0x78>
    1a94:	88 0f       	add	r24, r24
    1a96:	91 1d       	adc	r25, r1
    1a98:	96 95       	lsr	r25
    1a9a:	87 95       	ror	r24
    1a9c:	97 f9       	bld	r25, 7
    1a9e:	08 95       	ret
    1aa0:	e1 e0       	ldi	r30, 0x01	; 1
    1aa2:	66 0f       	add	r22, r22
    1aa4:	77 1f       	adc	r23, r23
    1aa6:	88 1f       	adc	r24, r24
    1aa8:	bb 1f       	adc	r27, r27
    1aaa:	62 17       	cp	r22, r18
    1aac:	73 07       	cpc	r23, r19
    1aae:	84 07       	cpc	r24, r20
    1ab0:	ba 07       	cpc	r27, r26
    1ab2:	20 f0       	brcs	.+8      	; 0x1abc <__divsf3_pse+0xae>
    1ab4:	62 1b       	sub	r22, r18
    1ab6:	73 0b       	sbc	r23, r19
    1ab8:	84 0b       	sbc	r24, r20
    1aba:	ba 0b       	sbc	r27, r26
    1abc:	ee 1f       	adc	r30, r30
    1abe:	88 f7       	brcc	.-30     	; 0x1aa2 <__divsf3_pse+0x94>
    1ac0:	e0 95       	com	r30
    1ac2:	08 95       	ret

00001ac4 <__fixunssfsi>:
    1ac4:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__fp_splitA>
    1ac8:	88 f0       	brcs	.+34     	; 0x1aec <__fixunssfsi+0x28>
    1aca:	9f 57       	subi	r25, 0x7F	; 127
    1acc:	98 f0       	brcs	.+38     	; 0x1af4 <__fixunssfsi+0x30>
    1ace:	b9 2f       	mov	r27, r25
    1ad0:	99 27       	eor	r25, r25
    1ad2:	b7 51       	subi	r27, 0x17	; 23
    1ad4:	b0 f0       	brcs	.+44     	; 0x1b02 <__fixunssfsi+0x3e>
    1ad6:	e1 f0       	breq	.+56     	; 0x1b10 <__fixunssfsi+0x4c>
    1ad8:	66 0f       	add	r22, r22
    1ada:	77 1f       	adc	r23, r23
    1adc:	88 1f       	adc	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	1a f0       	brmi	.+6      	; 0x1ae8 <__fixunssfsi+0x24>
    1ae2:	ba 95       	dec	r27
    1ae4:	c9 f7       	brne	.-14     	; 0x1ad8 <__fixunssfsi+0x14>
    1ae6:	14 c0       	rjmp	.+40     	; 0x1b10 <__fixunssfsi+0x4c>
    1ae8:	b1 30       	cpi	r27, 0x01	; 1
    1aea:	91 f0       	breq	.+36     	; 0x1b10 <__fixunssfsi+0x4c>
    1aec:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__fp_zero>
    1af0:	b1 e0       	ldi	r27, 0x01	; 1
    1af2:	08 95       	ret
    1af4:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <__fp_zero>
    1af8:	67 2f       	mov	r22, r23
    1afa:	78 2f       	mov	r23, r24
    1afc:	88 27       	eor	r24, r24
    1afe:	b8 5f       	subi	r27, 0xF8	; 248
    1b00:	39 f0       	breq	.+14     	; 0x1b10 <__fixunssfsi+0x4c>
    1b02:	b9 3f       	cpi	r27, 0xF9	; 249
    1b04:	cc f3       	brlt	.-14     	; 0x1af8 <__fixunssfsi+0x34>
    1b06:	86 95       	lsr	r24
    1b08:	77 95       	ror	r23
    1b0a:	67 95       	ror	r22
    1b0c:	b3 95       	inc	r27
    1b0e:	d9 f7       	brne	.-10     	; 0x1b06 <__fixunssfsi+0x42>
    1b10:	3e f4       	brtc	.+14     	; 0x1b20 <__fixunssfsi+0x5c>
    1b12:	90 95       	com	r25
    1b14:	80 95       	com	r24
    1b16:	70 95       	com	r23
    1b18:	61 95       	neg	r22
    1b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b20:	08 95       	ret

00001b22 <__floatunsisf>:
    1b22:	e8 94       	clt
    1b24:	09 c0       	rjmp	.+18     	; 0x1b38 <__floatsisf+0x12>

00001b26 <__floatsisf>:
    1b26:	97 fb       	bst	r25, 7
    1b28:	3e f4       	brtc	.+14     	; 0x1b38 <__floatsisf+0x12>
    1b2a:	90 95       	com	r25
    1b2c:	80 95       	com	r24
    1b2e:	70 95       	com	r23
    1b30:	61 95       	neg	r22
    1b32:	7f 4f       	sbci	r23, 0xFF	; 255
    1b34:	8f 4f       	sbci	r24, 0xFF	; 255
    1b36:	9f 4f       	sbci	r25, 0xFF	; 255
    1b38:	99 23       	and	r25, r25
    1b3a:	a9 f0       	breq	.+42     	; 0x1b66 <__floatsisf+0x40>
    1b3c:	f9 2f       	mov	r31, r25
    1b3e:	96 e9       	ldi	r25, 0x96	; 150
    1b40:	bb 27       	eor	r27, r27
    1b42:	93 95       	inc	r25
    1b44:	f6 95       	lsr	r31
    1b46:	87 95       	ror	r24
    1b48:	77 95       	ror	r23
    1b4a:	67 95       	ror	r22
    1b4c:	b7 95       	ror	r27
    1b4e:	f1 11       	cpse	r31, r1
    1b50:	f8 cf       	rjmp	.-16     	; 0x1b42 <__floatsisf+0x1c>
    1b52:	fa f4       	brpl	.+62     	; 0x1b92 <__floatsisf+0x6c>
    1b54:	bb 0f       	add	r27, r27
    1b56:	11 f4       	brne	.+4      	; 0x1b5c <__floatsisf+0x36>
    1b58:	60 ff       	sbrs	r22, 0
    1b5a:	1b c0       	rjmp	.+54     	; 0x1b92 <__floatsisf+0x6c>
    1b5c:	6f 5f       	subi	r22, 0xFF	; 255
    1b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b60:	8f 4f       	sbci	r24, 0xFF	; 255
    1b62:	9f 4f       	sbci	r25, 0xFF	; 255
    1b64:	16 c0       	rjmp	.+44     	; 0x1b92 <__floatsisf+0x6c>
    1b66:	88 23       	and	r24, r24
    1b68:	11 f0       	breq	.+4      	; 0x1b6e <__floatsisf+0x48>
    1b6a:	96 e9       	ldi	r25, 0x96	; 150
    1b6c:	11 c0       	rjmp	.+34     	; 0x1b90 <__floatsisf+0x6a>
    1b6e:	77 23       	and	r23, r23
    1b70:	21 f0       	breq	.+8      	; 0x1b7a <__floatsisf+0x54>
    1b72:	9e e8       	ldi	r25, 0x8E	; 142
    1b74:	87 2f       	mov	r24, r23
    1b76:	76 2f       	mov	r23, r22
    1b78:	05 c0       	rjmp	.+10     	; 0x1b84 <__floatsisf+0x5e>
    1b7a:	66 23       	and	r22, r22
    1b7c:	71 f0       	breq	.+28     	; 0x1b9a <__floatsisf+0x74>
    1b7e:	96 e8       	ldi	r25, 0x86	; 134
    1b80:	86 2f       	mov	r24, r22
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	60 e0       	ldi	r22, 0x00	; 0
    1b86:	2a f0       	brmi	.+10     	; 0x1b92 <__floatsisf+0x6c>
    1b88:	9a 95       	dec	r25
    1b8a:	66 0f       	add	r22, r22
    1b8c:	77 1f       	adc	r23, r23
    1b8e:	88 1f       	adc	r24, r24
    1b90:	da f7       	brpl	.-10     	; 0x1b88 <__floatsisf+0x62>
    1b92:	88 0f       	add	r24, r24
    1b94:	96 95       	lsr	r25
    1b96:	87 95       	ror	r24
    1b98:	97 f9       	bld	r25, 7
    1b9a:	08 95       	ret

00001b9c <__fp_inf>:
    1b9c:	97 f9       	bld	r25, 7
    1b9e:	9f 67       	ori	r25, 0x7F	; 127
    1ba0:	80 e8       	ldi	r24, 0x80	; 128
    1ba2:	70 e0       	ldi	r23, 0x00	; 0
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	08 95       	ret

00001ba8 <__fp_nan>:
    1ba8:	9f ef       	ldi	r25, 0xFF	; 255
    1baa:	80 ec       	ldi	r24, 0xC0	; 192
    1bac:	08 95       	ret

00001bae <__fp_pscA>:
    1bae:	00 24       	eor	r0, r0
    1bb0:	0a 94       	dec	r0
    1bb2:	16 16       	cp	r1, r22
    1bb4:	17 06       	cpc	r1, r23
    1bb6:	18 06       	cpc	r1, r24
    1bb8:	09 06       	cpc	r0, r25
    1bba:	08 95       	ret

00001bbc <__fp_pscB>:
    1bbc:	00 24       	eor	r0, r0
    1bbe:	0a 94       	dec	r0
    1bc0:	12 16       	cp	r1, r18
    1bc2:	13 06       	cpc	r1, r19
    1bc4:	14 06       	cpc	r1, r20
    1bc6:	05 06       	cpc	r0, r21
    1bc8:	08 95       	ret

00001bca <__fp_round>:
    1bca:	09 2e       	mov	r0, r25
    1bcc:	03 94       	inc	r0
    1bce:	00 0c       	add	r0, r0
    1bd0:	11 f4       	brne	.+4      	; 0x1bd6 <__fp_round+0xc>
    1bd2:	88 23       	and	r24, r24
    1bd4:	52 f0       	brmi	.+20     	; 0x1bea <__fp_round+0x20>
    1bd6:	bb 0f       	add	r27, r27
    1bd8:	40 f4       	brcc	.+16     	; 0x1bea <__fp_round+0x20>
    1bda:	bf 2b       	or	r27, r31
    1bdc:	11 f4       	brne	.+4      	; 0x1be2 <__fp_round+0x18>
    1bde:	60 ff       	sbrs	r22, 0
    1be0:	04 c0       	rjmp	.+8      	; 0x1bea <__fp_round+0x20>
    1be2:	6f 5f       	subi	r22, 0xFF	; 255
    1be4:	7f 4f       	sbci	r23, 0xFF	; 255
    1be6:	8f 4f       	sbci	r24, 0xFF	; 255
    1be8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bea:	08 95       	ret

00001bec <__fp_split3>:
    1bec:	57 fd       	sbrc	r21, 7
    1bee:	90 58       	subi	r25, 0x80	; 128
    1bf0:	44 0f       	add	r20, r20
    1bf2:	55 1f       	adc	r21, r21
    1bf4:	59 f0       	breq	.+22     	; 0x1c0c <__fp_splitA+0x10>
    1bf6:	5f 3f       	cpi	r21, 0xFF	; 255
    1bf8:	71 f0       	breq	.+28     	; 0x1c16 <__fp_splitA+0x1a>
    1bfa:	47 95       	ror	r20

00001bfc <__fp_splitA>:
    1bfc:	88 0f       	add	r24, r24
    1bfe:	97 fb       	bst	r25, 7
    1c00:	99 1f       	adc	r25, r25
    1c02:	61 f0       	breq	.+24     	; 0x1c1c <__fp_splitA+0x20>
    1c04:	9f 3f       	cpi	r25, 0xFF	; 255
    1c06:	79 f0       	breq	.+30     	; 0x1c26 <__fp_splitA+0x2a>
    1c08:	87 95       	ror	r24
    1c0a:	08 95       	ret
    1c0c:	12 16       	cp	r1, r18
    1c0e:	13 06       	cpc	r1, r19
    1c10:	14 06       	cpc	r1, r20
    1c12:	55 1f       	adc	r21, r21
    1c14:	f2 cf       	rjmp	.-28     	; 0x1bfa <__fp_split3+0xe>
    1c16:	46 95       	lsr	r20
    1c18:	f1 df       	rcall	.-30     	; 0x1bfc <__fp_splitA>
    1c1a:	08 c0       	rjmp	.+16     	; 0x1c2c <__fp_splitA+0x30>
    1c1c:	16 16       	cp	r1, r22
    1c1e:	17 06       	cpc	r1, r23
    1c20:	18 06       	cpc	r1, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	f1 cf       	rjmp	.-30     	; 0x1c08 <__fp_splitA+0xc>
    1c26:	86 95       	lsr	r24
    1c28:	71 05       	cpc	r23, r1
    1c2a:	61 05       	cpc	r22, r1
    1c2c:	08 94       	sec
    1c2e:	08 95       	ret

00001c30 <__fp_zero>:
    1c30:	e8 94       	clt

00001c32 <__fp_szero>:
    1c32:	bb 27       	eor	r27, r27
    1c34:	66 27       	eor	r22, r22
    1c36:	77 27       	eor	r23, r23
    1c38:	cb 01       	movw	r24, r22
    1c3a:	97 f9       	bld	r25, 7
    1c3c:	08 95       	ret

00001c3e <__mulsf3>:
    1c3e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__mulsf3x>
    1c42:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <__fp_round>
    1c46:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__fp_pscA>
    1c4a:	38 f0       	brcs	.+14     	; 0x1c5a <__mulsf3+0x1c>
    1c4c:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__fp_pscB>
    1c50:	20 f0       	brcs	.+8      	; 0x1c5a <__mulsf3+0x1c>
    1c52:	95 23       	and	r25, r21
    1c54:	11 f0       	breq	.+4      	; 0x1c5a <__mulsf3+0x1c>
    1c56:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__fp_inf>
    1c5a:	0c 94 d4 0d 	jmp	0x1ba8	; 0x1ba8 <__fp_nan>
    1c5e:	11 24       	eor	r1, r1
    1c60:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__fp_szero>

00001c64 <__mulsf3x>:
    1c64:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__fp_split3>
    1c68:	70 f3       	brcs	.-36     	; 0x1c46 <__mulsf3+0x8>

00001c6a <__mulsf3_pse>:
    1c6a:	95 9f       	mul	r25, r21
    1c6c:	c1 f3       	breq	.-16     	; 0x1c5e <__mulsf3+0x20>
    1c6e:	95 0f       	add	r25, r21
    1c70:	50 e0       	ldi	r21, 0x00	; 0
    1c72:	55 1f       	adc	r21, r21
    1c74:	62 9f       	mul	r22, r18
    1c76:	f0 01       	movw	r30, r0
    1c78:	72 9f       	mul	r23, r18
    1c7a:	bb 27       	eor	r27, r27
    1c7c:	f0 0d       	add	r31, r0
    1c7e:	b1 1d       	adc	r27, r1
    1c80:	63 9f       	mul	r22, r19
    1c82:	aa 27       	eor	r26, r26
    1c84:	f0 0d       	add	r31, r0
    1c86:	b1 1d       	adc	r27, r1
    1c88:	aa 1f       	adc	r26, r26
    1c8a:	64 9f       	mul	r22, r20
    1c8c:	66 27       	eor	r22, r22
    1c8e:	b0 0d       	add	r27, r0
    1c90:	a1 1d       	adc	r26, r1
    1c92:	66 1f       	adc	r22, r22
    1c94:	82 9f       	mul	r24, r18
    1c96:	22 27       	eor	r18, r18
    1c98:	b0 0d       	add	r27, r0
    1c9a:	a1 1d       	adc	r26, r1
    1c9c:	62 1f       	adc	r22, r18
    1c9e:	73 9f       	mul	r23, r19
    1ca0:	b0 0d       	add	r27, r0
    1ca2:	a1 1d       	adc	r26, r1
    1ca4:	62 1f       	adc	r22, r18
    1ca6:	83 9f       	mul	r24, r19
    1ca8:	a0 0d       	add	r26, r0
    1caa:	61 1d       	adc	r22, r1
    1cac:	22 1f       	adc	r18, r18
    1cae:	74 9f       	mul	r23, r20
    1cb0:	33 27       	eor	r19, r19
    1cb2:	a0 0d       	add	r26, r0
    1cb4:	61 1d       	adc	r22, r1
    1cb6:	23 1f       	adc	r18, r19
    1cb8:	84 9f       	mul	r24, r20
    1cba:	60 0d       	add	r22, r0
    1cbc:	21 1d       	adc	r18, r1
    1cbe:	82 2f       	mov	r24, r18
    1cc0:	76 2f       	mov	r23, r22
    1cc2:	6a 2f       	mov	r22, r26
    1cc4:	11 24       	eor	r1, r1
    1cc6:	9f 57       	subi	r25, 0x7F	; 127
    1cc8:	50 40       	sbci	r21, 0x00	; 0
    1cca:	9a f0       	brmi	.+38     	; 0x1cf2 <__mulsf3_pse+0x88>
    1ccc:	f1 f0       	breq	.+60     	; 0x1d0a <__mulsf3_pse+0xa0>
    1cce:	88 23       	and	r24, r24
    1cd0:	4a f0       	brmi	.+18     	; 0x1ce4 <__mulsf3_pse+0x7a>
    1cd2:	ee 0f       	add	r30, r30
    1cd4:	ff 1f       	adc	r31, r31
    1cd6:	bb 1f       	adc	r27, r27
    1cd8:	66 1f       	adc	r22, r22
    1cda:	77 1f       	adc	r23, r23
    1cdc:	88 1f       	adc	r24, r24
    1cde:	91 50       	subi	r25, 0x01	; 1
    1ce0:	50 40       	sbci	r21, 0x00	; 0
    1ce2:	a9 f7       	brne	.-22     	; 0x1cce <__mulsf3_pse+0x64>
    1ce4:	9e 3f       	cpi	r25, 0xFE	; 254
    1ce6:	51 05       	cpc	r21, r1
    1ce8:	80 f0       	brcs	.+32     	; 0x1d0a <__mulsf3_pse+0xa0>
    1cea:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__fp_inf>
    1cee:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__fp_szero>
    1cf2:	5f 3f       	cpi	r21, 0xFF	; 255
    1cf4:	e4 f3       	brlt	.-8      	; 0x1cee <__mulsf3_pse+0x84>
    1cf6:	98 3e       	cpi	r25, 0xE8	; 232
    1cf8:	d4 f3       	brlt	.-12     	; 0x1cee <__mulsf3_pse+0x84>
    1cfa:	86 95       	lsr	r24
    1cfc:	77 95       	ror	r23
    1cfe:	67 95       	ror	r22
    1d00:	b7 95       	ror	r27
    1d02:	f7 95       	ror	r31
    1d04:	e7 95       	ror	r30
    1d06:	9f 5f       	subi	r25, 0xFF	; 255
    1d08:	c1 f7       	brne	.-16     	; 0x1cfa <__mulsf3_pse+0x90>
    1d0a:	fe 2b       	or	r31, r30
    1d0c:	88 0f       	add	r24, r24
    1d0e:	91 1d       	adc	r25, r1
    1d10:	96 95       	lsr	r25
    1d12:	87 95       	ror	r24
    1d14:	97 f9       	bld	r25, 7
    1d16:	08 95       	ret

00001d18 <__ashldi3>:
    1d18:	0f 93       	push	r16
    1d1a:	08 30       	cpi	r16, 0x08	; 8
    1d1c:	90 f0       	brcs	.+36     	; 0x1d42 <__ashldi3+0x2a>
    1d1e:	98 2f       	mov	r25, r24
    1d20:	87 2f       	mov	r24, r23
    1d22:	76 2f       	mov	r23, r22
    1d24:	65 2f       	mov	r22, r21
    1d26:	54 2f       	mov	r21, r20
    1d28:	43 2f       	mov	r20, r19
    1d2a:	32 2f       	mov	r19, r18
    1d2c:	22 27       	eor	r18, r18
    1d2e:	08 50       	subi	r16, 0x08	; 8
    1d30:	f4 cf       	rjmp	.-24     	; 0x1d1a <__ashldi3+0x2>
    1d32:	22 0f       	add	r18, r18
    1d34:	33 1f       	adc	r19, r19
    1d36:	44 1f       	adc	r20, r20
    1d38:	55 1f       	adc	r21, r21
    1d3a:	66 1f       	adc	r22, r22
    1d3c:	77 1f       	adc	r23, r23
    1d3e:	88 1f       	adc	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	0a 95       	dec	r16
    1d44:	b2 f7       	brpl	.-20     	; 0x1d32 <__ashldi3+0x1a>
    1d46:	0f 91       	pop	r16
    1d48:	08 95       	ret

00001d4a <__ashrdi3>:
    1d4a:	97 fb       	bst	r25, 7
    1d4c:	10 f8       	bld	r1, 0

00001d4e <__lshrdi3>:
    1d4e:	16 94       	lsr	r1
    1d50:	00 08       	sbc	r0, r0
    1d52:	0f 93       	push	r16
    1d54:	08 30       	cpi	r16, 0x08	; 8
    1d56:	98 f0       	brcs	.+38     	; 0x1d7e <__lshrdi3+0x30>
    1d58:	08 50       	subi	r16, 0x08	; 8
    1d5a:	23 2f       	mov	r18, r19
    1d5c:	34 2f       	mov	r19, r20
    1d5e:	45 2f       	mov	r20, r21
    1d60:	56 2f       	mov	r21, r22
    1d62:	67 2f       	mov	r22, r23
    1d64:	78 2f       	mov	r23, r24
    1d66:	89 2f       	mov	r24, r25
    1d68:	90 2d       	mov	r25, r0
    1d6a:	f4 cf       	rjmp	.-24     	; 0x1d54 <__lshrdi3+0x6>
    1d6c:	05 94       	asr	r0
    1d6e:	97 95       	ror	r25
    1d70:	87 95       	ror	r24
    1d72:	77 95       	ror	r23
    1d74:	67 95       	ror	r22
    1d76:	57 95       	ror	r21
    1d78:	47 95       	ror	r20
    1d7a:	37 95       	ror	r19
    1d7c:	27 95       	ror	r18
    1d7e:	0a 95       	dec	r16
    1d80:	aa f7       	brpl	.-22     	; 0x1d6c <__lshrdi3+0x1e>
    1d82:	0f 91       	pop	r16
    1d84:	08 95       	ret

00001d86 <__cmpdi2_s8>:
    1d86:	00 24       	eor	r0, r0
    1d88:	a7 fd       	sbrc	r26, 7
    1d8a:	00 94       	com	r0
    1d8c:	2a 17       	cp	r18, r26
    1d8e:	30 05       	cpc	r19, r0
    1d90:	40 05       	cpc	r20, r0
    1d92:	50 05       	cpc	r21, r0
    1d94:	60 05       	cpc	r22, r0
    1d96:	70 05       	cpc	r23, r0
    1d98:	80 05       	cpc	r24, r0
    1d9a:	90 05       	cpc	r25, r0
    1d9c:	08 95       	ret

00001d9e <__tablejump2__>:
    1d9e:	ee 0f       	add	r30, r30
    1da0:	ff 1f       	adc	r31, r31
    1da2:	05 90       	lpm	r0, Z+
    1da4:	f4 91       	lpm	r31, Z
    1da6:	e0 2d       	mov	r30, r0
    1da8:	09 94       	ijmp

00001daa <malloc>:
    1daa:	0f 93       	push	r16
    1dac:	1f 93       	push	r17
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
    1db2:	82 30       	cpi	r24, 0x02	; 2
    1db4:	91 05       	cpc	r25, r1
    1db6:	10 f4       	brcc	.+4      	; 0x1dbc <malloc+0x12>
    1db8:	82 e0       	ldi	r24, 0x02	; 2
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	e0 91 d6 02 	lds	r30, 0x02D6	; 0x8002d6 <__flp>
    1dc0:	f0 91 d7 02 	lds	r31, 0x02D7	; 0x8002d7 <__flp+0x1>
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	a0 e0       	ldi	r26, 0x00	; 0
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	30 97       	sbiw	r30, 0x00	; 0
    1dce:	19 f1       	breq	.+70     	; 0x1e16 <malloc+0x6c>
    1dd0:	40 81       	ld	r20, Z
    1dd2:	51 81       	ldd	r21, Z+1	; 0x01
    1dd4:	02 81       	ldd	r16, Z+2	; 0x02
    1dd6:	13 81       	ldd	r17, Z+3	; 0x03
    1dd8:	48 17       	cp	r20, r24
    1dda:	59 07       	cpc	r21, r25
    1ddc:	c8 f0       	brcs	.+50     	; 0x1e10 <malloc+0x66>
    1dde:	84 17       	cp	r24, r20
    1de0:	95 07       	cpc	r25, r21
    1de2:	69 f4       	brne	.+26     	; 0x1dfe <malloc+0x54>
    1de4:	10 97       	sbiw	r26, 0x00	; 0
    1de6:	31 f0       	breq	.+12     	; 0x1df4 <malloc+0x4a>
    1de8:	12 96       	adiw	r26, 0x02	; 2
    1dea:	0c 93       	st	X, r16
    1dec:	12 97       	sbiw	r26, 0x02	; 2
    1dee:	13 96       	adiw	r26, 0x03	; 3
    1df0:	1c 93       	st	X, r17
    1df2:	27 c0       	rjmp	.+78     	; 0x1e42 <malloc+0x98>
    1df4:	00 93 d6 02 	sts	0x02D6, r16	; 0x8002d6 <__flp>
    1df8:	10 93 d7 02 	sts	0x02D7, r17	; 0x8002d7 <__flp+0x1>
    1dfc:	22 c0       	rjmp	.+68     	; 0x1e42 <malloc+0x98>
    1dfe:	21 15       	cp	r18, r1
    1e00:	31 05       	cpc	r19, r1
    1e02:	19 f0       	breq	.+6      	; 0x1e0a <malloc+0x60>
    1e04:	42 17       	cp	r20, r18
    1e06:	53 07       	cpc	r21, r19
    1e08:	18 f4       	brcc	.+6      	; 0x1e10 <malloc+0x66>
    1e0a:	9a 01       	movw	r18, r20
    1e0c:	bd 01       	movw	r22, r26
    1e0e:	ef 01       	movw	r28, r30
    1e10:	df 01       	movw	r26, r30
    1e12:	f8 01       	movw	r30, r16
    1e14:	db cf       	rjmp	.-74     	; 0x1dcc <malloc+0x22>
    1e16:	21 15       	cp	r18, r1
    1e18:	31 05       	cpc	r19, r1
    1e1a:	f9 f0       	breq	.+62     	; 0x1e5a <malloc+0xb0>
    1e1c:	28 1b       	sub	r18, r24
    1e1e:	39 0b       	sbc	r19, r25
    1e20:	24 30       	cpi	r18, 0x04	; 4
    1e22:	31 05       	cpc	r19, r1
    1e24:	80 f4       	brcc	.+32     	; 0x1e46 <malloc+0x9c>
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	9b 81       	ldd	r25, Y+3	; 0x03
    1e2a:	61 15       	cp	r22, r1
    1e2c:	71 05       	cpc	r23, r1
    1e2e:	21 f0       	breq	.+8      	; 0x1e38 <malloc+0x8e>
    1e30:	fb 01       	movw	r30, r22
    1e32:	93 83       	std	Z+3, r25	; 0x03
    1e34:	82 83       	std	Z+2, r24	; 0x02
    1e36:	04 c0       	rjmp	.+8      	; 0x1e40 <malloc+0x96>
    1e38:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <__flp+0x1>
    1e3c:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <__flp>
    1e40:	fe 01       	movw	r30, r28
    1e42:	32 96       	adiw	r30, 0x02	; 2
    1e44:	44 c0       	rjmp	.+136    	; 0x1ece <malloc+0x124>
    1e46:	fe 01       	movw	r30, r28
    1e48:	e2 0f       	add	r30, r18
    1e4a:	f3 1f       	adc	r31, r19
    1e4c:	81 93       	st	Z+, r24
    1e4e:	91 93       	st	Z+, r25
    1e50:	22 50       	subi	r18, 0x02	; 2
    1e52:	31 09       	sbc	r19, r1
    1e54:	39 83       	std	Y+1, r19	; 0x01
    1e56:	28 83       	st	Y, r18
    1e58:	3a c0       	rjmp	.+116    	; 0x1ece <malloc+0x124>
    1e5a:	20 91 d4 02 	lds	r18, 0x02D4	; 0x8002d4 <__brkval>
    1e5e:	30 91 d5 02 	lds	r19, 0x02D5	; 0x8002d5 <__brkval+0x1>
    1e62:	23 2b       	or	r18, r19
    1e64:	41 f4       	brne	.+16     	; 0x1e76 <malloc+0xcc>
    1e66:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1e6a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1e6e:	30 93 d5 02 	sts	0x02D5, r19	; 0x8002d5 <__brkval+0x1>
    1e72:	20 93 d4 02 	sts	0x02D4, r18	; 0x8002d4 <__brkval>
    1e76:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e7a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1e7e:	21 15       	cp	r18, r1
    1e80:	31 05       	cpc	r19, r1
    1e82:	41 f4       	brne	.+16     	; 0x1e94 <malloc+0xea>
    1e84:	2d b7       	in	r18, 0x3d	; 61
    1e86:	3e b7       	in	r19, 0x3e	; 62
    1e88:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1e8c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1e90:	24 1b       	sub	r18, r20
    1e92:	35 0b       	sbc	r19, r21
    1e94:	e0 91 d4 02 	lds	r30, 0x02D4	; 0x8002d4 <__brkval>
    1e98:	f0 91 d5 02 	lds	r31, 0x02D5	; 0x8002d5 <__brkval+0x1>
    1e9c:	e2 17       	cp	r30, r18
    1e9e:	f3 07       	cpc	r31, r19
    1ea0:	a0 f4       	brcc	.+40     	; 0x1eca <malloc+0x120>
    1ea2:	2e 1b       	sub	r18, r30
    1ea4:	3f 0b       	sbc	r19, r31
    1ea6:	28 17       	cp	r18, r24
    1ea8:	39 07       	cpc	r19, r25
    1eaa:	78 f0       	brcs	.+30     	; 0x1eca <malloc+0x120>
    1eac:	ac 01       	movw	r20, r24
    1eae:	4e 5f       	subi	r20, 0xFE	; 254
    1eb0:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb2:	24 17       	cp	r18, r20
    1eb4:	35 07       	cpc	r19, r21
    1eb6:	48 f0       	brcs	.+18     	; 0x1eca <malloc+0x120>
    1eb8:	4e 0f       	add	r20, r30
    1eba:	5f 1f       	adc	r21, r31
    1ebc:	50 93 d5 02 	sts	0x02D5, r21	; 0x8002d5 <__brkval+0x1>
    1ec0:	40 93 d4 02 	sts	0x02D4, r20	; 0x8002d4 <__brkval>
    1ec4:	81 93       	st	Z+, r24
    1ec6:	91 93       	st	Z+, r25
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <malloc+0x124>
    1eca:	e0 e0       	ldi	r30, 0x00	; 0
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	cf 01       	movw	r24, r30
    1ed0:	df 91       	pop	r29
    1ed2:	cf 91       	pop	r28
    1ed4:	1f 91       	pop	r17
    1ed6:	0f 91       	pop	r16
    1ed8:	08 95       	ret

00001eda <free>:
    1eda:	cf 93       	push	r28
    1edc:	df 93       	push	r29
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <free+0xa>
    1ee2:	81 c0       	rjmp	.+258    	; 0x1fe6 <free+0x10c>
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	32 97       	sbiw	r30, 0x02	; 2
    1ee8:	13 82       	std	Z+3, r1	; 0x03
    1eea:	12 82       	std	Z+2, r1	; 0x02
    1eec:	a0 91 d6 02 	lds	r26, 0x02D6	; 0x8002d6 <__flp>
    1ef0:	b0 91 d7 02 	lds	r27, 0x02D7	; 0x8002d7 <__flp+0x1>
    1ef4:	10 97       	sbiw	r26, 0x00	; 0
    1ef6:	81 f4       	brne	.+32     	; 0x1f18 <free+0x3e>
    1ef8:	20 81       	ld	r18, Z
    1efa:	31 81       	ldd	r19, Z+1	; 0x01
    1efc:	82 0f       	add	r24, r18
    1efe:	93 1f       	adc	r25, r19
    1f00:	20 91 d4 02 	lds	r18, 0x02D4	; 0x8002d4 <__brkval>
    1f04:	30 91 d5 02 	lds	r19, 0x02D5	; 0x8002d5 <__brkval+0x1>
    1f08:	28 17       	cp	r18, r24
    1f0a:	39 07       	cpc	r19, r25
    1f0c:	51 f5       	brne	.+84     	; 0x1f62 <free+0x88>
    1f0e:	f0 93 d5 02 	sts	0x02D5, r31	; 0x8002d5 <__brkval+0x1>
    1f12:	e0 93 d4 02 	sts	0x02D4, r30	; 0x8002d4 <__brkval>
    1f16:	67 c0       	rjmp	.+206    	; 0x1fe6 <free+0x10c>
    1f18:	ed 01       	movw	r28, r26
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	ce 17       	cp	r28, r30
    1f20:	df 07       	cpc	r29, r31
    1f22:	40 f4       	brcc	.+16     	; 0x1f34 <free+0x5a>
    1f24:	4a 81       	ldd	r20, Y+2	; 0x02
    1f26:	5b 81       	ldd	r21, Y+3	; 0x03
    1f28:	9e 01       	movw	r18, r28
    1f2a:	41 15       	cp	r20, r1
    1f2c:	51 05       	cpc	r21, r1
    1f2e:	f1 f0       	breq	.+60     	; 0x1f6c <free+0x92>
    1f30:	ea 01       	movw	r28, r20
    1f32:	f5 cf       	rjmp	.-22     	; 0x1f1e <free+0x44>
    1f34:	d3 83       	std	Z+3, r29	; 0x03
    1f36:	c2 83       	std	Z+2, r28	; 0x02
    1f38:	40 81       	ld	r20, Z
    1f3a:	51 81       	ldd	r21, Z+1	; 0x01
    1f3c:	84 0f       	add	r24, r20
    1f3e:	95 1f       	adc	r25, r21
    1f40:	c8 17       	cp	r28, r24
    1f42:	d9 07       	cpc	r29, r25
    1f44:	59 f4       	brne	.+22     	; 0x1f5c <free+0x82>
    1f46:	88 81       	ld	r24, Y
    1f48:	99 81       	ldd	r25, Y+1	; 0x01
    1f4a:	84 0f       	add	r24, r20
    1f4c:	95 1f       	adc	r25, r21
    1f4e:	02 96       	adiw	r24, 0x02	; 2
    1f50:	91 83       	std	Z+1, r25	; 0x01
    1f52:	80 83       	st	Z, r24
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	9b 81       	ldd	r25, Y+3	; 0x03
    1f58:	93 83       	std	Z+3, r25	; 0x03
    1f5a:	82 83       	std	Z+2, r24	; 0x02
    1f5c:	21 15       	cp	r18, r1
    1f5e:	31 05       	cpc	r19, r1
    1f60:	29 f4       	brne	.+10     	; 0x1f6c <free+0x92>
    1f62:	f0 93 d7 02 	sts	0x02D7, r31	; 0x8002d7 <__flp+0x1>
    1f66:	e0 93 d6 02 	sts	0x02D6, r30	; 0x8002d6 <__flp>
    1f6a:	3d c0       	rjmp	.+122    	; 0x1fe6 <free+0x10c>
    1f6c:	e9 01       	movw	r28, r18
    1f6e:	fb 83       	std	Y+3, r31	; 0x03
    1f70:	ea 83       	std	Y+2, r30	; 0x02
    1f72:	49 91       	ld	r20, Y+
    1f74:	59 91       	ld	r21, Y+
    1f76:	c4 0f       	add	r28, r20
    1f78:	d5 1f       	adc	r29, r21
    1f7a:	ec 17       	cp	r30, r28
    1f7c:	fd 07       	cpc	r31, r29
    1f7e:	61 f4       	brne	.+24     	; 0x1f98 <free+0xbe>
    1f80:	80 81       	ld	r24, Z
    1f82:	91 81       	ldd	r25, Z+1	; 0x01
    1f84:	84 0f       	add	r24, r20
    1f86:	95 1f       	adc	r25, r21
    1f88:	02 96       	adiw	r24, 0x02	; 2
    1f8a:	e9 01       	movw	r28, r18
    1f8c:	99 83       	std	Y+1, r25	; 0x01
    1f8e:	88 83       	st	Y, r24
    1f90:	82 81       	ldd	r24, Z+2	; 0x02
    1f92:	93 81       	ldd	r25, Z+3	; 0x03
    1f94:	9b 83       	std	Y+3, r25	; 0x03
    1f96:	8a 83       	std	Y+2, r24	; 0x02
    1f98:	e0 e0       	ldi	r30, 0x00	; 0
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	12 96       	adiw	r26, 0x02	; 2
    1f9e:	8d 91       	ld	r24, X+
    1fa0:	9c 91       	ld	r25, X
    1fa2:	13 97       	sbiw	r26, 0x03	; 3
    1fa4:	00 97       	sbiw	r24, 0x00	; 0
    1fa6:	19 f0       	breq	.+6      	; 0x1fae <free+0xd4>
    1fa8:	fd 01       	movw	r30, r26
    1faa:	dc 01       	movw	r26, r24
    1fac:	f7 cf       	rjmp	.-18     	; 0x1f9c <free+0xc2>
    1fae:	8d 91       	ld	r24, X+
    1fb0:	9c 91       	ld	r25, X
    1fb2:	11 97       	sbiw	r26, 0x01	; 1
    1fb4:	9d 01       	movw	r18, r26
    1fb6:	2e 5f       	subi	r18, 0xFE	; 254
    1fb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fba:	82 0f       	add	r24, r18
    1fbc:	93 1f       	adc	r25, r19
    1fbe:	20 91 d4 02 	lds	r18, 0x02D4	; 0x8002d4 <__brkval>
    1fc2:	30 91 d5 02 	lds	r19, 0x02D5	; 0x8002d5 <__brkval+0x1>
    1fc6:	28 17       	cp	r18, r24
    1fc8:	39 07       	cpc	r19, r25
    1fca:	69 f4       	brne	.+26     	; 0x1fe6 <free+0x10c>
    1fcc:	30 97       	sbiw	r30, 0x00	; 0
    1fce:	29 f4       	brne	.+10     	; 0x1fda <free+0x100>
    1fd0:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <__flp+0x1>
    1fd4:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <__flp>
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <free+0x104>
    1fda:	13 82       	std	Z+3, r1	; 0x03
    1fdc:	12 82       	std	Z+2, r1	; 0x02
    1fde:	b0 93 d5 02 	sts	0x02D5, r27	; 0x8002d5 <__brkval+0x1>
    1fe2:	a0 93 d4 02 	sts	0x02D4, r26	; 0x8002d4 <__brkval>
    1fe6:	df 91       	pop	r29
    1fe8:	cf 91       	pop	r28
    1fea:	08 95       	ret

00001fec <atexit_fini>:
    1fec:	0e 94 62 00 	call	0xc4	; 0xc4 <atexit_finido>

00001ff0 <__do_global_dtors>:
    1ff0:	10 e0       	ldi	r17, 0x00	; 0
    1ff2:	c6 e3       	ldi	r28, 0x36	; 54
    1ff4:	d0 e0       	ldi	r29, 0x00	; 0
    1ff6:	04 c0       	rjmp	.+8      	; 0x2000 <__do_global_dtors+0x10>
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__tablejump2__>
    1ffe:	21 96       	adiw	r28, 0x01	; 1
    2000:	c8 33       	cpi	r28, 0x38	; 56
    2002:	d1 07       	cpc	r29, r17
    2004:	c9 f7       	brne	.-14     	; 0x1ff8 <__do_global_dtors+0x8>
    2006:	f8 94       	cli

00002008 <__stop_program>:
    2008:	ff cf       	rjmp	.-2      	; 0x2008 <__stop_program>
